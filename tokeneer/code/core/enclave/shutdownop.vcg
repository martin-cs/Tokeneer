           *******************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 05-SEP-2011 15:33:26.53

                        procedure Enclave.ShutdownOp




For path(s) from start to run-time check associated with statement of line 1306:

procedure_shutdownop_1.
H1:    status = waitingstartadminop .
H2:    admin__ispresent(theadmin) .
H3:    admin__isdoingop(theadmin) .
H4:    admin__thecurrentop(theadmin) = admin__shutdownop .
H5:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H7:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H8:    status >= statust__first .
H9:    status <= statust__last .
H10:   door__thecurrentdoor(door__state) >= door__t__first .
H11:   door__thecurrentdoor(door__state) <= door__t__last .
H12:   door__thecurrentdoor(door__state) = door__closed .
        ->
C1:    screen__clear >= screen__msgtextt__first .
C2:    screen__clear <= screen__msgtextt__last .
 

For path(s) from start to run-time check associated with statement of line 1307:

procedure_shutdownop_2.
H1:    status = waitingstartadminop .
H2:    admin__ispresent(theadmin) .
H3:    admin__isdoingop(theadmin) .
H4:    admin__thecurrentop(theadmin) = admin__shutdownop .
H5:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H7:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H8:    status >= statust__first .
H9:    status <= statust__last .
H10:   door__thecurrentdoor(door__state) >= door__t__first .
H11:   door__thecurrentdoor(door__state) <= door__t__last .
H12:   door__thecurrentdoor(door__state) = door__closed .
H13:   screen__clear >= screen__msgtextt__first .
H14:   screen__clear <= screen__msgtextt__last .
        ->
C1:    display__blank >= display__msgt__first .
C2:    display__blank <= display__msgt__last .
 

For path(s) from start to run-time check associated with statement of line 1308:

procedure_shutdownop_3.
H1:    status = waitingstartadminop .
H2:    admin__ispresent(theadmin) .
H3:    admin__isdoingop(theadmin) .
H4:    admin__thecurrentop(theadmin) = admin__shutdownop .
H5:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H7:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H8:    status >= statust__first .
H9:    status <= statust__last .
H10:   door__thecurrentdoor(door__state) >= door__t__first .
H11:   door__thecurrentdoor(door__state) <= door__t__last .
H12:   door__thecurrentdoor(door__state) = door__closed .
H13:   screen__clear >= screen__msgtextt__first .
H14:   screen__clear <= screen__msgtextt__last .
H15:   display__blank >= display__msgt__first .
H16:   display__blank <= display__msgt__last .
        ->
C1:    shutdown >= statust__first .
C2:    shutdown <= statust__last .
 

For path(s) from start to run-time check associated with statement of line 1313:

procedure_shutdownop_4.
H1:    status = waitingstartadminop .
H2:    admin__ispresent(theadmin) .
H3:    admin__isdoingop(theadmin) .
H4:    admin__thecurrentop(theadmin) = admin__shutdownop .
H5:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H7:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H8:    status >= statust__first .
H9:    status <= statust__last .
H10:   door__thecurrentdoor(door__state) >= door__t__first .
H11:   door__thecurrentdoor(door__state) <= door__t__last .
H12:   door__thecurrentdoor(door__state) = door__closed .
H13:   screen__clear >= screen__msgtextt__first .
H14:   screen__clear <= screen__msgtextt__last .
H15:   display__blank >= display__msgt__first .
H16:   display__blank <= display__msgt__last .
H17:   shutdown >= statust__first .
H18:   shutdown <= statust__last .
H19:   (latch__islocked(latch__state__3) and ((
           door__thecurrentdoor(door__state__3) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(door__state__3)))) <-> (
           door__thedooralarm(door__state__3) = 
           alarmtypes__alarming) .
H20:   latch__islocked(latch__state__3) .
H21:   not (admin__ispresent(theadmin__4)) .
H22:   not (admin__isdoingop(theadmin__4)) .
H23:   for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(
           admintoken__extractuser(admintoken__state), [
           i___1]) >= character__first) and (element(
           admintoken__extractuser(admintoken__state), [
           i___1]) <= character__last))) .
        ->
C1:    audittypes__information >= audittypes__severityt__first .
C2:    audittypes__information <= audittypes__severityt__last .
C3:    audittypes__shutdown >= audittypes__elementt__first .
C4:    audittypes__shutdown <= audittypes__elementt__last .
 

For path(s) from start to check associated with statement of line 1323:

procedure_shutdownop_5.
H1:    status = waitingstartadminop .
H2:    admin__ispresent(theadmin) .
H3:    admin__isdoingop(theadmin) .
H4:    admin__thecurrentop(theadmin) = admin__shutdownop .
H5:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H7:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H8:    status >= statust__first .
H9:    status <= statust__last .
H10:   door__thecurrentdoor(door__state) >= door__t__first .
H11:   door__thecurrentdoor(door__state) <= door__t__last .
H12:   door__thecurrentdoor(door__state) = door__closed .
H13:   screen__clear >= screen__msgtextt__first .
H14:   screen__clear <= screen__msgtextt__last .
H15:   display__blank >= display__msgt__first .
H16:   display__blank <= display__msgt__last .
H17:   shutdown >= statust__first .
H18:   shutdown <= statust__last .
H19:   (latch__islocked(latch__state__3) and ((
           door__thecurrentdoor(door__state__3) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(door__state__3)))) <-> (
           door__thedooralarm(door__state__3) = 
           alarmtypes__alarming) .
H20:   latch__islocked(latch__state__3) .
H21:   not (admin__ispresent(theadmin__4)) .
H22:   not (admin__isdoingop(theadmin__4)) .
H23:   for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(
           admintoken__extractuser(admintoken__state), [
           i___1]) >= character__first) and (element(
           admintoken__extractuser(admintoken__state), [
           i___1]) <= character__last))) .
H24:   audittypes__information >= audittypes__severityt__first .
H25:   audittypes__information <= audittypes__severityt__last .
H26:   audittypes__shutdown >= audittypes__elementt__first .
H27:   audittypes__shutdown <= audittypes__elementt__last .
H28:   not (admintoken__prf_isgood(admintoken__state__7)) .
H29:   not (admintoken__prf_authcertvalid(admintoken__state__7)) .
H30:   not ((admintoken__theauthcertrole(admintoken__state__7) >= 
           privtypes__adminprivileget__first) and (
           admintoken__theauthcertrole(admintoken__state__7) <= 
           privtypes__adminprivileget__last)) .
        ->
C1:    admin__prf_rolepresent(theadmin__4) <> 
           privtypes__guard .
 

For path(s) from start to run-time check associated with statement of line 1327:

procedure_shutdownop_6.
H1:    status = waitingstartadminop .
H2:    admin__ispresent(theadmin) .
H3:    admin__isdoingop(theadmin) .
H4:    admin__thecurrentop(theadmin) = admin__shutdownop .
H5:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H7:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H8:    status >= statust__first .
H9:    status <= statust__last .
H10:   door__thecurrentdoor(door__state) >= door__t__first .
H11:   door__thecurrentdoor(door__state) <= door__t__last .
H12:   not (door__thecurrentdoor(door__state) = door__closed) .
        ->
C1:    screen__closedoor >= screen__msgtextt__first .
C2:    screen__closedoor <= screen__msgtextt__last .
 

For path(s) from start to finish:

procedure_shutdownop_7.
H1:    status = waitingstartadminop .
H2:    admin__ispresent(theadmin) .
H3:    admin__isdoingop(theadmin) .
H4:    admin__thecurrentop(theadmin) = admin__shutdownop .
H5:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H7:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H8:    status >= statust__first .
H9:    status <= statust__last .
H10:   door__thecurrentdoor(door__state) >= door__t__first .
H11:   door__thecurrentdoor(door__state) <= door__t__last .
H12:   door__thecurrentdoor(door__state) = door__closed .
H13:   screen__clear >= screen__msgtextt__first .
H14:   screen__clear <= screen__msgtextt__last .
H15:   display__blank >= display__msgt__first .
H16:   display__blank <= display__msgt__last .
H17:   shutdown >= statust__first .
H18:   shutdown <= statust__last .
H19:   (latch__islocked(latch__state__3) and ((
           door__thecurrentdoor(door__state__3) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(door__state__3)))) <-> (
           door__thedooralarm(door__state__3) = 
           alarmtypes__alarming) .
H20:   latch__islocked(latch__state__3) .
H21:   not (admin__ispresent(theadmin__4)) .
H22:   not (admin__isdoingop(theadmin__4)) .
H23:   for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(
           admintoken__extractuser(admintoken__state), [
           i___1]) >= character__first) and (element(
           admintoken__extractuser(admintoken__state), [
           i___1]) <= character__last))) .
H24:   audittypes__information >= audittypes__severityt__first .
H25:   audittypes__information <= audittypes__severityt__last .
H26:   audittypes__shutdown >= audittypes__elementt__first .
H27:   audittypes__shutdown <= audittypes__elementt__last .
H28:   not (admintoken__prf_isgood(admintoken__state__7)) .
H29:   not (admintoken__prf_authcertvalid(admintoken__state__7)) .
H30:   not ((admintoken__theauthcertrole(admintoken__state__7) >= 
           privtypes__adminprivileget__first) and (
           admintoken__theauthcertrole(admintoken__state__7) <= 
           privtypes__adminprivileget__last)) .
H31:   admin__prf_rolepresent(theadmin__4) <> 
           privtypes__guard .
        ->
C1:    (shutdown = shutdown) or (shutdown = 
           waitingstartadminop) .
C2:    (shutdown = waitingstartadminop) -> ((
           admin__prf_rolepresent(theadmin__4) = 
           admin__prf_rolepresent(theadmin)) and (((
           admin__ispresent(theadmin__4) and admin__isdoingop(
           theadmin__4)) and (latch__state__3 = latch__state)) and (
           admin__thecurrentop(theadmin__4) = 
           admin__shutdownop))) .
C3:    (shutdown = shutdown) -> ((admin__prf_rolepresent(theadmin__4) = 
           privtypes__useronly) and (latch__islocked(latch__state__3) and (
          not (admin__isdoingop(theadmin__4))))) .
C4:    (admin__isdoingop(theadmin__4) and (
           admin__thecurrentop(theadmin__4) = 
           admin__shutdownop)) -> (shutdown = 
           waitingstartadminop) .
C5:    (latch__islocked(latch__state__3) and ((
           door__thecurrentdoor(door__state__3) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(door__state__3)))) <-> (
           door__thedooralarm(door__state__3) = 
           alarmtypes__alarming) .
C6:    (admin__prf_rolepresent(theadmin__4) = 
           privtypes__guard) -> (admintoken__prf_isgood(
           admintoken__state__7) and (
           admintoken__prf_authcertvalid(admintoken__state__7) and (
           admintoken__theauthcertrole(admintoken__state__7) = 
           privtypes__guard))) .
C7:    ((not (latch__islocked(latch__state__3))) and 
           latch__islocked(latch__state)) -> (
           admintoken__prf_isgood(admintoken__state__7) and (
           admintoken__prf_authcertvalid(admintoken__state__7) and (
           admintoken__theauthcertrole(admintoken__state__7) = 
           privtypes__guard))) .
C8:    (admin__isdoingop(theadmin__4) and (
           admin__thecurrentop(theadmin__4) = 
           admin__overridelock)) -> (admin__prf_rolepresent(theadmin__4) = 
           privtypes__guard) .
C9:    (admin__prf_rolepresent(theadmin__4) = 
           privtypes__guard) -> ((admin__isdoingop(theadmin__4) and (
           admin__thecurrentop(theadmin__4) = 
           admin__overridelock)) or (not (admin__isdoingop(theadmin__4)))) .
 

procedure_shutdownop_8.
H1:    status = waitingstartadminop .
H2:    admin__ispresent(theadmin) .
H3:    admin__isdoingop(theadmin) .
H4:    admin__thecurrentop(theadmin) = admin__shutdownop .
H5:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H7:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H8:    status >= statust__first .
H9:    status <= statust__last .
H10:   door__thecurrentdoor(door__state) >= door__t__first .
H11:   door__thecurrentdoor(door__state) <= door__t__last .
H12:   not (door__thecurrentdoor(door__state) = door__closed) .
H13:   screen__closedoor >= screen__msgtextt__first .
H14:   screen__closedoor <= screen__msgtextt__last .
        ->
C1:    (status = shutdown) or (status = waitingstartadminop) .
C2:    (status = waitingstartadminop) -> ((
           admin__prf_rolepresent(theadmin) = 
           admin__prf_rolepresent(theadmin)) and (((
           admin__ispresent(theadmin) and admin__isdoingop(
           theadmin)) and (latch__state = latch__state)) and (
           admin__thecurrentop(theadmin) = admin__shutdownop))) .
C3:    (status = shutdown) -> ((admin__prf_rolepresent(
           theadmin) = privtypes__useronly) and (
           latch__islocked(latch__state) and (not (
           admin__isdoingop(theadmin))))) .
C4:    (admin__isdoingop(theadmin) and (admin__thecurrentop(
           theadmin) = admin__shutdownop)) -> (status = 
           waitingstartadminop) .
C5:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
C6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
C7:    ((not (latch__islocked(latch__state))) and 
           latch__islocked(latch__state)) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
C8:    (admin__isdoingop(theadmin) and (admin__thecurrentop(
           theadmin) = admin__overridelock)) -> (
           admin__prf_rolepresent(theadmin) = 
           privtypes__guard) .
C9:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
 

