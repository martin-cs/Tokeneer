*****************************************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
*****************************************************************************


CREATED 05-SEP-2011, 15:33:26  SIMPLIFIED 05-SEP-2011, 15:40:27

SPARK Simplifier GPL 2011
Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.

procedure Enclave.AdminOp






RRS  The following user defined rule files have been read:
&&&  d:/sparkdev/tis2011/code/core/enclave/enclave.rlu
&&&  d:/sparkdev/tis2011/code/core/enclave/adminop.rlu
SEM  No semantic checks are performed on the rules.


@@@@@@@@@@  VC: procedure_adminop_1.  @@@@@@@@@@
%%%  Simplified H9 on reading formula in, to give:
     %%%  H9:  statust__first <= status
***  Proved C1:  admin__isdoingop(theadmin)
     using hypothesis H4.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_adminop_2.  @@@@@@@@@@
%%%  Simplified H9 on reading formula in, to give:
     %%%  H9:  statust__first <= status
---  Hypothesis H11 has been replaced by "true".  (It is already present, as H4)
          .
%%%  Simplified H12 on reading formula in, to give:
     %%%  H12:  admin__opt__first <= admin__thecurrentop(theadmin)
***  Proved C1:  status = waitingstartadminop or status = waitingfinishadminop
     using hypothesis H1.
***  Proved C2:  admin__ispresent(theadmin)
     using hypothesis H3.
***  Proved C3:  admin__isdoingop(theadmin)
     using hypothesis H4.
***  Proved C4:  admin__thecurrentop(theadmin) = admin__archivelog
     using hypothesis H14.
***  Proved C5:  admin__prf_rolepresent(theadmin) = privtypes__guard -> 
          admintoken__prf_isgood(admintoken__state) and (
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard)
     using hypothesis H6.
***  Proved C6:  admin__isdoingop(theadmin) and admin__thecurrentop(theadmin) = 
          admin__overridelock -> admin__prf_rolepresent(theadmin) = 
          privtypes__guard
     using hypothesis H7.
***  Proved C7:  admin__prf_rolepresent(theadmin) = privtypes__guard -> 
          admin__isdoingop(theadmin) and admin__thecurrentop(theadmin) = 
          admin__overridelock or not admin__isdoingop(theadmin)
     using hypothesis H8.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_adminop_3.  @@@@@@@@@@
%%%  Simplified H9 on reading formula in, to give:
     %%%  H9:  statust__first <= status
---  Hypothesis H11 has been replaced by "true".  (It is already present, as H4)
          .
%%%  Simplified H12 on reading formula in, to give:
     %%%  H12:  admin__opt__first <= admin__thecurrentop(theadmin)
***  Proved C1:  status = waitingstartadminop or status = waitingfinishadminop
     using hypothesis H1.
***  Proved C2:  admin__ispresent(theadmin)
     using hypothesis H3.
***  Proved C3:  admin__isdoingop(theadmin)
     using hypothesis H4.
***  Proved C4:  admin__thecurrentop(theadmin) = admin__updateconfigdata
     using hypothesis H14.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_adminop_4.  @@@@@@@@@@
%%%  Simplified H9 on reading formula in, to give:
     %%%  H9:  statust__first <= status
---  Hypothesis H11 has been replaced by "true".  (It is already present, as H4)
          .
%%%  Simplified H12 on reading formula in, to give:
     %%%  H12:  admin__opt__first <= admin__thecurrentop(theadmin)
***  Proved C1:  admin__isdoingop(theadmin)
     using hypothesis H4.
***  Proved C2:  admin__thecurrentop(theadmin) = admin__overridelock
     using hypothesis H14.
***  Proved C4:  admin__prf_rolepresent(theadmin) = privtypes__guard -> 
          admintoken__prf_isgood(admintoken__state) and (
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard)
     using hypothesis H6.
***  Proved C5:  admin__isdoingop(theadmin) and admin__thecurrentop(theadmin) = 
          admin__overridelock -> admin__prf_rolepresent(theadmin) = 
          privtypes__guard
     using hypothesis H7.
***  Proved C6:  admin__prf_rolepresent(theadmin) = privtypes__guard -> 
          admin__isdoingop(theadmin) and admin__thecurrentop(theadmin) = 
          admin__overridelock or not admin__isdoingop(theadmin)
     using hypothesis H8.
-S-  Applied substitution rule adminop_rules(104).
     This was achieved by replacing all occurrences of admin__opt__first by:
          admin__archivelog.
<S>  New H12:  admin__archivelog <= admin__thecurrentop(theadmin)
-S-  Applied substitution rule adminop_rules(105).
     This was achieved by replacing all occurrences of admin__opt__last by:
          admin__shutdownop.
<S>  New H13:  admin__thecurrentop(theadmin) <= admin__shutdownop
-S-  Applied substitution rule adminop_rules(109).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H9:  notenrolled <= status
-S-  Applied substitution rule adminop_rules(110).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H10:  status <= shutdown
---  Eliminated hypothesis H11 (true-hypothesis).
>>>  Using "A->B, A |- B" on H7, given H4 & H14, we simplify the former to:
     >>>  H7:  admin__prf_rolepresent(theadmin) = privtypes__guard
***  Proved C3:  admin__prf_rolepresent(theadmin) = privtypes__guard
     using hypothesis H7.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_adminop_5.  @@@@@@@@@@
%%%  Simplified H9 on reading formula in, to give:
     %%%  H9:  statust__first <= status
---  Hypothesis H11 has been replaced by "true".  (It is already present, as H4)
          .
%%%  Simplified H12 on reading formula in, to give:
     %%%  H12:  admin__opt__first <= admin__thecurrentop(theadmin)
***  Proved C2:  admin__ispresent(theadmin)
     using hypothesis H3.
***  Proved C3:  admin__isdoingop(theadmin)
     using hypothesis H4.
***  Proved C4:  admin__thecurrentop(theadmin) = admin__shutdownop
     using hypothesis H14.
***  Proved C5:  latch__islocked(latch__state) and (door__thecurrentdoor(
          door__state) = door__open and clock__greaterthanorequal(
          clock__thecurrenttime(clock__currenttime), door__prf_alarmtimeout(
          door__state))) <-> door__thedooralarm(door__state) = 
          alarmtypes__alarming
     using hypothesis H5.
***  Proved C6:  admin__prf_rolepresent(theadmin) = privtypes__guard -> 
          admintoken__prf_isgood(admintoken__state) and (
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard)
     using hypothesis H6.
***  Proved C7:  admin__prf_rolepresent(theadmin) = privtypes__guard -> 
          admin__isdoingop(theadmin) and admin__thecurrentop(theadmin) = 
          admin__overridelock or not admin__isdoingop(theadmin)
     using hypothesis H8.
-S-  Applied substitution rule adminop_rules(104).
     This was achieved by replacing all occurrences of admin__opt__first by:
          admin__archivelog.
<S>  New H12:  admin__archivelog <= admin__thecurrentop(theadmin)
-S-  Applied substitution rule adminop_rules(105).
     This was achieved by replacing all occurrences of admin__opt__last by:
          admin__shutdownop.
<S>  New H13:  admin__thecurrentop(theadmin) <= admin__shutdownop
-S-  Applied substitution rule adminop_rules(109).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H9:  notenrolled <= status
-S-  Applied substitution rule adminop_rules(110).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H10:  status <= shutdown
---  Eliminated hypothesis H11 (true-hypothesis).
>>>  Using "A->B, A |- B" on H2, given H4 & H14, we simplify the former to:
     >>>  H2:  status = waitingstartadminop
-S-  Eliminated hypothesis H2.
     This was achieved by replacing all occurrences of status by:
          waitingstartadminop.
<S>  New H1:  true
<S>  New H9:  true
<S>  New H10:  true
<S>  New C1:  true
---  Eliminated hypothesis H1 (true-hypothesis).
---  Eliminated hypothesis H9 (true-hypothesis).
---  Eliminated hypothesis H10 (true-hypothesis).
***  Proved C1:  true
***  PROVED VC.


@@@@@@@@@@  VC: procedure_adminop_6.  @@@@@@@@@@
%%%  Simplified H9 on reading formula in, to give:
     %%%  H9:  statust__first <= status
---  Hypothesis H11 has been replaced by "true".  (It is already present, as H4)
          .
%%%  Simplified H12 on reading formula in, to give:
     %%%  H12:  admin__opt__first <= admin__thecurrentop(theadmin)
---  Hypothesis H15 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H16 has been replaced by "true".  (It is already present, as H3)
          .
---  Hypothesis H17 has been replaced by "true".  (It is already present, as H4)
          .
---  Hypothesis H18 has been replaced by "true".  (It is already present, as 
          H14).
---  Hypothesis H19 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H20 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H21 has been replaced by "true".  (It is already present, as H8)
          .
%%%  Simplified H30 on reading formula in, to give:
     %%%  H30:  statust__first <= status__1
%%%  Simplified C8 on reading formula in, to give:
     %%%  C8:  true
%%%  Simplified C11 on reading formula in, to give:
     %%%  C11:  true
***  Proved C6:  latch__islocked(latch__state) and (door__thecurrentdoor(
          door__state) = door__open and clock__greaterthanorequal(
          clock__thecurrenttime(clock__currenttime), door__prf_alarmtimeout(
          door__state))) <-> door__thedooralarm(door__state) = 
          alarmtypes__alarming
     using hypothesis H5.
***  Proved C7:  admin__prf_rolepresent(theadmin__1) = privtypes__guard -> 
          admintoken__prf_isgood(admintoken__state) and (
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard)
     using hypothesis H26.
***  Proved C8:  true
***  Proved C9:  admin__isdoingop(theadmin__1) and admin__thecurrentop(
          theadmin__1) = admin__overridelock -> admin__prf_rolepresent(
          theadmin__1) = privtypes__guard
     using hypothesis H27.
***  Proved C10:  admin__prf_rolepresent(theadmin__1) = privtypes__guard -> 
          admin__isdoingop(theadmin__1) and admin__thecurrentop(theadmin__1) = 
          admin__overridelock or not admin__isdoingop(theadmin__1)
     using hypothesis H28.
***  Proved C11:  true
-S-  Applied substitution rule adminop_rules(104).
     This was achieved by replacing all occurrences of admin__opt__first by:
          admin__archivelog.
<S>  New H12:  admin__archivelog <= admin__thecurrentop(theadmin)
-S-  Applied substitution rule adminop_rules(105).
     This was achieved by replacing all occurrences of admin__opt__last by:
          admin__shutdownop.
<S>  New H13:  admin__thecurrentop(theadmin) <= admin__shutdownop
-S-  Applied substitution rule adminop_rules(109).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H9:  notenrolled <= status
<S>  New H30:  notenrolled <= status__1
-S-  Applied substitution rule adminop_rules(110).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H10:  status <= shutdown
<S>  New H31:  status__1 <= shutdown
---  Eliminated hypothesis H11 (true-hypothesis).
---  Eliminated hypothesis H15 (true-hypothesis).
---  Eliminated hypothesis H16 (true-hypothesis).
---  Eliminated hypothesis H17 (true-hypothesis).
---  Eliminated hypothesis H18 (true-hypothesis).
---  Eliminated hypothesis H19 (true-hypothesis).
---  Eliminated hypothesis H20 (true-hypothesis).
---  Eliminated hypothesis H21 (true-hypothesis).
***  Proved C2:  status__1 = waitingstartadminop or status__1 = 
          waitingfinishadminop -> admin__isdoingop(theadmin__1) and (
          admin__ispresent(theadmin__1) and admin__prf_rolepresent(theadmin__1) 
          = admin__prf_rolepresent(theadmin))
     using hypotheses H24 & H29.
***  Proved C3:  status__1 = enclavequiescent -> not admin__isdoingop(
          theadmin__1) and (admin__ispresent(theadmin__1) and 
          admin__prf_rolepresent(theadmin__1) = admin__prf_rolepresent(theadmin)
          )
     using hypotheses H23, H25 & H29.
     +++  New H32:  alarmtypes__statust__size >= 0
     +++  New H33:  privtypes__privileget__size >= 0
     +++  New H34:  door__t__size >= 0
     +++  New H35:  admin__opandnullt__size >= 0
     +++  New H36:  admin__opt__size >= 0
     +++  New H37:  statust__size >= 0
>>>  Conclusion C4 is an implication formula [P->Q].
     Attempting to prove this by proving Q while adding P to the hypotheses.
+++  Added new hypotheses (in proving an implication formula).
     +++  New H38:  status__1 = shutdown
+++  New subgoal C1:  not admin__isdoingop(theadmin__1) and 
          admin__prf_rolepresent(theadmin__1) = privtypes__useronly
>>>  Conclusion C1 has now been split into two, giving:
     >>>  C1:  not admin__isdoingop(theadmin__1)
     >>>  C2:  admin__prf_rolepresent(theadmin__1) = privtypes__useronly
-S-  Eliminated hypothesis H38.
     This was achieved by replacing all occurrences of status__1 by:
          shutdown.
<S>  New H22:  false
<S>  New H24:  true
<S>  New H25:  true
<S>  New H30:  true
<S>  New H31:  true
***  Proved subgoal C1
     using hypothesis H22.
***  Proved subgoal C2
     using hypothesis H22.
***  Proved C4:  status__1 = shutdown -> not admin__isdoingop(theadmin__1) and 
          admin__prf_rolepresent(theadmin__1) = privtypes__useronly
     by implication.
***  Proved C1:  status__1 = waitingstartadminop or (status__1 = 
          waitingfinishadminop or status__1 = enclavequiescent or status__1 = 
          shutdown)
     This was achieved by applying the inference rule adminop_user(1)
     [from rulefile adminop.rlu] to infer this conclusion from its 
          side-conditions,
     which were established as follows:
     <<<  From H22, proved: status__1 = waitingstartadminop or (status__1 = 
          waitingfinishadminop or status__1 = enclavequiescent)
***  Proved C5:  admin__isdoingop(theadmin__1) and admin__thecurrentop(
          theadmin__1) = admin__shutdownop -> status__1 = waitingstartadminop
     This was achieved by applying the inference rule adminop_user(5)
     [from rulefile adminop.rlu] to infer this conclusion from its 
          side-conditions,
     which were established as follows:
     <<<  From H22, proved: status__1 = waitingstartadminop or (status__1 = 
          waitingfinishadminop or status__1 = enclavequiescent)
     <<<  From H24, proved: status__1 = waitingstartadminop or status__1 = 
          waitingfinishadminop -> admin__isdoingop(theadmin__1) and (
          admin__ispresent(theadmin__1) and admin__thecurrentop(theadmin__1) = 
          admin__archivelog)
     <<<  From H25, proved: status__1 = enclavequiescent -> not 
          admin__isdoingop(theadmin__1)
     <<<  By simple reasoning, proved: waitingstartadminop <> 
          waitingfinishadminop
     <<<  By simple reasoning, proved: waitingstartadminop <> enclavequiescent
     <<<  By simple reasoning, proved: waitingfinishadminop <> enclavequiescent
     <<<  By simple reasoning, proved: admin__shutdownop <> admin__archivelog
***  PROVED VC.

VCN  6: Summary of user rule application.
FIL  adminop.rlu
RUL     adminop_user(1)
CON        1
RUL     adminop_user(5)
CON        5


@@@@@@@@@@  VC: procedure_adminop_7.  @@@@@@@@@@
%%%  Simplified H9 on reading formula in, to give:
     %%%  H9:  statust__first <= status
---  Hypothesis H11 has been replaced by "true".  (It is already present, as H4)
          .
%%%  Simplified H12 on reading formula in, to give:
     %%%  H12:  admin__opt__first <= admin__thecurrentop(theadmin)
---  Hypothesis H15 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H16 has been replaced by "true".  (It is already present, as H3)
          .
---  Hypothesis H17 has been replaced by "true".  (It is already present, as H4)
          .
---  Hypothesis H18 has been replaced by "true".  (It is already present, as 
          H14).
%%%  Simplified H24 on reading formula in, to give:
     %%%  H24:  statust__first <= status__2
%%%  Simplified C8 on reading formula in, to give:
     %%%  C8:  true
%%%  Simplified C11 on reading formula in, to give:
     %%%  C11:  true
***  Proved C6:  latch__islocked(latch__state) and (door__thecurrentdoor(
          door__state) = door__open and clock__greaterthanorequal(
          clock__thecurrenttime(clock__currenttime), door__prf_alarmtimeout(
          door__state))) <-> door__thedooralarm(door__state) = 
          alarmtypes__alarming
     using hypothesis H5.
***  Proved C8:  true
***  Proved C11:  true
-S-  Applied substitution rule adminop_rules(104).
     This was achieved by replacing all occurrences of admin__opt__first by:
          admin__archivelog.
<S>  New H12:  admin__archivelog <= admin__thecurrentop(theadmin)
-S-  Applied substitution rule adminop_rules(105).
     This was achieved by replacing all occurrences of admin__opt__last by:
          admin__shutdownop.
<S>  New H13:  admin__thecurrentop(theadmin) <= admin__shutdownop
-S-  Applied substitution rule adminop_rules(109).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H9:  notenrolled <= status
<S>  New H24:  notenrolled <= status__2
-S-  Applied substitution rule adminop_rules(110).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H10:  status <= shutdown
<S>  New H25:  status__2 <= shutdown
---  Eliminated hypothesis H11 (true-hypothesis).
---  Eliminated hypothesis H15 (true-hypothesis).
---  Eliminated hypothesis H16 (true-hypothesis).
---  Eliminated hypothesis H17 (true-hypothesis).
---  Eliminated hypothesis H18 (true-hypothesis).
***  Proved C2:  status__2 = waitingstartadminop or status__2 = 
          waitingfinishadminop -> admin__isdoingop(theadmin__2) and (
          admin__ispresent(theadmin__2) and admin__prf_rolepresent(theadmin__2) 
          = admin__prf_rolepresent(theadmin))
     using hypotheses H21 & H23.
***  Proved C3:  status__2 = enclavequiescent -> not admin__isdoingop(
          theadmin__2) and (admin__ispresent(theadmin__2) and 
          admin__prf_rolepresent(theadmin__2) = admin__prf_rolepresent(theadmin)
          )
     using hypotheses H20, H22 & H23.
     +++  New H26:  alarmtypes__statust__size >= 0
     +++  New H27:  privtypes__privileget__size >= 0
     +++  New H28:  door__t__size >= 0
     +++  New H29:  admin__opandnullt__size >= 0
     +++  New H30:  admin__opt__size >= 0
     +++  New H31:  statust__size >= 0
>>>  Conclusion C4 is an implication formula [P->Q].
     Attempting to prove this by proving Q while adding P to the hypotheses.
+++  Added new hypotheses (in proving an implication formula).
     +++  New H32:  status__2 = shutdown
+++  New subgoal C1:  not admin__isdoingop(theadmin__2) and 
          admin__prf_rolepresent(theadmin__2) = privtypes__useronly
>>>  Conclusion C1 has now been split into two, giving:
     >>>  C1:  not admin__isdoingop(theadmin__2)
     >>>  C2:  admin__prf_rolepresent(theadmin__2) = privtypes__useronly
-S-  Eliminated hypothesis H32.
     This was achieved by replacing all occurrences of status__2 by:
          shutdown.
<S>  New H19:  false
<S>  New H21:  true
<S>  New H22:  true
<S>  New H24:  true
<S>  New H25:  true
***  Proved subgoal C1
     using hypothesis H19.
***  Proved subgoal C2
     using hypothesis H19.
***  Proved C4:  status__2 = shutdown -> not admin__isdoingop(theadmin__2) and 
          admin__prf_rolepresent(theadmin__2) = privtypes__useronly
     by implication.
>>>  Conclusion C7 is an implication formula [P->Q].
     Attempting to prove this by proving Q while adding P to the hypotheses.
+++  Added new hypotheses (in proving an implication formula).
     +++  New H32:  admin__prf_rolepresent(theadmin__2) = privtypes__guard
>>>  Using "A->B, A |- B" on H6, given H23 & H32, we simplify the former to:
     >>>  H6:  admintoken__prf_isgood(admintoken__state) and (
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard)
>>>  Using "A->B, A |- B" on H8, given H23 & H32, we simplify the former to:
     >>>  H8:  admin__isdoingop(theadmin) and admin__thecurrentop(theadmin) = 
          admin__overridelock or not admin__isdoingop(theadmin)
>>>  Hypothesis H6 has now been split into two, giving:
     >>>  H33:  admintoken__prf_isgood(admintoken__state)
     >>>  H34:  admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard
>>>  Hypothesis H34 has now been split into two, giving:
     >>>  H35:  admintoken__prf_authcertvalid(admintoken__state)
     >>>  H36:  admintoken__theauthcertrole(admintoken__state) = 
          privtypes__guard
+++  New subgoal C1:  admintoken__prf_isgood(admintoken__state) and (
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard)
>>>  Conclusion C1 has now been split into two, giving:
     >>>  C1:  admintoken__prf_isgood(admintoken__state)
     >>>  C2:  admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard
>>>  Conclusion C2 has now been split into two, giving:
     >>>  C2:  admintoken__prf_authcertvalid(admintoken__state)
     >>>  C3:  admintoken__theauthcertrole(admintoken__state) = privtypes__guard
***  Proved subgoal C1
     using hypothesis H33.
***  Proved subgoal C2
     using hypothesis H35.
***  Proved subgoal C3
     using hypothesis H36.
***  Proved C7:  admin__prf_rolepresent(theadmin__2) = privtypes__guard -> 
          admintoken__prf_isgood(admintoken__state) and (
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard)
     by implication.
***  Proved C1:  status__2 = waitingstartadminop or (status__2 = 
          waitingfinishadminop or status__2 = enclavequiescent or status__2 = 
          shutdown)
     This was achieved by applying the inference rule adminop_user(1)
     [from rulefile adminop.rlu] to infer this conclusion from its 
          side-conditions,
     which were established as follows:
     <<<  From H19, proved: status__2 = waitingstartadminop or (status__2 = 
          waitingfinishadminop or status__2 = enclavequiescent)
***  Proved C5:  admin__isdoingop(theadmin__2) and admin__thecurrentop(
          theadmin__2) = admin__shutdownop -> status__2 = waitingstartadminop
     This was achieved by applying the inference rule adminop_user(5)
     [from rulefile adminop.rlu] to infer this conclusion from its 
          side-conditions,
     which were established as follows:
     <<<  From H19, proved: status__2 = waitingstartadminop or (status__2 = 
          waitingfinishadminop or status__2 = enclavequiescent)
     <<<  From H21, proved: status__2 = waitingstartadminop or status__2 = 
          waitingfinishadminop -> admin__isdoingop(theadmin__2) and (
          admin__ispresent(theadmin__2) and admin__thecurrentop(theadmin__2) = 
          admin__updateconfigdata)
     <<<  From H22, proved: status__2 = enclavequiescent -> not 
          admin__isdoingop(theadmin__2)
     <<<  By simple reasoning, proved: waitingstartadminop <> 
          waitingfinishadminop
     <<<  By simple reasoning, proved: waitingstartadminop <> enclavequiescent
     <<<  By simple reasoning, proved: waitingfinishadminop <> enclavequiescent
     <<<  By simple reasoning, proved: admin__shutdownop <> 
          admin__updateconfigdata
***  Proved C9:  admin__isdoingop(theadmin__2) and admin__thecurrentop(
          theadmin__2) = admin__overridelock -> admin__prf_rolepresent(
          theadmin__2) = privtypes__guard
     This was achieved by applying the inference rule adminop_user(5)
     [from rulefile adminop.rlu] to infer this conclusion from its 
          side-conditions,
     which were established as follows:
     <<<  From H19, proved: status__2 = waitingstartadminop or (status__2 = 
          waitingfinishadminop or status__2 = enclavequiescent)
     <<<  From H21, proved: status__2 = waitingstartadminop or status__2 = 
          waitingfinishadminop -> admin__isdoingop(theadmin__2) and (
          admin__ispresent(theadmin__2) and admin__thecurrentop(theadmin__2) = 
          admin__updateconfigdata)
     <<<  From H22, proved: status__2 = enclavequiescent -> not 
          admin__isdoingop(theadmin__2)
     <<<  By simple reasoning, proved: waitingstartadminop <> 
          waitingfinishadminop
     <<<  By simple reasoning, proved: waitingstartadminop <> enclavequiescent
     <<<  By simple reasoning, proved: waitingfinishadminop <> enclavequiescent
     <<<  By simple reasoning, proved: admin__overridelock <> 
          admin__updateconfigdata
***  Proved C10:  admin__prf_rolepresent(theadmin__2) = privtypes__guard -> 
          admin__isdoingop(theadmin__2) and admin__thecurrentop(theadmin__2) = 
          admin__overridelock or not admin__isdoingop(theadmin__2)
     This was achieved by applying the inference rule adminop_user(3)
     [from rulefile adminop.rlu] to infer this conclusion from its 
          side-conditions,
     which were established as follows:
     <<<  From H23, proved: admin__prf_rolepresent(theadmin__2) = 
          admin__prf_rolepresent(theadmin)
     <<<  From H8, proved: admin__prf_rolepresent(theadmin) = privtypes__guard 
          -> admin__isdoingop(theadmin) and admin__thecurrentop(theadmin) = 
          admin__overridelock or not admin__isdoingop(theadmin)
     <<<  From H4, proved: admin__isdoingop(theadmin)
     <<<  From H14, proved: admin__thecurrentop(theadmin) = 
          admin__updateconfigdata
     <<<  By simple reasoning, proved: admin__overridelock <> 
          admin__updateconfigdata
***  PROVED VC.

VCN  7: Summary of user rule application.
FIL  adminop.rlu
RUL     adminop_user(1)
CON        1
RUL     adminop_user(5)
CON        5, 9
RUL     adminop_user(3)
CON        10


@@@@@@@@@@  VC: procedure_adminop_8.  @@@@@@@@@@
%%%  Simplified H9 on reading formula in, to give:
     %%%  H9:  statust__first <= status
---  Hypothesis H11 has been replaced by "true".  (It is already present, as H4)
          .
%%%  Simplified H12 on reading formula in, to give:
     %%%  H12:  admin__opt__first <= admin__thecurrentop(theadmin)
---  Hypothesis H15 has been replaced by "true".  (It is already present, as H4)
          .
---  Hypothesis H16 has been replaced by "true".  (It is already present, as 
          H14).
---  Hypothesis H18 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H19 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H20 has been replaced by "true".  (It is already present, as H8)
          .
%%%  Simplified H30 on reading formula in, to give:
     %%%  H30:  statust__first <= status__3
***  Proved C1:  status__3 = waitingstartadminop or (status__3 = 
          waitingfinishadminop or status__3 = enclavequiescent or status__3 = 
          shutdown)
     using hypothesis H21.
***  Proved C2:  status__3 = waitingstartadminop or status__3 = 
          waitingfinishadminop -> admin__isdoingop(theadmin__3) and (
          admin__ispresent(theadmin__3) and admin__prf_rolepresent(theadmin__3) 
          = admin__prf_rolepresent(theadmin))
     using hypothesis H21.
***  Proved C4:  status__3 = shutdown -> not admin__isdoingop(theadmin__3) and 
          admin__prf_rolepresent(theadmin__3) = privtypes__useronly
     using hypothesis H21.
***  Proved C5:  admin__isdoingop(theadmin__3) and admin__thecurrentop(
          theadmin__3) = admin__shutdownop -> status__3 = waitingstartadminop
     using hypothesis H24.
***  Proved C6:  latch__islocked(latch__state__3) and (door__thecurrentdoor(
          door__state__3) = door__open and clock__greaterthanorequal(
          clock__thecurrenttime(clock__currenttime), door__prf_alarmtimeout(
          door__state__3))) <-> door__thedooralarm(door__state__3) = 
          alarmtypes__alarming
     using hypothesis H22.
***  Proved C7:  admin__prf_rolepresent(theadmin__3) = privtypes__guard -> 
          admintoken__prf_isgood(admintoken__state) and (
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard)
     using hypothesis H25.
***  Proved C8:  not latch__islocked(latch__state__3) and latch__islocked(
          latch__state) -> admintoken__prf_isgood(admintoken__state) and (
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard)
     using hypothesis H26.
***  Proved C9:  admin__isdoingop(theadmin__3) and admin__thecurrentop(
          theadmin__3) = admin__overridelock -> admin__prf_rolepresent(
          theadmin__3) = privtypes__guard
     using hypothesis H27.
***  Proved C10:  admin__prf_rolepresent(theadmin__3) = privtypes__guard -> 
          admin__isdoingop(theadmin__3) and admin__thecurrentop(theadmin__3) = 
          admin__overridelock or not admin__isdoingop(theadmin__3)
     using hypothesis H28.
***  Proved C11:  not latch__islocked(latch__state__3) and latch__islocked(
          latch__state) -> admin__isdoingop(theadmin) and admin__thecurrentop(
          theadmin) = admin__overridelock
     using hypothesis H29.
+++  Using "A->B, A |- B" on hypotheses H6 & H17 yields a new hypothesis:
     +++  H32:  admintoken__prf_isgood(admintoken__state) and (
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard)
+++  Using "A->B, A |- B" on hypotheses H8 & H17 yields a new hypothesis:
     +++  H33:  admin__isdoingop(theadmin) and admin__thecurrentop(theadmin) = 
          admin__overridelock or not admin__isdoingop(theadmin)
-S-  Applied substitution rule adminop_rules(104).
     This was achieved by replacing all occurrences of admin__opt__first by:
          admin__archivelog.
<S>  New H12:  admin__archivelog <= admin__thecurrentop(theadmin)
-S-  Applied substitution rule adminop_rules(105).
     This was achieved by replacing all occurrences of admin__opt__last by:
          admin__shutdownop.
<S>  New H13:  admin__thecurrentop(theadmin) <= admin__shutdownop
-S-  Applied substitution rule adminop_rules(109).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H9:  notenrolled <= status
<S>  New H30:  notenrolled <= status__3
-S-  Applied substitution rule adminop_rules(110).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H10:  status <= shutdown
<S>  New H31:  status__3 <= shutdown
---  Eliminated hypothesis H11 (true-hypothesis).
---  Eliminated hypothesis H15 (true-hypothesis).
---  Eliminated hypothesis H16 (true-hypothesis).
---  Eliminated hypothesis H18 (true-hypothesis).
---  Eliminated hypothesis H19 (true-hypothesis).
---  Eliminated hypothesis H20 (true-hypothesis).
---  Eliminated hypothesis H33 (true-disjunction).
>>>  Using "A->B, A |- B" on H6, given H17, we simplify the former to:
     >>>  H6:  admintoken__prf_isgood(admintoken__state) and (
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard)
>>>  Using "A->B, A |- B" on H7, given H4 & H14, we simplify the former to:
     >>>  H7:  admin__prf_rolepresent(theadmin) = privtypes__guard
>>>  Using "A->B, A |- B" on H8, given H17, we simplify the former to:
     >>>  H8:  admin__isdoingop(theadmin) and admin__thecurrentop(theadmin) = 
          admin__overridelock or not admin__isdoingop(theadmin)
>>>  Using "A->B, A |- B" on H25, given H17 & H23, we simplify the former to:
     >>>  H25:  admintoken__prf_isgood(admintoken__state) and (
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard)
>>>  Using "A->B, A |- B" on H28, given H17 & H23, we simplify the former to:
     >>>  H28:  admin__isdoingop(theadmin__3) and admin__thecurrentop(
          theadmin__3) = admin__overridelock or not admin__isdoingop(
          theadmin__3)
-S-  Eliminated hypothesis H21.
     This was achieved by replacing all occurrences of status__3 by:
          enclavequiescent.
<S>  New H30:  true
<S>  New H31:  true
<S>  New C3:  not admin__isdoingop(theadmin__3) and (admin__ispresent(
          theadmin__3) and admin__prf_rolepresent(theadmin__3) = 
          admin__prf_rolepresent(theadmin))
---  Eliminated hypothesis H30 (true-hypothesis).
---  Eliminated hypothesis H31 (true-hypothesis).
>>>  Hypothesis H6 has now been split into two, giving:
     >>>  H34:  admintoken__prf_isgood(admintoken__state)
     >>>  H35:  admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard
---  Attempted addition of new hypothesis:
          admintoken__prf_isgood(admintoken__state)
     eliminated: this already exists (as H34).
---  Attempted addition of new hypothesis:
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard
     eliminated: this already exists (as H35).
>>>  Hypothesis H25 has now been split into two, giving:
     >>>  H34:  admintoken__prf_isgood(admintoken__state)
     >>>  H35:  admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard
---  Attempted addition of new hypothesis:
          admintoken__prf_isgood(admintoken__state)
     eliminated: this already exists (as H34).
---  Attempted addition of new hypothesis:
          admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard
     eliminated: this already exists (as H35).
>>>  Hypothesis H32 has now been split into two, giving:
     >>>  H34:  admintoken__prf_isgood(admintoken__state)
     >>>  H35:  admintoken__prf_authcertvalid(admintoken__state) and 
          admintoken__theauthcertrole(admintoken__state) = privtypes__guard
>>>  Hypothesis H35 has now been split into two, giving:
     >>>  H36:  admintoken__prf_authcertvalid(admintoken__state)
     >>>  H37:  admintoken__theauthcertrole(admintoken__state) = 
          privtypes__guard
>>>  Conclusion C3 has now been split into two, giving:
     >>>  C3:  not admin__isdoingop(theadmin__3)
     >>>  C12:  admin__ispresent(theadmin__3) and admin__prf_rolepresent(
          theadmin__3) = admin__prf_rolepresent(theadmin)
>>>  Conclusion C12 has now been split into two, giving:
     >>>  C12:  admin__ispresent(theadmin__3)
     >>>  C13:  admin__prf_rolepresent(theadmin__3) = admin__prf_rolepresent(
          theadmin)
***  Proved C3:  not admin__isdoingop(theadmin__3)
     using hypothesis H24.
***  Proved C13:  admin__prf_rolepresent(theadmin__3) = admin__prf_rolepresent(
          theadmin)
     using hypothesis H23.
     +++  New H38:  alarmtypes__statust__size >= 0
     +++  New H39:  privtypes__privileget__size >= 0
     +++  New H40:  door__t__size >= 0
     +++  New H41:  admin__opandnullt__size >= 0
     +++  New H42:  admin__opt__size >= 0
     +++  New H43:  statust__size >= 0
***  Proved C12:  admin__ispresent(theadmin__3)
     This was achieved by applying the inference rule enclave_user(3)
     [from rulefile enclave.rlu] to infer this conclusion from its 
          side-conditions,
     which were established as follows:
     <<<  From H23, proved: admin__prf_rolepresent(theadmin__3) = 
          admin__prf_rolepresent(theadmin)
     <<<  From H7, proved: admin__prf_rolepresent(theadmin) <> 
          privtypes__useronly
***  PROVED VC.

VCN  8: Summary of user rule application.
FIL  enclave.rlu
RUL     enclave_user(3)
CON        12


@@@@@@@@@@  VC: procedure_adminop_9.  @@@@@@@@@@
%%%  Simplified H9 on reading formula in, to give:
     %%%  H9:  statust__first <= status
---  Hypothesis H11 has been replaced by "true".  (It is already present, as H4)
          .
%%%  Simplified H12 on reading formula in, to give:
     %%%  H12:  admin__opt__first <= admin__thecurrentop(theadmin)
---  Hypothesis H16 has been replaced by "true".  (It is already present, as H3)
          .
---  Hypothesis H17 has been replaced by "true".  (It is already present, as H4)
          .
---  Hypothesis H18 has been replaced by "true".  (It is already present, as 
          H14).
---  Hypothesis H19 has been replaced by "true".  (It is already present, as H5)
          .
---  Hypothesis H20 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H21 has been replaced by "true".  (It is already present, as H8)
          .
%%%  Simplified H31 on reading formula in, to give:
     %%%  H31:  statust__first <= status__4
***  Proved C5:  admin__isdoingop(theadmin__4) and admin__thecurrentop(
          theadmin__4) = admin__shutdownop -> status__4 = waitingstartadminop
     using hypothesis H25.
***  Proved C6:  latch__islocked(latch__state__4) and (door__thecurrentdoor(
          door__state__4) = door__open and clock__greaterthanorequal(
          clock__thecurrenttime(clock__currenttime), door__prf_alarmtimeout(
          door__state__4))) <-> door__thedooralarm(door__state__4) = 
          alarmtypes__alarming
     using hypothesis H26.
***  Proved C7:  admin__prf_rolepresent(theadmin__4) = privtypes__guard -> 
          admintoken__prf_isgood(admintoken__state__4) and (
          admintoken__prf_authcertvalid(admintoken__state__4) and 
          admintoken__theauthcertrole(admintoken__state__4) = privtypes__guard)
     using hypothesis H27.
***  Proved C8:  not latch__islocked(latch__state__4) and latch__islocked(
          latch__state) -> admintoken__prf_isgood(admintoken__state__4) and (
          admintoken__prf_authcertvalid(admintoken__state__4) and 
          admintoken__theauthcertrole(admintoken__state__4) = privtypes__guard)
     using hypothesis H28.
***  Proved C9:  admin__isdoingop(theadmin__4) and admin__thecurrentop(
          theadmin__4) = admin__overridelock -> admin__prf_rolepresent(
          theadmin__4) = privtypes__guard
     using hypothesis H29.
***  Proved C10:  admin__prf_rolepresent(theadmin__4) = privtypes__guard -> 
          admin__isdoingop(theadmin__4) and admin__thecurrentop(theadmin__4) = 
          admin__overridelock or not admin__isdoingop(theadmin__4)
     using hypothesis H30.
-S-  Applied substitution rule adminop_rules(104).
     This was achieved by replacing all occurrences of admin__opt__first by:
          admin__archivelog.
<S>  New H12:  admin__archivelog <= admin__thecurrentop(theadmin)
-S-  Applied substitution rule adminop_rules(105).
     This was achieved by replacing all occurrences of admin__opt__last by:
          admin__shutdownop.
<S>  New H13:  admin__thecurrentop(theadmin) <= admin__shutdownop
-S-  Applied substitution rule adminop_rules(109).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H9:  notenrolled <= status
<S>  New H31:  notenrolled <= status__4
-S-  Applied substitution rule adminop_rules(110).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H10:  status <= shutdown
<S>  New H32:  status__4 <= shutdown
---  Eliminated hypothesis H11 (true-hypothesis).
---  Eliminated hypothesis H16 (true-hypothesis).
---  Eliminated hypothesis H17 (true-hypothesis).
---  Eliminated hypothesis H18 (true-hypothesis).
---  Eliminated hypothesis H19 (true-hypothesis).
---  Eliminated hypothesis H20 (true-hypothesis).
---  Eliminated hypothesis H21 (true-hypothesis).
---  Eliminated hypothesis H1 (true-disjunction).
>>>  Using "A->B, A |- B" on H2, given H4 & H14, we simplify the former to:
     >>>  H2:  status = waitingstartadminop
-S-  Eliminated hypothesis H15.
     This was achieved by replacing all occurrences of status by:
          waitingstartadminop.
<S>  New H9:  true
<S>  New H10:  true
<S>  New H2:  true
---  Eliminated hypothesis H9 (true-hypothesis).
---  Eliminated hypothesis H10 (true-hypothesis).
---  Eliminated hypothesis H2 (true-hypothesis).
***  Proved C4:  status__4 = shutdown -> not admin__isdoingop(theadmin__4) and 
          admin__prf_rolepresent(theadmin__4) = privtypes__useronly
     using hypothesis H24.
     +++  New H33:  alarmtypes__statust__size >= 0
     +++  New H34:  privtypes__privileget__size >= 0
     +++  New H35:  door__t__size >= 0
     +++  New H36:  admin__opandnullt__size >= 0
     +++  New H37:  admin__opt__size >= 0
     +++  New H38:  statust__size >= 0
>>>  Conclusion C3 is an implication formula [P->Q].
     Attempting to prove this by proving Q while adding P to the hypotheses.
+++  Added new hypotheses (in proving an implication formula).
     +++  New H39:  status__4 = enclavequiescent
+++  New subgoal C1:  not admin__isdoingop(theadmin__4) and (admin__ispresent(
          theadmin__4) and admin__prf_rolepresent(theadmin__4) = 
          admin__prf_rolepresent(theadmin))
>>>  Conclusion C1 has now been split into two, giving:
     >>>  C1:  not admin__isdoingop(theadmin__4)
     >>>  C2:  admin__ispresent(theadmin__4) and admin__prf_rolepresent(
          theadmin__4) = admin__prf_rolepresent(theadmin)
>>>  Conclusion C2 has now been split into two, giving:
     >>>  C2:  admin__ispresent(theadmin__4)
     >>>  C3:  admin__prf_rolepresent(theadmin__4) = admin__prf_rolepresent(
          theadmin)
-S-  Eliminated hypothesis H39.
     This was achieved by replacing all occurrences of status__4 by:
          enclavequiescent.
<S>  New H22:  false
<S>  New H23:  true
<S>  New H24:  true
<S>  New H25:  not (admin__isdoingop(theadmin__4) and admin__thecurrentop(
          theadmin__4) = admin__shutdownop)
<S>  New H31:  true
<S>  New H32:  true
***  Proved subgoal C1
     using hypothesis H22.
***  Proved subgoal C2
     using hypothesis H22.
***  Proved subgoal C3
     using hypothesis H22.
***  Proved C3:  status__4 = enclavequiescent -> not admin__isdoingop(
          theadmin__4) and (admin__ispresent(theadmin__4) and 
          admin__prf_rolepresent(theadmin__4) = admin__prf_rolepresent(theadmin)
          )
     by implication.
***  Proved C1:  status__4 = waitingstartadminop or (status__4 = 
          waitingfinishadminop or status__4 = enclavequiescent or status__4 = 
          shutdown)
     This was achieved by applying the inference rule adminop_user(2)
     [from rulefile adminop.rlu] to infer this conclusion from its 
          side-conditions,
     which were established as follows:
     <<<  From H22, proved: status__4 = shutdown or status__4 = 
          waitingstartadminop
***  Proved C2:  status__4 = waitingstartadminop or status__4 = 
          waitingfinishadminop -> admin__isdoingop(theadmin__4) and (
          admin__ispresent(theadmin__4) and admin__prf_rolepresent(theadmin__4) 
          = admin__prf_rolepresent(theadmin))
     This was achieved by applying the inference rule adminop_user(4)
     [from rulefile adminop.rlu] to infer this conclusion from its 
          side-conditions,
     which were established as follows:
     <<<  By simple reasoning, proved: waitingstartadminop <> 
          waitingfinishadminop
     <<<  From H22, proved: status__4 = shutdown or status__4 = 
          waitingstartadminop
     <<<  From H23, proved: status__4 = waitingstartadminop -> 
          admin__prf_rolepresent(theadmin__4) = admin__prf_rolepresent(theadmin)
           and (admin__ispresent(theadmin__4) and admin__isdoingop(theadmin__4) 
          and latch__state__4 = latch__state and admin__thecurrentop(
          theadmin__4) = admin__shutdownop)
     <<<  By simple reasoning, proved: waitingstartadminop <> shutdown
     <<<  By simple reasoning, proved: waitingfinishadminop <> shutdown
***  Proved C11:  not latch__islocked(latch__state__4) and latch__islocked(
          latch__state) -> admin__isdoingop(theadmin) and admin__thecurrentop(
          theadmin) = admin__overridelock
     This was achieved by applying the inference rule adminop_user(6)
     [from rulefile adminop.rlu] to infer this conclusion from its 
          side-conditions,
     which were established as follows:
     <<<  From H22, proved: status__4 = shutdown or status__4 = 
          waitingstartadminop
     <<<  From H24, proved: status__4 = shutdown -> admin__prf_rolepresent(
          theadmin__4) = privtypes__useronly and (latch__islocked(
          latch__state__4) and not admin__isdoingop(theadmin__4))
     <<<  From H23, proved: status__4 = waitingstartadminop -> 
          admin__prf_rolepresent(theadmin__4) = admin__prf_rolepresent(theadmin)
           and (admin__ispresent(theadmin__4) and admin__isdoingop(theadmin__4) 
          and latch__state__4 = latch__state and admin__thecurrentop(
          theadmin__4) = admin__shutdownop)
     <<<  By simple reasoning, proved: shutdown <> waitingstartadminop
***  PROVED VC.

VCN  9: Summary of user rule application.
FIL  adminop.rlu
RUL     adminop_user(2)
CON        1
RUL     adminop_user(4)
CON        2
RUL     adminop_user(6)
CON        11


OVR  Overall summary of VCs using user rules.
FIL  adminop.rlu
RUL     adminop_user(1)
VCS        6, 7
RUL     adminop_user(5)
VCS        6, 7
RUL     adminop_user(3)
VCS        7
RUL     adminop_user(2)
VCS        9
RUL     adminop_user(4)
VCS        9
RUL     adminop_user(6)
VCS        9
FIL  enclave.rlu
RUL     enclave_user(3)
VCS        8

