*****************************************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
*****************************************************************************


CREATED 05-SEP-2011, 15:33:26  SIMPLIFIED 05-SEP-2011, 15:40:36

SPARK Simplifier GPL 2011
Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.

procedure Enclave.EnrolOp






RRS  The following user defined rule files have been read:
&&&  d:/sparkdev/tis2011/code/core/enclave/enclave.rlu
&&&  d:/sparkdev/tis2011/code/core/enclave/enrolop.rlu
SEM  No semantic checks are performed on the rules.


@@@@@@@@@@  VC: procedure_enrolop_1.  @@@@@@@@@@
%%%  Simplified H3 on reading formula in, to give:
     %%%  H3:  statust__first <= status
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  enrolmentstates__first <= status
%%%  Simplified C3 on reading formula in, to give:
     %%%  C3:  enrolmentstates__first <= status
-S-  Applied substitution rule enrolop_rules(39).
     This was achieved by replacing all occurrences of enrolmentstates__first 
          by:
          notenrolled.
<S>  New C1:  notenrolled <= status
<S>  New C3:  notenrolled <= status
-S-  Applied substitution rule enrolop_rules(40).
     This was achieved by replacing all occurrences of enrolmentstates__last by:
          waitingendenrol.
<S>  New C2:  status <= waitingendenrol
<S>  New C4:  status <= waitingendenrol
-S-  Applied substitution rule enrolop_rules(2).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H3:  notenrolled <= status
-S-  Applied substitution rule enrolop_rules(3).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H4:  status <= shutdown
***  Proved C1:  notenrolled <= status
     using hypothesis H3.
***  Proved C3:  notenrolled <= status
     using hypothesis H3.
---  Eliminated conclusion C4, which is a duplicate of C2.
     +++  New H5:  statust__size >= 0
     +++  New H6:  enrolmentstates__size >= 0
***  Proved C2:  status <= waitingendenrol
     This was achieved by applying the inference rule enclave_user(5)
     [from rulefile enclave.rlu] to infer this conclusion from its 
          side-conditions,
     which were established as follows:
     <<<  From H1, proved: enrolmentisinprogress(status)
***  PROVED VC.

VCN  1: Summary of user rule application.
FIL  enclave.rlu
RUL     enclave_user(5)
CON        2


@@@@@@@@@@  VC: procedure_enrolop_2.  @@@@@@@@@@
%%%  Simplified H3 on reading formula in, to give:
     %%%  H3:  statust__first <= status
%%%  Simplified H5 on reading formula in, to give:
     %%%  H5:  enrolmentstates__first <= status
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H6)
          .
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  enrolmentstates__first <= status
***  Proved C1:  enrolmentstates__first <= status
     using hypothesis H5.
***  Proved C2:  status <= enrolmentstates__last
     using hypothesis H6.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_enrolop_3.  @@@@@@@@@@
%%%  Simplified H3 on reading formula in, to give:
     %%%  H3:  statust__first <= status
%%%  Simplified H5 on reading formula in, to give:
     %%%  H5:  enrolmentstates__first <= status
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H6)
          .
***  Proved C1:  not keystore__privatekeypresent(keystore__state)
     using hypothesis H2.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_enrolop_4.  @@@@@@@@@@
%%%  Simplified H3 on reading formula in, to give:
     %%%  H3:  statust__first <= status
%%%  Simplified H5 on reading formula in, to give:
     %%%  H5:  enrolmentstates__first <= status
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H6)
          .
***  Proved C1:  status = waitingendenrol
     using hypothesis H11.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_enrolop_5.  @@@@@@@@@@
%%%  Simplified H3 on reading formula in, to give:
     %%%  H3:  statust__first <= status
%%%  Simplified H5 on reading formula in, to give:
     %%%  H5:  enrolmentstates__first <= status
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H12 has been replaced by "true".  (It is already present, as H5)
          .
---  Hypothesis H13 has been replaced by "true".  (It is already present, as H6)
          .
%%%  Simplified H14 on reading formula in, to give:
     %%%  H14:  enrolmentstates__first <= status__1
%%%  Simplified H16 on reading formula in, to give:
     %%%  H16:  statust__first <= status__1
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  enrolmentisinprogress(status__1) <-> enrolmentstates__first <= 
          status__1 and status__1 <= enrolmentstates__last
-S-  Applied substitution rule enrolop_rules(2).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H3:  notenrolled <= status
<S>  New H16:  notenrolled <= status__1
-S-  Applied substitution rule enrolop_rules(3).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H4:  status <= shutdown
<S>  New H17:  status__1 <= shutdown
-S-  Applied substitution rule enrolop_rules(39).
     This was achieved by replacing all occurrences of enrolmentstates__first 
          by:
          notenrolled.
<S>  New H5:  notenrolled <= status
<S>  New H14:  notenrolled <= status__1
<S>  New C1:  enrolmentisinprogress(status__1) <-> notenrolled <= status__1 and 
          status__1 <= enrolmentstates__last
-S-  Applied substitution rule enrolop_rules(40).
     This was achieved by replacing all occurrences of enrolmentstates__last by:
          waitingendenrol.
<S>  New H6:  status <= waitingendenrol
<S>  New H15:  status__1 <= waitingendenrol
<S>  New C1:  enrolmentisinprogress(status__1) <-> notenrolled <= status__1 and 
          status__1 <= waitingendenrol
---  Eliminated hypothesis H7 (true-hypothesis).
---  Eliminated hypothesis H8 (true-hypothesis).
---  Eliminated hypothesis H9 (true-hypothesis).
---  Eliminated hypothesis H10 (true-hypothesis).
---  Eliminated hypothesis H12 (true-hypothesis).
---  Eliminated hypothesis H13 (true-hypothesis).
---  Eliminated hypothesis H5 (duplicate of H3).
---  Eliminated hypothesis H16 (duplicate of H14).
-S-  Eliminated hypothesis H11.
     This was achieved by replacing all occurrences of status by:
          notenrolled.
<S>  New H1:  enrolmentisinprogress(notenrolled)
<S>  New H3:  true
<S>  New H4:  true
<S>  New H6:  true
---  Eliminated hypothesis H3 (true-hypothesis).
---  Eliminated hypothesis H4 (true-hypothesis).
---  Eliminated hypothesis H6 (true-hypothesis).
     +++  New H18:  statust__size >= 0
     +++  New H19:  enrolmentstates__size >= 0
***  Proved C1:  enrolmentisinprogress(status__1) <-> notenrolled <= status__1 
          and status__1 <= waitingendenrol
     This was achieved by applying the rewrite rule enclave_user(4)
     [from rulefile enclave.rlu] to rewrite this conclusion to:
<S>  C1:  status__1 >= notenrolled and status__1 <= waitingendenrol <-> 
          notenrolled <= status__1 and status__1 <= waitingendenrol
     This rule could be applied because its side-condition holds, as follows:
     <<<  By simple reasoning, proved: status__1 >= notenrolled and status__1 
          <= waitingendenrol <-> notenrolled <= status__1 and status__1 <= 
          waitingendenrol
***  PROVED VC.

VCN  5: Summary of user rule application.
FIL  enclave.rlu
RUL     enclave_user(4)
CON        1


@@@@@@@@@@  VC: procedure_enrolop_6.  @@@@@@@@@@
%%%  Simplified H3 on reading formula in, to give:
     %%%  H3:  statust__first <= status
%%%  Simplified H5 on reading formula in, to give:
     %%%  H5:  enrolmentstates__first <= status
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H12 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified H14 on reading formula in, to give:
     %%%  H14:  statust__first <= status__2
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  enrolmentisinprogress(status__2) <-> enrolmentstates__first <= 
          status__2 and status__2 <= enrolmentstates__last
-S-  Applied substitution rule enrolop_rules(2).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H3:  notenrolled <= status
<S>  New H14:  notenrolled <= status__2
-S-  Applied substitution rule enrolop_rules(3).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H4:  status <= shutdown
<S>  New H15:  status__2 <= shutdown
-S-  Applied substitution rule enrolop_rules(39).
     This was achieved by replacing all occurrences of enrolmentstates__first 
          by:
          notenrolled.
<S>  New H5:  notenrolled <= status
<S>  New C1:  enrolmentisinprogress(status__2) <-> notenrolled <= status__2 and 
          status__2 <= enrolmentstates__last
-S-  Applied substitution rule enrolop_rules(40).
     This was achieved by replacing all occurrences of enrolmentstates__last by:
          waitingendenrol.
<S>  New H6:  status <= waitingendenrol
<S>  New C1:  enrolmentisinprogress(status__2) <-> notenrolled <= status__2 and 
          status__2 <= waitingendenrol
---  Eliminated hypothesis H7 (true-hypothesis).
---  Eliminated hypothesis H8 (true-hypothesis).
---  Eliminated hypothesis H9 (true-hypothesis).
---  Eliminated hypothesis H10 (true-hypothesis).
---  Eliminated hypothesis H12 (true-hypothesis).
---  Eliminated hypothesis H5 (duplicate of H3).
-S-  Eliminated hypothesis H11.
     This was achieved by replacing all occurrences of status by:
          waitingenrol.
<S>  New H1:  enrolmentisinprogress(waitingenrol)
<S>  New H3:  true
<S>  New H4:  true
<S>  New H6:  true
---  Eliminated hypothesis H3 (true-hypothesis).
---  Eliminated hypothesis H4 (true-hypothesis).
---  Eliminated hypothesis H6 (true-hypothesis).
     +++  New H16:  statust__size >= 0
     +++  New H17:  enrolmentstates__size >= 0
***  Proved C1:  enrolmentisinprogress(status__2) <-> notenrolled <= status__2 
          and status__2 <= waitingendenrol
     This was achieved by applying the rewrite rule enclave_user(4)
     [from rulefile enclave.rlu] to rewrite this conclusion to:
<S>  C1:  status__2 >= notenrolled and status__2 <= waitingendenrol <-> 
          notenrolled <= status__2 and status__2 <= waitingendenrol
     This rule could be applied because its side-condition holds, as follows:
     <<<  By simple reasoning, proved: status__2 >= notenrolled and status__2 
          <= waitingendenrol <-> notenrolled <= status__2 and status__2 <= 
          waitingendenrol
***  PROVED VC.

VCN  6: Summary of user rule application.
FIL  enclave.rlu
RUL     enclave_user(4)
CON        1


@@@@@@@@@@  VC: procedure_enrolop_7.  @@@@@@@@@@
%%%  Simplified H3 on reading formula in, to give:
     %%%  H3:  statust__first <= status
%%%  Simplified H5 on reading formula in, to give:
     %%%  H5:  enrolmentstates__first <= status
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H12 has been replaced by "true".  (It is already present, as 
          H11).
%%%  Simplified H14 on reading formula in, to give:
     %%%  H14:  statust__first <= status__3
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  enrolmentisinprogress(status__3) <-> enrolmentstates__first <= 
          status__3 and status__3 <= enrolmentstates__last
-S-  Applied substitution rule enrolop_rules(2).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H3:  notenrolled <= status
<S>  New H14:  notenrolled <= status__3
-S-  Applied substitution rule enrolop_rules(3).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H4:  status <= shutdown
<S>  New H15:  status__3 <= shutdown
-S-  Applied substitution rule enrolop_rules(39).
     This was achieved by replacing all occurrences of enrolmentstates__first 
          by:
          notenrolled.
<S>  New H5:  notenrolled <= status
<S>  New C1:  enrolmentisinprogress(status__3) <-> notenrolled <= status__3 and 
          status__3 <= enrolmentstates__last
-S-  Applied substitution rule enrolop_rules(40).
     This was achieved by replacing all occurrences of enrolmentstates__last by:
          waitingendenrol.
<S>  New H6:  status <= waitingendenrol
<S>  New C1:  enrolmentisinprogress(status__3) <-> notenrolled <= status__3 and 
          status__3 <= waitingendenrol
---  Eliminated hypothesis H7 (true-hypothesis).
---  Eliminated hypothesis H8 (true-hypothesis).
---  Eliminated hypothesis H9 (true-hypothesis).
---  Eliminated hypothesis H10 (true-hypothesis).
---  Eliminated hypothesis H12 (true-hypothesis).
---  Eliminated hypothesis H5 (duplicate of H3).
-S-  Eliminated hypothesis H11.
     This was achieved by replacing all occurrences of status by:
          waitingendenrol.
<S>  New H1:  enrolmentisinprogress(waitingendenrol)
<S>  New H3:  true
<S>  New H4:  true
<S>  New H6:  true
---  Eliminated hypothesis H3 (true-hypothesis).
---  Eliminated hypothesis H4 (true-hypothesis).
---  Eliminated hypothesis H6 (true-hypothesis).
     +++  New H16:  statust__size >= 0
     +++  New H17:  enrolmentstates__size >= 0
***  Proved C1:  enrolmentisinprogress(status__3) <-> notenrolled <= status__3 
          and status__3 <= waitingendenrol
     This was achieved by applying the rewrite rule enclave_user(4)
     [from rulefile enclave.rlu] to rewrite this conclusion to:
<S>  C1:  status__3 >= notenrolled and status__3 <= waitingendenrol <-> 
          notenrolled <= status__3 and status__3 <= waitingendenrol
     This rule could be applied because its side-condition holds, as follows:
     <<<  By simple reasoning, proved: status__3 >= notenrolled and status__3 
          <= waitingendenrol <-> notenrolled <= status__3 and status__3 <= 
          waitingendenrol
***  PROVED VC.

VCN  7: Summary of user rule application.
FIL  enclave.rlu
RUL     enclave_user(4)
CON        1


@@@@@@@@@@  VC: procedure_enrolop_8.  @@@@@@@@@@
%%%  Simplified H3 on reading formula in, to give:
     %%%  H3:  statust__first <= status
%%%  Simplified H5 on reading formula in, to give:
     %%%  H5:  enrolmentstates__first <= status
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H12 has been replaced by "true".  (It is already present, as H5)
          .
---  Hypothesis H13 has been replaced by "true".  (It is already present, as H6)
          .
%%%  Simplified H14 on reading formula in, to give:
     %%%  H14:  enrolmentstates__first <= status__1
%%%  Simplified H16 on reading formula in, to give:
     %%%  H16:  statust__first <= status__1
%%%  Simplified H18 on reading formula in, to give:
     %%%  H18:  enrolmentisinprogress(status__1) <-> enrolmentstates__first <= 
          status__1 and status__1 <= enrolmentstates__last
-S-  Applied substitution rule enrolop_rules(2).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H3:  notenrolled <= status
<S>  New H16:  notenrolled <= status__1
-S-  Applied substitution rule enrolop_rules(3).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H4:  status <= shutdown
<S>  New H17:  status__1 <= shutdown
-S-  Applied substitution rule enrolop_rules(39).
     This was achieved by replacing all occurrences of enrolmentstates__first 
          by:
          notenrolled.
<S>  New H5:  notenrolled <= status
<S>  New H14:  notenrolled <= status__1
<S>  New H18:  enrolmentisinprogress(status__1) <-> notenrolled <= status__1 
          and status__1 <= enrolmentstates__last
-S-  Applied substitution rule enrolop_rules(40).
     This was achieved by replacing all occurrences of enrolmentstates__last by:
          waitingendenrol.
<S>  New H6:  status <= waitingendenrol
<S>  New H15:  status__1 <= waitingendenrol
<S>  New H18:  enrolmentisinprogress(status__1) <-> notenrolled <= status__1 
          and status__1 <= waitingendenrol
---  Eliminated hypothesis H7 (true-hypothesis).
---  Eliminated hypothesis H8 (true-hypothesis).
---  Eliminated hypothesis H9 (true-hypothesis).
---  Eliminated hypothesis H10 (true-hypothesis).
---  Eliminated hypothesis H12 (true-hypothesis).
---  Eliminated hypothesis H13 (true-hypothesis).
---  Eliminated hypothesis H5 (duplicate of H3).
---  Eliminated hypothesis H16 (duplicate of H14).
>>>  Using "A->B, A |- B" on H18, given H15 & H16, we simplify the former to:
     >>>  H18:  enrolmentisinprogress(status__1)
-S-  Eliminated hypothesis H11.
     This was achieved by replacing all occurrences of status by:
          notenrolled.
<S>  New H1:  enrolmentisinprogress(notenrolled)
<S>  New H3:  true
<S>  New H4:  true
<S>  New H6:  true
---  Eliminated hypothesis H3 (true-hypothesis).
---  Eliminated hypothesis H4 (true-hypothesis).
---  Eliminated hypothesis H6 (true-hypothesis).
%%%  Simplified C2 further (given H15), to give:
     %%%  C2:  enrolmentisinprogress(status__1)
***  Proved C1:  keystore__privatekeypresent(keystore__state) <-> not 
          enrolmentisinprogress(status__1)
     using hypotheses H2 & H18.
***  Proved C2:  enrolmentisinprogress(status__1)
     using hypothesis H18.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_enrolop_9.  @@@@@@@@@@
%%%  Simplified H3 on reading formula in, to give:
     %%%  H3:  statust__first <= status
%%%  Simplified H5 on reading formula in, to give:
     %%%  H5:  enrolmentstates__first <= status
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H12 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified H14 on reading formula in, to give:
     %%%  H14:  statust__first <= status__2
%%%  Simplified H16 on reading formula in, to give:
     %%%  H16:  enrolmentisinprogress(status__2) <-> enrolmentstates__first <= 
          status__2 and status__2 <= enrolmentstates__last
-S-  Applied substitution rule enrolop_rules(2).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H3:  notenrolled <= status
<S>  New H14:  notenrolled <= status__2
-S-  Applied substitution rule enrolop_rules(3).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H4:  status <= shutdown
<S>  New H15:  status__2 <= shutdown
-S-  Applied substitution rule enrolop_rules(39).
     This was achieved by replacing all occurrences of enrolmentstates__first 
          by:
          notenrolled.
<S>  New H5:  notenrolled <= status
<S>  New H16:  enrolmentisinprogress(status__2) <-> notenrolled <= status__2 
          and status__2 <= enrolmentstates__last
-S-  Applied substitution rule enrolop_rules(40).
     This was achieved by replacing all occurrences of enrolmentstates__last by:
          waitingendenrol.
<S>  New H6:  status <= waitingendenrol
<S>  New H16:  enrolmentisinprogress(status__2) <-> notenrolled <= status__2 
          and status__2 <= waitingendenrol
---  Eliminated hypothesis H7 (true-hypothesis).
---  Eliminated hypothesis H8 (true-hypothesis).
---  Eliminated hypothesis H9 (true-hypothesis).
---  Eliminated hypothesis H10 (true-hypothesis).
---  Eliminated hypothesis H12 (true-hypothesis).
---  Eliminated hypothesis H5 (duplicate of H3).
-S-  Eliminated hypothesis H11.
     This was achieved by replacing all occurrences of status by:
          waitingenrol.
<S>  New H1:  enrolmentisinprogress(waitingenrol)
<S>  New H3:  true
<S>  New H4:  true
<S>  New H6:  true
---  Eliminated hypothesis H3 (true-hypothesis).
---  Eliminated hypothesis H4 (true-hypothesis).
---  Eliminated hypothesis H6 (true-hypothesis).
     +++  New H17:  statust__size >= 0
     +++  New H18:  enrolmentstates__size >= 0
>>>  Attempting to prove C2 by showing that each of the following cases
     (1)  status__2 = enclavequiescent and keystore__privatekeypresent(
          keystore__state__2), or
     (2)  status__2 = waitingendenrol and not keystore__privatekeypresent(
          keystore__state__2),
     are provable.
+++  Case 1 - New H19:  status__2 = enclavequiescent and 
          keystore__privatekeypresent(keystore__state__2)
+++  New subgoal C1:  enrolmentisinprogress(status__2) or status__2 = 
          enclavequiescent
>>>  Hypothesis H19 has now been split into two, giving:
     >>>  H20:  status__2 = enclavequiescent
     >>>  H21:  keystore__privatekeypresent(keystore__state__2)
-S-  Eliminated hypothesis H20.
     This was achieved by replacing all occurrences of status__2 by:
          enclavequiescent.
<S>  New H13:  keystore__privatekeypresent(keystore__state__2)
<S>  New H14:  true
<S>  New H15:  true
<S>  New H16:  not enrolmentisinprogress(enclavequiescent)
<S>  New C1:  true
***  Proved subgoal C1
+++  Case 2 - New H19:  status__2 = waitingendenrol and not 
          keystore__privatekeypresent(keystore__state__2)
+++  New subgoal C1:  enrolmentisinprogress(status__2) or status__2 = 
          enclavequiescent
>>>  Hypothesis H19 has now been split into two, giving:
     >>>  H20:  status__2 = waitingendenrol
     >>>  H21:  not keystore__privatekeypresent(keystore__state__2)
-S-  Eliminated hypothesis H20.
     This was achieved by replacing all occurrences of status__2 by:
          waitingendenrol.
<S>  New H13:  not keystore__privatekeypresent(keystore__state__2)
<S>  New H14:  true
<S>  New H15:  true
<S>  New H16:  enrolmentisinprogress(waitingendenrol)
<S>  New C1:  enrolmentisinprogress(waitingendenrol)
***  Proved subgoal C1
     using hypothesis H16.
***  Proved C2:  enrolmentisinprogress(status__2) or status__2 = 
          enclavequiescent
     by cases on disjunction using hypothesis H13.
***  Proved C1:  keystore__privatekeypresent(keystore__state__2) <-> not 
          enrolmentisinprogress(status__2)
     This was achieved by applying the inference rule enrolop_user(1)
     [from rulefile enrolop.rlu] to infer this conclusion from its 
          side-conditions,
     which were established as follows:
     <<<  From H13, proved: status__2 = enclavequiescent and 
          keystore__privatekeypresent(keystore__state__2) or status__2 = 
          waitingendenrol and not keystore__privatekeypresent(
          keystore__state__2)
     <<<  From H16, proved: enrolmentisinprogress(status__2) <-> notenrolled <= 
          status__2 and status__2 <= waitingendenrol
     <<<  By simple reasoning, proved: waitingendenrol < enclavequiescent
     <<<  By simple reasoning, proved: notenrolled < waitingendenrol
***  PROVED VC.

VCN  9: Summary of user rule application.
FIL  enrolop.rlu
RUL     enrolop_user(1)
CON        1


@@@@@@@@@@  VC: procedure_enrolop_10.  @@@@@@@@@@
%%%  Simplified H3 on reading formula in, to give:
     %%%  H3:  statust__first <= status
%%%  Simplified H5 on reading formula in, to give:
     %%%  H5:  enrolmentstates__first <= status
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H12 has been replaced by "true".  (It is already present, as 
          H11).
%%%  Simplified H14 on reading formula in, to give:
     %%%  H14:  statust__first <= status__3
%%%  Simplified H16 on reading formula in, to give:
     %%%  H16:  enrolmentisinprogress(status__3) <-> enrolmentstates__first <= 
          status__3 and status__3 <= enrolmentstates__last
-S-  Applied substitution rule enrolop_rules(2).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H3:  notenrolled <= status
<S>  New H14:  notenrolled <= status__3
-S-  Applied substitution rule enrolop_rules(3).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H4:  status <= shutdown
<S>  New H15:  status__3 <= shutdown
-S-  Applied substitution rule enrolop_rules(39).
     This was achieved by replacing all occurrences of enrolmentstates__first 
          by:
          notenrolled.
<S>  New H5:  notenrolled <= status
<S>  New H16:  enrolmentisinprogress(status__3) <-> notenrolled <= status__3 
          and status__3 <= enrolmentstates__last
-S-  Applied substitution rule enrolop_rules(40).
     This was achieved by replacing all occurrences of enrolmentstates__last by:
          waitingendenrol.
<S>  New H6:  status <= waitingendenrol
<S>  New H16:  enrolmentisinprogress(status__3) <-> notenrolled <= status__3 
          and status__3 <= waitingendenrol
---  Eliminated hypothesis H7 (true-hypothesis).
---  Eliminated hypothesis H8 (true-hypothesis).
---  Eliminated hypothesis H9 (true-hypothesis).
---  Eliminated hypothesis H10 (true-hypothesis).
---  Eliminated hypothesis H12 (true-hypothesis).
---  Eliminated hypothesis H5 (duplicate of H3).
-S-  Eliminated hypothesis H11.
     This was achieved by replacing all occurrences of status by:
          waitingendenrol.
<S>  New H1:  enrolmentisinprogress(waitingendenrol)
<S>  New H3:  true
<S>  New H4:  true
<S>  New H6:  true
---  Eliminated hypothesis H3 (true-hypothesis).
---  Eliminated hypothesis H4 (true-hypothesis).
---  Eliminated hypothesis H6 (true-hypothesis).
     +++  New H17:  statust__size >= 0
     +++  New H18:  enrolmentstates__size >= 0
>>>  Attempting to prove C2 by showing that each of the following cases
     (1)  status__3 = waitingendenrol, or
     (2)  status__3 = notenrolled,
     are provable.
+++  Case 1 - New H19:  status__3 = waitingendenrol
+++  New subgoal C1:  enrolmentisinprogress(status__3) or status__3 = 
          enclavequiescent
-S-  Eliminated hypothesis H19.
     This was achieved by replacing all occurrences of status__3 by:
          waitingendenrol.
<S>  New H13:  true
<S>  New H14:  true
<S>  New H15:  true
<S>  New H16:  enrolmentisinprogress(waitingendenrol)
<S>  New C1:  enrolmentisinprogress(waitingendenrol)
***  Proved subgoal C1
     using hypothesis H1.
+++  Case 2 - New H19:  status__3 = notenrolled
+++  New subgoal C1:  enrolmentisinprogress(status__3) or status__3 = 
          enclavequiescent
-S-  Eliminated hypothesis H19.
     This was achieved by replacing all occurrences of status__3 by:
          notenrolled.
<S>  New H13:  true
<S>  New H14:  true
<S>  New H15:  true
<S>  New H16:  enrolmentisinprogress(notenrolled)
<S>  New C1:  enrolmentisinprogress(notenrolled)
***  Proved subgoal C1
     using hypothesis H16.
***  Proved C2:  enrolmentisinprogress(status__3) or status__3 = 
          enclavequiescent
     by cases on disjunction using hypothesis H13.
***  Proved C1:  keystore__privatekeypresent(keystore__state) <-> not 
          enrolmentisinprogress(status__3)
     This was achieved by applying the inference rule enrolop_user(3)
     [from rulefile enrolop.rlu] to infer this conclusion from its 
          side-conditions,
     which were established as follows:
     <<<  From H2, proved: not keystore__privatekeypresent(keystore__state)
     <<<  From H13, proved: status__3 = waitingendenrol or status__3 = 
          notenrolled
     <<<  From H16, proved: enrolmentisinprogress(status__3) <-> notenrolled <= 
          status__3 and status__3 <= waitingendenrol
     <<<  By simple reasoning, proved: notenrolled < waitingendenrol
***  PROVED VC.

VCN  10: Summary of user rule application.
FIL  enrolop.rlu
RUL     enrolop_user(3)
CON        1


@@@@@@@@@@  VC: procedure_enrolop_11.  @@@@@@@@@@
%%%  Simplified H4 on reading formula in, to give:
     %%%  H4:  statust__first <= status
***  Proved C2:  not keystore__privatekeypresent(keystore__state)
     using hypothesis H2.
-S-  Applied substitution rule enrolop_rules(2).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H4:  notenrolled <= status
-S-  Applied substitution rule enrolop_rules(3).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H5:  status <= shutdown
-S-  Eliminated hypothesis H3.
     This was achieved by replacing all occurrences of status by:
          fld_status(state).
<S>  New H4:  notenrolled <= fld_status(state)
<S>  New H5:  fld_status(state) <= shutdown
<S>  New C1:  enrolmentisinprogress(fld_status(state))
     +++  New H6:  statust__size >= 0
     +++  New H7:  enrolmentstates__size >= 0
***  Proved C1:  enrolmentisinprogress(fld_status(state))
     This was achieved by applying the rewrite rule enclave_user(13)
     [from rulefile enclave.rlu] to rewrite this conclusion to:
<S>  C1:  enclave__enrolmentisinprogress(state)
     This rule could be applied because its side-conditions hold, as follows:
     <<<  From H1, proved: enclave__enrolmentisinprogress(state)
     <<<  Immediate condition checktype(state, statetype) evaluated successfully
***  PROVED VC.

VCN  11: Summary of user rule application.
FIL  enclave.rlu
RUL     enclave_user(13)
CON        1


@@@@@@@@@@  VC: procedure_enrolop_12.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  enclave__enrolmentisinprogress(state~)
%%%  Simplified H2 on reading formula in, to give:
     %%%  H2:  not keystore__privatekeypresent(keystore__state~)
%%%  Simplified H3 on reading formula in, to give:
     %%%  H3:  enrolmentisinprogress(status~)
---  Hypothesis H4 has been replaced by "true".  (It is already present, as H2).
%%%  Simplified H5 on reading formula in, to give:
     %%%  H5:  status~ = fld_status(state~)
%%%  Simplified H7 on reading formula in, to give:
     %%%  H7:  statust__first <= status~
%%%  Simplified H8 on reading formula in, to give:
     %%%  H8:  status~ <= statust__last
%%%  Simplified H9 on reading formula in, to give:
     %%%  H9:  statust__first <= status
-S-  Applied substitution rule enrolop_rules(2).
     This was achieved by replacing all occurrences of statust__first by:
          notenrolled.
<S>  New H7:  notenrolled <= status~
<S>  New H9:  notenrolled <= status
-S-  Applied substitution rule enrolop_rules(3).
     This was achieved by replacing all occurrences of statust__last by:
          shutdown.
<S>  New H8:  status~ <= shutdown
<S>  New H10:  status <= shutdown
---  Eliminated hypothesis H4 (true-hypothesis).
-S-  Eliminated hypothesis H6.
     This was achieved by replacing all occurrences of status by:
          fld_status(state).
<S>  New H11:  keystore__privatekeypresent(keystore__state) <-> not 
          enrolmentisinprogress(fld_status(state))
<S>  New H12:  enrolmentisinprogress(fld_status(state)) or fld_status(state) = 
          enclavequiescent
<S>  New H9:  notenrolled <= fld_status(state)
<S>  New H10:  fld_status(state) <= shutdown
     +++  New H13:  statust__size >= 0
     +++  New H14:  enrolmentstates__size >= 0
***  Proved C1:  keystore__privatekeypresent(keystore__state) <-> not 
          enclave__enrolmentisinprogress(state)
     This was achieved by applying the rewrite rule enclave_user(13)
     [from rulefile enclave.rlu] to rewrite this conclusion to:
<S>  C1:  keystore__privatekeypresent(keystore__state) <-> not 
          enrolmentisinprogress(fld_status(state))
     This rule could be applied because its side-conditions hold, as follows:
     <<<  From H11, proved: keystore__privatekeypresent(keystore__state) <-> 
          not enrolmentisinprogress(fld_status(state))
     <<<  Immediate condition checktype(state, statetype) evaluated successfully
+++  New H15:  enclave__enrolmentisinprogress(state) or fld_status(state) = 
          enclavequiescent
     This was achieved by applying the rewrite rule enclave_user(13)
     [from rulefile enclave.rlu] to rewrite existing hypothesis H12 to give the 
          above formula.
     This rule could be applied because its side-condition holds, as follows:
     <<<  Immediate condition checktype(state, statetype) evaluated successfully
***  Proved C2:  enclave__enrolmentisinprogress(state) or 
          prf_statusisenclavequiescent(state)
     This was achieved by applying the rewrite rule enclave_user(11)
     [from rulefile enclave.rlu] to rewrite this conclusion to:
<S>  C2:  enclave__enrolmentisinprogress(state) or fld_status(state) = 
          enclavequiescent
     This rule could be applied because its side-conditions hold, as follows:
     <<<  From H15, proved: enclave__enrolmentisinprogress(state) or fld_status(
          state) = enclavequiescent
     <<<  Immediate condition checktype(state, statetype) evaluated successfully
***  PROVED VC.

VCN  12: Summary of user rule application.
FIL  enclave.rlu
RUL     enclave_user(13)
CON        1
HYP        15
RUL     enclave_user(11)
CON        2


OVR  Overall summary of VCs using user rules.
FIL  enclave.rlu
RUL     enclave_user(5)
VCS        1
RUL     enclave_user(4)
VCS        5, 6, 7
RUL     enclave_user(13)
VCS        11, 12
RUL     enclave_user(11)
VCS        12
FIL  enrolop.rlu
RUL     enrolop_user(1)
VCS        9
RUL     enrolop_user(3)
VCS        10

