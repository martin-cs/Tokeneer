           /*********************************************************/
                           /*Proof Rule Declarations*/
                              /*Examiner GPL 2011*/
             /*Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.*/
           /*********************************************************/


                        /*DATE : 05-SEP-2011 15:33:25.72*/

                     /*function Enclave.AdminHasDeparted*/


rule_family adminhasdepa_rules:
     X      requires [X:any] &
     X <= Y requires [X:ire, Y:ire] &
     X >= Y requires [X:ire, Y:ire].

adminhasdepa_rules(1): statust__size >= 0 may_be_deduced.
adminhasdepa_rules(2): statust__first may_be_replaced_by notenrolled.
adminhasdepa_rules(3): statust__last may_be_replaced_by shutdown.
adminhasdepa_rules(4): statust__base__first may_be_replaced_by notenrolled.
adminhasdepa_rules(5): statust__base__last may_be_replaced_by shutdown.
adminhasdepa_rules(6): statust__pos(statust__first) may_be_replaced_by 0.
adminhasdepa_rules(7): statust__pos(notenrolled) may_be_replaced_by 0.
adminhasdepa_rules(8): statust__val(0) may_be_replaced_by 
     notenrolled.
adminhasdepa_rules(9): statust__pos(waitingenrol) may_be_replaced_by 1.
adminhasdepa_rules(10): statust__val(1) may_be_replaced_by 
     waitingenrol.
adminhasdepa_rules(11): statust__pos(waitingendenrol) may_be_replaced_by 2.
adminhasdepa_rules(12): statust__val(2) may_be_replaced_by 
     waitingendenrol.
adminhasdepa_rules(13): statust__pos(enclavequiescent) may_be_replaced_by 3.
adminhasdepa_rules(14): statust__val(3) may_be_replaced_by 
     enclavequiescent.
adminhasdepa_rules(15): statust__pos(waitingremoveadmintokenfail) may_be_replaced_by 4.
adminhasdepa_rules(16): statust__val(4) may_be_replaced_by 
     waitingremoveadmintokenfail.
adminhasdepa_rules(17): statust__pos(gotadmintoken) may_be_replaced_by 5.
adminhasdepa_rules(18): statust__val(5) may_be_replaced_by 
     gotadmintoken.
adminhasdepa_rules(19): statust__pos(waitingstartadminop) may_be_replaced_by 6.
adminhasdepa_rules(20): statust__val(6) may_be_replaced_by 
     waitingstartadminop.
adminhasdepa_rules(21): statust__pos(waitingfinishadminop) may_be_replaced_by 7.
adminhasdepa_rules(22): statust__val(7) may_be_replaced_by 
     waitingfinishadminop.
adminhasdepa_rules(23): statust__pos(shutdown) may_be_replaced_by 8.
adminhasdepa_rules(24): statust__val(8) may_be_replaced_by 
     shutdown.
adminhasdepa_rules(25): statust__pos(statust__last) may_be_replaced_by 8.
adminhasdepa_rules(26): statust__pos(succ(X)) may_be_replaced_by 
     statust__pos(X) + 1
     if [X <=shutdown, X <> shutdown].
adminhasdepa_rules(27): statust__pos(pred(X)) may_be_replaced_by 
     statust__pos(X) - 1
     if [X >=notenrolled, X <> notenrolled].
adminhasdepa_rules(28): statust__pos(X) >= 0 may_be_deduced_from
     [notenrolled <= X, X <= shutdown].
adminhasdepa_rules(29): statust__pos(X) <= 8 may_be_deduced_from
     [notenrolled <= X, X <= shutdown].
adminhasdepa_rules(30): statust__val(X) >= notenrolled may_be_deduced_from
     [0 <= X, X <= 8].
adminhasdepa_rules(31): statust__val(X) <= shutdown may_be_deduced_from
     [0 <= X, X <= 8].
adminhasdepa_rules(32): succ(statust__val(X)) may_be_replaced_by 
     statust__val(X+1)
     if [0 <= X, X < 8].
adminhasdepa_rules(33): pred(statust__val(X)) may_be_replaced_by 
     statust__val(X-1)
     if [0 < X, X <= 8].
adminhasdepa_rules(34): statust__pos(statust__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 8].
adminhasdepa_rules(35): statust__val(statust__pos(X)) may_be_replaced_by X
     if [notenrolled <= X, X <= shutdown].
adminhasdepa_rules(36): statust__pos(X) <= statust__pos(Y) & X <= Y are_interchangeable 
     if [notenrolled <= X, X <= shutdown, notenrolled <= Y, Y <= 
     shutdown].
adminhasdepa_rules(37): statust__val(X) <= statust__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 8, 0 <= Y, Y <= 8].
adminhasdepa_rules(38): nonquiescentstates__size >= 0 may_be_deduced.
adminhasdepa_rules(39): nonquiescentstates__first may_be_replaced_by waitingremoveadmintokenfail.
adminhasdepa_rules(40): nonquiescentstates__last may_be_replaced_by shutdown.
adminhasdepa_rules(41): nonquiescentstates__base__first may_be_replaced_by notenrolled.
adminhasdepa_rules(42): nonquiescentstates__base__last may_be_replaced_by shutdown.
