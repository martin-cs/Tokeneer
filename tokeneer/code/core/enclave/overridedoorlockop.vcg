           *******************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 05-SEP-2011 15:33:26.43

                    procedure Enclave.OverrideDoorLockOp




For path(s) from start to run-time check associated with statement of line 1155:

procedure_overridedoorlockop_1.
H1:    admin__isdoingop(theadmin) .
H2:    admin__thecurrentop(theadmin) = admin__overridelock .
H3:    admin__prf_rolepresent(theadmin) = privtypes__guard .
H4:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H5:    (admin__isdoingop(theadmin) and (admin__thecurrentop(
           theadmin) = admin__overridelock)) -> (
           admin__prf_rolepresent(theadmin) = 
           privtypes__guard) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(
           admintoken__extractuser(admintoken__state), [
           i___1]) >= character__first) and (element(
           admintoken__extractuser(admintoken__state), [
           i___1]) <= character__last))) .
        ->
C1:    audittypes__information >= audittypes__severityt__first .
C2:    audittypes__information <= audittypes__severityt__last .
C3:    audittypes__overridelock >= audittypes__elementt__first .
C4:    audittypes__overridelock <= audittypes__elementt__last .
 

For path(s) from start to run-time check associated with statement of line 1162:

procedure_overridedoorlockop_2.
H1:    admin__isdoingop(theadmin) .
H2:    admin__thecurrentop(theadmin) = admin__overridelock .
H3:    admin__prf_rolepresent(theadmin) = privtypes__guard .
H4:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H5:    (admin__isdoingop(theadmin) and (admin__thecurrentop(
           theadmin) = admin__overridelock)) -> (
           admin__prf_rolepresent(theadmin) = 
           privtypes__guard) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(
           admintoken__extractuser(admintoken__state), [
           i___1]) >= character__first) and (element(
           admintoken__extractuser(admintoken__state), [
           i___1]) <= character__last))) .
H8:    audittypes__information >= audittypes__severityt__first .
H9:    audittypes__information <= audittypes__severityt__last .
H10:   audittypes__overridelock >= audittypes__elementt__first .
H11:   audittypes__overridelock <= audittypes__elementt__last .
        ->
C1:    screen__requestadminop >= screen__msgtextt__first .
C2:    screen__requestadminop <= screen__msgtextt__last .
 

For path(s) from start to run-time check associated with statement of line 1163:

procedure_overridedoorlockop_3.
H1:    admin__isdoingop(theadmin) .
H2:    admin__thecurrentop(theadmin) = admin__overridelock .
H3:    admin__prf_rolepresent(theadmin) = privtypes__guard .
H4:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H5:    (admin__isdoingop(theadmin) and (admin__thecurrentop(
           theadmin) = admin__overridelock)) -> (
           admin__prf_rolepresent(theadmin) = 
           privtypes__guard) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(
           admintoken__extractuser(admintoken__state), [
           i___1]) >= character__first) and (element(
           admintoken__extractuser(admintoken__state), [
           i___1]) <= character__last))) .
H8:    audittypes__information >= audittypes__severityt__first .
H9:    audittypes__information <= audittypes__severityt__last .
H10:   audittypes__overridelock >= audittypes__elementt__first .
H11:   audittypes__overridelock <= audittypes__elementt__last .
H12:   screen__requestadminop >= screen__msgtextt__first .
H13:   screen__requestadminop <= screen__msgtextt__last .
        ->
C1:    display__doorunlocked >= display__msgt__first .
C2:    display__doorunlocked <= display__msgt__last .
 

For path(s) from start to run-time check associated with statement of line 1164:

procedure_overridedoorlockop_4.
H1:    admin__isdoingop(theadmin) .
H2:    admin__thecurrentop(theadmin) = admin__overridelock .
H3:    admin__prf_rolepresent(theadmin) = privtypes__guard .
H4:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H5:    (admin__isdoingop(theadmin) and (admin__thecurrentop(
           theadmin) = admin__overridelock)) -> (
           admin__prf_rolepresent(theadmin) = 
           privtypes__guard) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(
           admintoken__extractuser(admintoken__state), [
           i___1]) >= character__first) and (element(
           admintoken__extractuser(admintoken__state), [
           i___1]) <= character__last))) .
H8:    audittypes__information >= audittypes__severityt__first .
H9:    audittypes__information <= audittypes__severityt__last .
H10:   audittypes__overridelock >= audittypes__elementt__first .
H11:   audittypes__overridelock <= audittypes__elementt__last .
H12:   screen__requestadminop >= screen__msgtextt__first .
H13:   screen__requestadminop <= screen__msgtextt__last .
H14:   display__doorunlocked >= display__msgt__first .
H15:   display__doorunlocked <= display__msgt__last .
        ->
C1:    enclavequiescent >= statust__first .
C2:    enclavequiescent <= statust__last .
 

For path(s) from start to precondition check associated with statement of line 1167:

procedure_overridedoorlockop_5.
H1:    admin__isdoingop(theadmin) .
H2:    admin__thecurrentop(theadmin) = admin__overridelock .
H3:    admin__prf_rolepresent(theadmin) = privtypes__guard .
H4:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H5:    (admin__isdoingop(theadmin) and (admin__thecurrentop(
           theadmin) = admin__overridelock)) -> (
           admin__prf_rolepresent(theadmin) = 
           privtypes__guard) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(
           admintoken__extractuser(admintoken__state), [
           i___1]) >= character__first) and (element(
           admintoken__extractuser(admintoken__state), [
           i___1]) <= character__last))) .
H8:    audittypes__information >= audittypes__severityt__first .
H9:    audittypes__information <= audittypes__severityt__last .
H10:   audittypes__overridelock >= audittypes__elementt__first .
H11:   audittypes__overridelock <= audittypes__elementt__last .
H12:   screen__requestadminop >= screen__msgtextt__first .
H13:   screen__requestadminop <= screen__msgtextt__last .
H14:   display__doorunlocked >= display__msgt__first .
H15:   display__doorunlocked <= display__msgt__last .
H16:   enclavequiescent >= statust__first .
H17:   enclavequiescent <= statust__last .
H18:   (latch__islocked(latch__state__4) and ((
           door__thecurrentdoor(door__state__4) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(door__state__4)))) <-> (
           door__thedooralarm(door__state__4) = 
           alarmtypes__alarming) .
H19:   latch__islocked(latch__state__4) <-> 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), latch__prf_latchtimeout(latch__state__4)) .
        ->
C1:    admin__ispresent(theadmin) .
 

For path(s) from start to finish:

procedure_overridedoorlockop_6.
H1:    admin__isdoingop(theadmin) .
H2:    admin__thecurrentop(theadmin) = admin__overridelock .
H3:    admin__prf_rolepresent(theadmin) = privtypes__guard .
H4:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
H5:    (admin__isdoingop(theadmin) and (admin__thecurrentop(
           theadmin) = admin__overridelock)) -> (
           admin__prf_rolepresent(theadmin) = 
           privtypes__guard) .
H6:    (admin__prf_rolepresent(theadmin) = privtypes__guard) -> ((
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) or (not (admin__isdoingop(
           theadmin)))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(
           admintoken__extractuser(admintoken__state), [
           i___1]) >= character__first) and (element(
           admintoken__extractuser(admintoken__state), [
           i___1]) <= character__last))) .
H8:    audittypes__information >= audittypes__severityt__first .
H9:    audittypes__information <= audittypes__severityt__last .
H10:   audittypes__overridelock >= audittypes__elementt__first .
H11:   audittypes__overridelock <= audittypes__elementt__last .
H12:   screen__requestadminop >= screen__msgtextt__first .
H13:   screen__requestadminop <= screen__msgtextt__last .
H14:   display__doorunlocked >= display__msgt__first .
H15:   display__doorunlocked <= display__msgt__last .
H16:   enclavequiescent >= statust__first .
H17:   enclavequiescent <= statust__last .
H18:   (latch__islocked(latch__state__4) and ((
           door__thecurrentdoor(door__state__4) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(door__state__4)))) <-> (
           door__thedooralarm(door__state__4) = 
           alarmtypes__alarming) .
H19:   latch__islocked(latch__state__4) <-> 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), latch__prf_latchtimeout(latch__state__4)) .
H20:   admin__ispresent(theadmin) .
H21:   not (admin__isdoingop(theadmin__5)) .
H22:   admin__prf_rolepresent(theadmin__5) = 
           admin__prf_rolepresent(theadmin) .
H23:   admin__ispresent(theadmin__5) .
        ->
C1:    enclavequiescent = enclavequiescent .
C2:    (latch__islocked(latch__state__4) and ((
           door__thecurrentdoor(door__state__4) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(door__state__4)))) <-> (
           door__thedooralarm(door__state__4) = 
           alarmtypes__alarming) .
C3:    admin__prf_rolepresent(theadmin__5) = 
           admin__prf_rolepresent(theadmin) .
C4:    not (admin__isdoingop(theadmin__5)) .
C5:    (admin__prf_rolepresent(theadmin__5) = 
           privtypes__guard) -> (admintoken__prf_isgood(
           admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
C6:    ((not (latch__islocked(latch__state__4))) and 
           latch__islocked(latch__state)) -> (
           admintoken__prf_isgood(admintoken__state) and (
           admintoken__prf_authcertvalid(admintoken__state) and (
           admintoken__theauthcertrole(admintoken__state) = 
           privtypes__guard))) .
C7:    (admin__isdoingop(theadmin__5) and (
           admin__thecurrentop(theadmin__5) = 
           admin__overridelock)) -> (admin__prf_rolepresent(theadmin__5) = 
           privtypes__guard) .
C8:    (admin__prf_rolepresent(theadmin__5) = 
           privtypes__guard) -> ((admin__isdoingop(theadmin__5) and (
           admin__thecurrentop(theadmin__5) = 
           admin__overridelock)) or (not (admin__isdoingop(theadmin__5)))) .
C9:    ((not (latch__islocked(latch__state__4))) and 
           latch__islocked(latch__state)) -> (
           admin__isdoingop(theadmin) and (
           admin__thecurrentop(theadmin) = 
           admin__overridelock)) .
 

