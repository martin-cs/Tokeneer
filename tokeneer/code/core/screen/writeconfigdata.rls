           /*********************************************************/
                           /*Proof Rule Declarations*/
                              /*Examiner GPL 2011*/
             /*Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.*/
           /*********************************************************/


                        /*DATE : 05-SEP-2011 15:33:21.88*/

                      /*procedure Screen.WriteConfigData*/


rule_family writeconfigd_rules:
     X      requires [X:any] &
     X <= Y requires [X:ire, Y:ire] &
     X >= Y requires [X:ire, Y:ire].

writeconfigd_rules(1): column1 may_be_replaced_by 25.
writeconfigd_rules(2): column2 may_be_replaced_by 63.
writeconfigd_rules(3): row1 may_be_replaced_by 9.
writeconfigd_rules(4): row2 may_be_replaced_by 10.
writeconfigd_rules(5): row3 may_be_replaced_by 12.
writeconfigd_rules(6): row4 may_be_replaced_by 13.
writeconfigd_rules(7): row5 may_be_replaced_by 15.
writeconfigd_rules(8): row6 may_be_replaced_by 16.
writeconfigd_rules(9): row7 may_be_replaced_by 18.
writeconfigd_rules(10): integer__size >= 0 may_be_deduced.
writeconfigd_rules(11): integer__first may_be_replaced_by -2147483648.
writeconfigd_rules(12): integer__last may_be_replaced_by 2147483647.
writeconfigd_rules(13): integer__base__first may_be_replaced_by -2147483648.
writeconfigd_rules(14): integer__base__last may_be_replaced_by 2147483647.
writeconfigd_rules(15): character__size >= 0 may_be_deduced.
writeconfigd_rules(16): character__first may_be_replaced_by 0.
writeconfigd_rules(17): character__last may_be_replaced_by 255.
writeconfigd_rules(18): character__base__first may_be_replaced_by 0.
writeconfigd_rules(19): character__base__last may_be_replaced_by 255.
writeconfigd_rules(20): positive__size >= 0 may_be_deduced.
writeconfigd_rules(21): positive__first may_be_replaced_by 1.
writeconfigd_rules(22): positive__last may_be_replaced_by 2147483647.
writeconfigd_rules(23): positive__base__first may_be_replaced_by -2147483648.
writeconfigd_rules(24): positive__base__last may_be_replaced_by 2147483647.
writeconfigd_rules(25): clock__durationt__size >= 0 may_be_deduced.
writeconfigd_rules(26): clock__durationt__first may_be_replaced_by 0.
writeconfigd_rules(27): clock__durationt__last may_be_replaced_by 864000.
writeconfigd_rules(28): clock__durationt__base__first <= 
     clock__durationt__base__last may_be_deduced.
writeconfigd_rules(29): clock__durationt__base__first <= 
     clock__durationt__first may_be_deduced.
writeconfigd_rules(30): clock__durationt__base__last >= 
     clock__durationt__last may_be_deduced.
writeconfigd_rules(31): audittypes__filesizet__size >= 0 may_be_deduced.
writeconfigd_rules(32): audittypes__filesizet__first may_be_replaced_by 0.
writeconfigd_rules(33): audittypes__filesizet__last may_be_replaced_by 4194304.
writeconfigd_rules(34): audittypes__filesizet__base__first may_be_replaced_by -2147483648.
writeconfigd_rules(35): audittypes__filesizet__base__last may_be_replaced_by 2147483647.
writeconfigd_rules(36): privtypes__classt__size >= 0 may_be_deduced.
writeconfigd_rules(37): privtypes__classt__first may_be_replaced_by privtypes__unmarked.
writeconfigd_rules(38): privtypes__classt__last may_be_replaced_by privtypes__topsecret.
writeconfigd_rules(39): privtypes__classt__base__first may_be_replaced_by privtypes__unmarked.
writeconfigd_rules(40): privtypes__classt__base__last may_be_replaced_by privtypes__topsecret.
writeconfigd_rules(41): privtypes__classt__pos(privtypes__classt__first) may_be_replaced_by 0.
writeconfigd_rules(42): privtypes__classt__pos(
     privtypes__unmarked) may_be_replaced_by 0.
writeconfigd_rules(43): privtypes__classt__val(0) may_be_replaced_by 
     privtypes__unmarked.
writeconfigd_rules(44): privtypes__classt__pos(
     privtypes__unclassified) may_be_replaced_by 1.
writeconfigd_rules(45): privtypes__classt__val(1) may_be_replaced_by 
     privtypes__unclassified.
writeconfigd_rules(46): privtypes__classt__pos(
     privtypes__restricted) may_be_replaced_by 2.
writeconfigd_rules(47): privtypes__classt__val(2) may_be_replaced_by 
     privtypes__restricted.
writeconfigd_rules(48): privtypes__classt__pos(
     privtypes__confidential) may_be_replaced_by 3.
writeconfigd_rules(49): privtypes__classt__val(3) may_be_replaced_by 
     privtypes__confidential.
writeconfigd_rules(50): privtypes__classt__pos(privtypes__secret) may_be_replaced_by 4.
writeconfigd_rules(51): privtypes__classt__val(4) may_be_replaced_by 
     privtypes__secret.
writeconfigd_rules(52): privtypes__classt__pos(
     privtypes__topsecret) may_be_replaced_by 5.
writeconfigd_rules(53): privtypes__classt__val(5) may_be_replaced_by 
     privtypes__topsecret.
writeconfigd_rules(54): privtypes__classt__pos(privtypes__classt__last) may_be_replaced_by 5.
writeconfigd_rules(55): privtypes__classt__pos(succ(X)) may_be_replaced_by 
     privtypes__classt__pos(X) + 1
     if [X <=privtypes__topsecret, X <> privtypes__topsecret].
writeconfigd_rules(56): privtypes__classt__pos(pred(X)) may_be_replaced_by 
     privtypes__classt__pos(X) - 1
     if [X >=privtypes__unmarked, X <> privtypes__unmarked].
writeconfigd_rules(57): privtypes__classt__pos(X) >= 0 may_be_deduced_from
     [privtypes__unmarked <= X, X <= privtypes__topsecret].
writeconfigd_rules(58): privtypes__classt__pos(X) <= 5 may_be_deduced_from
     [privtypes__unmarked <= X, X <= privtypes__topsecret].
writeconfigd_rules(59): privtypes__classt__val(X) >= 
     privtypes__unmarked may_be_deduced_from
     [0 <= X, X <= 5].
writeconfigd_rules(60): privtypes__classt__val(X) <= 
     privtypes__topsecret may_be_deduced_from
     [0 <= X, X <= 5].
writeconfigd_rules(61): succ(privtypes__classt__val(X)) may_be_replaced_by 
     privtypes__classt__val(X+1)
     if [0 <= X, X < 5].
writeconfigd_rules(62): pred(privtypes__classt__val(X)) may_be_replaced_by 
     privtypes__classt__val(X-1)
     if [0 < X, X <= 5].
writeconfigd_rules(63): privtypes__classt__pos(privtypes__classt__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 5].
writeconfigd_rules(64): privtypes__classt__val(privtypes__classt__pos(X)) may_be_replaced_by X
     if [privtypes__unmarked <= X, X <= privtypes__topsecret].
writeconfigd_rules(65): privtypes__classt__pos(X) <= 
     privtypes__classt__pos(Y) & X <= Y are_interchangeable 
     if [privtypes__unmarked <= X, X <= privtypes__topsecret, 
     privtypes__unmarked <= Y, Y <= privtypes__topsecret].
writeconfigd_rules(66): privtypes__classt__val(X) <= 
     privtypes__classt__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 5, 0 <= Y, Y <= 5].
writeconfigd_rules(67): iandatypes__fart__size >= 0 may_be_deduced.
writeconfigd_rules(68): iandatypes__fart__size may_be_replaced_by 32.
writeconfigd_rules(69): iandatypes__fart__first may_be_replaced_by 0.
writeconfigd_rules(70): iandatypes__fart__last may_be_replaced_by 2147483647.
writeconfigd_rules(71): iandatypes__fart__base__first <= 
     iandatypes__fart__base__last may_be_deduced.
writeconfigd_rules(72): iandatypes__fart__base__first <= 
     iandatypes__fart__first may_be_deduced.
writeconfigd_rules(73): iandatypes__fart__base__last >= 
     iandatypes__fart__last may_be_deduced.
writeconfigd_rules(74): configdata__durationt__size >= 0 may_be_deduced.
writeconfigd_rules(75): configdata__durationt__first may_be_replaced_by 0.
writeconfigd_rules(76): configdata__durationt__last may_be_replaced_by 2000.
writeconfigd_rules(77): configdata__durationt__base__first <= 
     configdata__durationt__base__last may_be_deduced.
writeconfigd_rules(78): configdata__durationt__base__first <= 
     configdata__durationt__first may_be_deduced.
writeconfigd_rules(79): configdata__durationt__base__last >= 
     configdata__durationt__last may_be_deduced.
writeconfigd_rules(80): configdata__accesspolicyt__size >= 0 may_be_deduced.
writeconfigd_rules(81): configdata__accesspolicyt__first may_be_replaced_by configdata__workinghours.
writeconfigd_rules(82): configdata__accesspolicyt__last may_be_replaced_by configdata__allhours.
writeconfigd_rules(83): configdata__accesspolicyt__base__first may_be_replaced_by configdata__workinghours.
writeconfigd_rules(84): configdata__accesspolicyt__base__last may_be_replaced_by configdata__allhours.
writeconfigd_rules(85): configdata__accesspolicyt__pos(
     configdata__accesspolicyt__first) may_be_replaced_by 0.
writeconfigd_rules(86): configdata__accesspolicyt__pos(
     configdata__workinghours) may_be_replaced_by 0.
writeconfigd_rules(87): configdata__accesspolicyt__val(0) may_be_replaced_by 
     configdata__workinghours.
writeconfigd_rules(88): configdata__accesspolicyt__pos(
     configdata__allhours) may_be_replaced_by 1.
writeconfigd_rules(89): configdata__accesspolicyt__val(1) may_be_replaced_by 
     configdata__allhours.
writeconfigd_rules(90): configdata__accesspolicyt__pos(
     configdata__accesspolicyt__last) may_be_replaced_by 1.
writeconfigd_rules(91): configdata__accesspolicyt__pos(succ(X)) may_be_replaced_by 
     configdata__accesspolicyt__pos(X) + 1
     if [X <=configdata__allhours, X <> configdata__allhours].
writeconfigd_rules(92): configdata__accesspolicyt__pos(pred(X)) may_be_replaced_by 
     configdata__accesspolicyt__pos(X) - 1
     if [X >=configdata__workinghours, X <> 
     configdata__workinghours].
writeconfigd_rules(93): configdata__accesspolicyt__pos(X) >= 0 may_be_deduced_from
     [configdata__workinghours <= X, X <= configdata__allhours].
writeconfigd_rules(94): configdata__accesspolicyt__pos(X) <= 1 may_be_deduced_from
     [configdata__workinghours <= X, X <= configdata__allhours].
writeconfigd_rules(95): configdata__accesspolicyt__val(X) >= 
     configdata__workinghours may_be_deduced_from
     [0 <= X, X <= 1].
writeconfigd_rules(96): configdata__accesspolicyt__val(X) <= 
     configdata__allhours may_be_deduced_from
     [0 <= X, X <= 1].
writeconfigd_rules(97): succ(configdata__accesspolicyt__val(X)) may_be_replaced_by 
     configdata__accesspolicyt__val(X+1)
     if [0 <= X, X < 1].
writeconfigd_rules(98): pred(configdata__accesspolicyt__val(X)) may_be_replaced_by 
     configdata__accesspolicyt__val(X-1)
     if [0 < X, X <= 1].
writeconfigd_rules(99): configdata__accesspolicyt__pos(
     configdata__accesspolicyt__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 1].
writeconfigd_rules(100): configdata__accesspolicyt__val(
     configdata__accesspolicyt__pos(X)) may_be_replaced_by X
     if [configdata__workinghours <= X, X <= configdata__allhours].
writeconfigd_rules(101): configdata__accesspolicyt__pos(X) <= 
     configdata__accesspolicyt__pos(Y) & X <= Y are_interchangeable 
     if [configdata__workinghours <= X, X <= configdata__allhours, 
     configdata__workinghours <= Y, Y <= configdata__allhours].
writeconfigd_rules(102): configdata__accesspolicyt__val(X) <= 
     configdata__accesspolicyt__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 1, 0 <= Y, Y <= 1].
writeconfigd_rules(103): screen__interface__colours__size >= 0 may_be_deduced.
writeconfigd_rules(104): screen__interface__colours__first may_be_replaced_by screen__interface__brightwhite.
writeconfigd_rules(105): screen__interface__colours__last may_be_replaced_by screen__interface__black.
writeconfigd_rules(106): screen__interface__colours__base__first may_be_replaced_by screen__interface__brightwhite.
writeconfigd_rules(107): screen__interface__colours__base__last may_be_replaced_by screen__interface__black.
writeconfigd_rules(108): screen__interface__colours__pos(
     screen__interface__colours__first) may_be_replaced_by 0.
writeconfigd_rules(109): screen__interface__colours__pos(
     screen__interface__brightwhite) may_be_replaced_by 0.
writeconfigd_rules(110): screen__interface__colours__val(0) may_be_replaced_by 
     screen__interface__brightwhite.
writeconfigd_rules(111): screen__interface__colours__pos(
     screen__interface__white) may_be_replaced_by 1.
writeconfigd_rules(112): screen__interface__colours__val(1) may_be_replaced_by 
     screen__interface__white.
writeconfigd_rules(113): screen__interface__colours__pos(
     screen__interface__red) may_be_replaced_by 2.
writeconfigd_rules(114): screen__interface__colours__val(2) may_be_replaced_by 
     screen__interface__red.
writeconfigd_rules(115): screen__interface__colours__pos(
     screen__interface__green) may_be_replaced_by 3.
writeconfigd_rules(116): screen__interface__colours__val(3) may_be_replaced_by 
     screen__interface__green.
writeconfigd_rules(117): screen__interface__colours__pos(
     screen__interface__black) may_be_replaced_by 4.
writeconfigd_rules(118): screen__interface__colours__val(4) may_be_replaced_by 
     screen__interface__black.
writeconfigd_rules(119): screen__interface__colours__pos(
     screen__interface__colours__last) may_be_replaced_by 4.
writeconfigd_rules(120): screen__interface__colours__pos(succ(X)) may_be_replaced_by 
     screen__interface__colours__pos(X) + 1
     if [X <=screen__interface__black, X <> 
     screen__interface__black].
writeconfigd_rules(121): screen__interface__colours__pos(pred(X)) may_be_replaced_by 
     screen__interface__colours__pos(X) - 1
     if [X >=screen__interface__brightwhite, X <> 
     screen__interface__brightwhite].
writeconfigd_rules(122): screen__interface__colours__pos(X) >= 0 may_be_deduced_from
     [screen__interface__brightwhite <= X, X <= 
     screen__interface__black].
writeconfigd_rules(123): screen__interface__colours__pos(X) <= 4 may_be_deduced_from
     [screen__interface__brightwhite <= X, X <= 
     screen__interface__black].
writeconfigd_rules(124): screen__interface__colours__val(X) >= 
     screen__interface__brightwhite may_be_deduced_from
     [0 <= X, X <= 4].
writeconfigd_rules(125): screen__interface__colours__val(X) <= 
     screen__interface__black may_be_deduced_from
     [0 <= X, X <= 4].
writeconfigd_rules(126): succ(screen__interface__colours__val(X)) may_be_replaced_by 
     screen__interface__colours__val(X+1)
     if [0 <= X, X < 4].
writeconfigd_rules(127): pred(screen__interface__colours__val(X)) may_be_replaced_by 
     screen__interface__colours__val(X-1)
     if [0 < X, X <= 4].
writeconfigd_rules(128): screen__interface__colours__pos(
     screen__interface__colours__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 4].
writeconfigd_rules(129): screen__interface__colours__val(
     screen__interface__colours__pos(X)) may_be_replaced_by X
     if [screen__interface__brightwhite <= X, X <= 
     screen__interface__black].
writeconfigd_rules(130): screen__interface__colours__pos(X) <= 
     screen__interface__colours__pos(Y) & X <= Y are_interchangeable 
     if [screen__interface__brightwhite <= X, X <= 
     screen__interface__black, screen__interface__brightwhite <= Y, Y <= 
     screen__interface__black].
writeconfigd_rules(131): screen__interface__colours__val(X) <= 
     screen__interface__colours__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 4, 0 <= Y, Y <= 4].
writeconfigd_rules(132): screen__interface__screenwidtht__size >= 0 may_be_deduced.
writeconfigd_rules(133): screen__interface__screenwidtht__first may_be_replaced_by 0.
writeconfigd_rules(134): screen__interface__screenwidtht__last may_be_replaced_by 80.
writeconfigd_rules(135): screen__interface__screenwidtht__base__first <= 
     screen__interface__screenwidtht__base__last may_be_deduced.
writeconfigd_rules(136): screen__interface__screenwidtht__base__first <= 
     screen__interface__screenwidtht__first may_be_deduced.
writeconfigd_rules(137): screen__interface__screenwidtht__base__last >= 
     screen__interface__screenwidtht__last may_be_deduced.
writeconfigd_rules(138): screen__interface__screenheightt__size >= 0 may_be_deduced.
writeconfigd_rules(139): screen__interface__screenheightt__first may_be_replaced_by 0.
writeconfigd_rules(140): screen__interface__screenheightt__last may_be_replaced_by 30.
writeconfigd_rules(141): screen__interface__screenheightt__base__first <= 
     screen__interface__screenheightt__base__last may_be_deduced.
writeconfigd_rules(142): screen__interface__screenheightt__base__first <= 
     screen__interface__screenheightt__first may_be_deduced.
writeconfigd_rules(143): screen__interface__screenheightt__base__last >= 
     screen__interface__screenheightt__last may_be_deduced.
writeconfigd_rules(144): screen__interface__screenxcoordt__size >= 0 may_be_deduced.
writeconfigd_rules(145): screen__interface__screenxcoordt__first may_be_replaced_by 0.
writeconfigd_rules(146): screen__interface__screenxcoordt__last may_be_replaced_by 79.
writeconfigd_rules(147): screen__interface__screenxcoordt__base__first <= 
     screen__interface__screenxcoordt__base__last may_be_deduced.
writeconfigd_rules(148): screen__interface__screenxcoordt__base__first <= 
     screen__interface__screenxcoordt__first may_be_deduced.
writeconfigd_rules(149): screen__interface__screenxcoordt__base__last >= 
     screen__interface__screenxcoordt__last may_be_deduced.
writeconfigd_rules(150): screen__interface__screenycoordt__size >= 0 may_be_deduced.
writeconfigd_rules(151): screen__interface__screenycoordt__first may_be_replaced_by 0.
writeconfigd_rules(152): screen__interface__screenycoordt__last may_be_replaced_by 29.
writeconfigd_rules(153): screen__interface__screenycoordt__base__first <= 
     screen__interface__screenycoordt__base__last may_be_deduced.
writeconfigd_rules(154): screen__interface__screenycoordt__base__first <= 
     screen__interface__screenycoordt__first may_be_deduced.
writeconfigd_rules(155): screen__interface__screenycoordt__base__last >= 
     screen__interface__screenycoordt__last may_be_deduced.
writeconfigd_rules(156): displayedconfigt__size >= 0 may_be_deduced.
writeconfigd_rules(157): A = B may_be_deduced_from
     [goal(checktype(A,displayedconfigt)),
      goal(checktype(B,displayedconfigt)),
      fld_latchunlock(A) = fld_latchunlock(B),
      fld_alarmsilent(A) = fld_alarmsilent(B),
      fld_fingerwait(A) = fld_fingerwait(B),
      fld_tokenremove(A) = fld_tokenremove(B),
      fld_workstart(A) = fld_workstart(B),
      fld_workend(A) = fld_workend(B),
      fld_authduration(A) = fld_authduration(B),
      fld_policy(A) = fld_policy(B),
      fld_minpreservedlog(A) = fld_minpreservedlog(B),
      fld_alarmthreshold(A) = fld_alarmthreshold(B),
      fld_minentry(A) = fld_minentry(B),
      fld_clearance(A) = fld_clearance(B),
      fld_maxfar(A) = fld_maxfar(B)].
writeconfigd_rules(158): screenconfigt__size >= 0 may_be_deduced.
writeconfigd_rules(159): A = B may_be_deduced_from
     [goal(checktype(A,screenconfigt)),
      goal(checktype(B,screenconfigt)),
      fld_isdisplayed(A) = fld_isdisplayed(B),
      fld_data(A) = fld_data(B)].
writeconfigd_rules(160): secondsstringi__size >= 0 may_be_deduced.
writeconfigd_rules(161): secondsstringi__first may_be_replaced_by 1.
writeconfigd_rules(162): secondsstringi__last may_be_replaced_by 7.
writeconfigd_rules(163): secondsstringi__base__first may_be_replaced_by -2147483648.
writeconfigd_rules(164): secondsstringi__base__last may_be_replaced_by 2147483647.
writeconfigd_rules(165): hrsminsstringi__size >= 0 may_be_deduced.
writeconfigd_rules(166): hrsminsstringi__first may_be_replaced_by 1.
writeconfigd_rules(167): hrsminsstringi__last may_be_replaced_by 5.
writeconfigd_rules(168): hrsminsstringi__base__first may_be_replaced_by -2147483648.
writeconfigd_rules(169): hrsminsstringi__base__last may_be_replaced_by 2147483647.
writeconfigd_rules(170): classstringi__size >= 0 may_be_deduced.
writeconfigd_rules(171): classstringi__first may_be_replaced_by 1.
writeconfigd_rules(172): classstringi__last may_be_replaced_by 12.
writeconfigd_rules(173): classstringi__base__first may_be_replaced_by -2147483648.
writeconfigd_rules(174): classstringi__base__last may_be_replaced_by 2147483647.
writeconfigd_rules(175): filesizestringi__size >= 0 may_be_deduced.
writeconfigd_rules(176): filesizestringi__first may_be_replaced_by 1.
writeconfigd_rules(177): filesizestringi__last may_be_replaced_by 15.
writeconfigd_rules(178): filesizestringi__base__first may_be_replaced_by -2147483648.
writeconfigd_rules(179): filesizestringi__base__last may_be_replaced_by 2147483647.
writeconfigd_rules(180): accesspolicystringi__size >= 0 may_be_deduced.
writeconfigd_rules(181): accesspolicystringi__first may_be_replaced_by 1.
writeconfigd_rules(182): accesspolicystringi__last may_be_replaced_by 12.
writeconfigd_rules(183): accesspolicystringi__base__first may_be_replaced_by -2147483648.
writeconfigd_rules(184): accesspolicystringi__base__last may_be_replaced_by 2147483647.
