           /*********************************************************/
                           /*Proof Rule Declarations*/
                              /*Examiner GPL 2011*/
             /*Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.*/
           /*********************************************************/


                        /*DATE : 05-SEP-2011 15:33:13.10*/

                         /*procedure Cert.IssuerKnown*/


rule_family issuerknown_rules:
     X      requires [X:any] &
     X <= Y requires [X:ire, Y:ire] &
     X >= Y requires [X:ire, Y:ire].

issuerknown_rules(1): integer__size >= 0 may_be_deduced.
issuerknown_rules(2): integer__first may_be_replaced_by -2147483648.
issuerknown_rules(3): integer__last may_be_replaced_by 2147483647.
issuerknown_rules(4): integer__base__first may_be_replaced_by -2147483648.
issuerknown_rules(5): integer__base__last may_be_replaced_by 2147483647.
issuerknown_rules(6): character__size >= 0 may_be_deduced.
issuerknown_rules(7): character__first may_be_replaced_by 0.
issuerknown_rules(8): character__last may_be_replaced_by 255.
issuerknown_rules(9): character__base__first may_be_replaced_by 0.
issuerknown_rules(10): character__base__last may_be_replaced_by 255.
issuerknown_rules(11): positive__size >= 0 may_be_deduced.
issuerknown_rules(12): positive__first may_be_replaced_by 1.
issuerknown_rules(13): positive__last may_be_replaced_by 2147483647.
issuerknown_rules(14): positive__base__first may_be_replaced_by -2147483648.
issuerknown_rules(15): positive__base__last may_be_replaced_by 2147483647.
issuerknown_rules(16): cryptotypes__namecountt__size >= 0 may_be_deduced.
issuerknown_rules(17): cryptotypes__namecountt__first may_be_replaced_by 0.
issuerknown_rules(18): cryptotypes__namecountt__last may_be_replaced_by 40.
issuerknown_rules(19): cryptotypes__namecountt__base__first may_be_replaced_by -2147483648.
issuerknown_rules(20): cryptotypes__namecountt__base__last may_be_replaced_by 2147483647.
issuerknown_rules(21): cryptotypes__namei__size >= 0 may_be_deduced.
issuerknown_rules(22): cryptotypes__namei__first may_be_replaced_by 1.
issuerknown_rules(23): cryptotypes__namei__last may_be_replaced_by 40.
issuerknown_rules(24): cryptotypes__namei__base__first may_be_replaced_by -2147483648.
issuerknown_rules(25): cryptotypes__namei__base__last may_be_replaced_by 2147483647.
issuerknown_rules(26): cryptotypes__issueridt__size >= 0 may_be_deduced.
issuerknown_rules(27): cryptotypes__issueridt__first may_be_replaced_by 0.
issuerknown_rules(28): cryptotypes__issueridt__last may_be_replaced_by 4294967295.
issuerknown_rules(29): cryptotypes__issueridt__base__first <= 
     cryptotypes__issueridt__base__last may_be_deduced.
issuerknown_rules(30): cryptotypes__issueridt__base__first <= 
     cryptotypes__issueridt__first may_be_deduced.
issuerknown_rules(31): cryptotypes__issueridt__base__last >= 
     cryptotypes__issueridt__last may_be_deduced.
issuerknown_rules(32): cryptotypes__issuert__size >= 0 may_be_deduced.
issuerknown_rules(33): A = B may_be_deduced_from
     [goal(checktype(A,cryptotypes__issuert)),
      goal(checktype(B,cryptotypes__issuert)),
      fld_id(A) = fld_id(B),
      fld_namelength(A) = fld_namelength(B),
      fld_name(A) = fld_name(B)].
issuerknown_rules(34): cryptotypes__algorithmt__size >= 0 may_be_deduced.
issuerknown_rules(35): cryptotypes__algorithmt__first may_be_replaced_by cryptotypes__rsa.
issuerknown_rules(36): cryptotypes__algorithmt__last may_be_replaced_by cryptotypes__ripemd160_rsa.
issuerknown_rules(37): cryptotypes__algorithmt__base__first may_be_replaced_by cryptotypes__rsa.
issuerknown_rules(38): cryptotypes__algorithmt__base__last may_be_replaced_by cryptotypes__ripemd160_rsa.
issuerknown_rules(39): cryptotypes__algorithmt__pos(
     cryptotypes__algorithmt__first) may_be_replaced_by 0.
issuerknown_rules(40): cryptotypes__algorithmt__pos(
     cryptotypes__rsa) may_be_replaced_by 0.
issuerknown_rules(41): cryptotypes__algorithmt__val(0) may_be_replaced_by 
     cryptotypes__rsa.
issuerknown_rules(42): cryptotypes__algorithmt__pos(
     cryptotypes__md2) may_be_replaced_by 1.
issuerknown_rules(43): cryptotypes__algorithmt__val(1) may_be_replaced_by 
     cryptotypes__md2.
issuerknown_rules(44): cryptotypes__algorithmt__pos(
     cryptotypes__md5) may_be_replaced_by 2.
issuerknown_rules(45): cryptotypes__algorithmt__val(2) may_be_replaced_by 
     cryptotypes__md5.
issuerknown_rules(46): cryptotypes__algorithmt__pos(
     cryptotypes__sha_1) may_be_replaced_by 3.
issuerknown_rules(47): cryptotypes__algorithmt__val(3) may_be_replaced_by 
     cryptotypes__sha_1.
issuerknown_rules(48): cryptotypes__algorithmt__pos(
     cryptotypes__ripemd128) may_be_replaced_by 4.
issuerknown_rules(49): cryptotypes__algorithmt__val(4) may_be_replaced_by 
     cryptotypes__ripemd128.
issuerknown_rules(50): cryptotypes__algorithmt__pos(
     cryptotypes__ripemd160) may_be_replaced_by 5.
issuerknown_rules(51): cryptotypes__algorithmt__val(5) may_be_replaced_by 
     cryptotypes__ripemd160.
issuerknown_rules(52): cryptotypes__algorithmt__pos(
     cryptotypes__md2_rsa) may_be_replaced_by 6.
issuerknown_rules(53): cryptotypes__algorithmt__val(6) may_be_replaced_by 
     cryptotypes__md2_rsa.
issuerknown_rules(54): cryptotypes__algorithmt__pos(
     cryptotypes__md5_rsa) may_be_replaced_by 7.
issuerknown_rules(55): cryptotypes__algorithmt__val(7) may_be_replaced_by 
     cryptotypes__md5_rsa.
issuerknown_rules(56): cryptotypes__algorithmt__pos(
     cryptotypes__sha1_rsa) may_be_replaced_by 8.
issuerknown_rules(57): cryptotypes__algorithmt__val(8) may_be_replaced_by 
     cryptotypes__sha1_rsa.
issuerknown_rules(58): cryptotypes__algorithmt__pos(
     cryptotypes__ripemd128_rsa) may_be_replaced_by 9.
issuerknown_rules(59): cryptotypes__algorithmt__val(9) may_be_replaced_by 
     cryptotypes__ripemd128_rsa.
issuerknown_rules(60): cryptotypes__algorithmt__pos(
     cryptotypes__ripemd160_rsa) may_be_replaced_by 10.
issuerknown_rules(61): cryptotypes__algorithmt__val(10) may_be_replaced_by 
     cryptotypes__ripemd160_rsa.
issuerknown_rules(62): cryptotypes__algorithmt__pos(
     cryptotypes__algorithmt__last) may_be_replaced_by 10.
issuerknown_rules(63): cryptotypes__algorithmt__pos(succ(X)) may_be_replaced_by 
     cryptotypes__algorithmt__pos(X) + 1
     if [X <=cryptotypes__ripemd160_rsa, X <> 
     cryptotypes__ripemd160_rsa].
issuerknown_rules(64): cryptotypes__algorithmt__pos(pred(X)) may_be_replaced_by 
     cryptotypes__algorithmt__pos(X) - 1
     if [X >=cryptotypes__rsa, X <> cryptotypes__rsa].
issuerknown_rules(65): cryptotypes__algorithmt__pos(X) >= 0 may_be_deduced_from
     [cryptotypes__rsa <= X, X <= cryptotypes__ripemd160_rsa].
issuerknown_rules(66): cryptotypes__algorithmt__pos(X) <= 10 may_be_deduced_from
     [cryptotypes__rsa <= X, X <= cryptotypes__ripemd160_rsa].
issuerknown_rules(67): cryptotypes__algorithmt__val(X) >= 
     cryptotypes__rsa may_be_deduced_from
     [0 <= X, X <= 10].
issuerknown_rules(68): cryptotypes__algorithmt__val(X) <= 
     cryptotypes__ripemd160_rsa may_be_deduced_from
     [0 <= X, X <= 10].
issuerknown_rules(69): succ(cryptotypes__algorithmt__val(X)) may_be_replaced_by 
     cryptotypes__algorithmt__val(X+1)
     if [0 <= X, X < 10].
issuerknown_rules(70): pred(cryptotypes__algorithmt__val(X)) may_be_replaced_by 
     cryptotypes__algorithmt__val(X-1)
     if [0 < X, X <= 10].
issuerknown_rules(71): cryptotypes__algorithmt__pos(
     cryptotypes__algorithmt__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 10].
issuerknown_rules(72): cryptotypes__algorithmt__val(
     cryptotypes__algorithmt__pos(X)) may_be_replaced_by X
     if [cryptotypes__rsa <= X, X <= cryptotypes__ripemd160_rsa].
issuerknown_rules(73): cryptotypes__algorithmt__pos(X) <= 
     cryptotypes__algorithmt__pos(Y) & X <= Y are_interchangeable 
     if [cryptotypes__rsa <= X, X <= cryptotypes__ripemd160_rsa, 
     cryptotypes__rsa <= Y, Y <= cryptotypes__ripemd160_rsa].
issuerknown_rules(74): cryptotypes__algorithmt__val(X) <= 
     cryptotypes__algorithmt__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 10, 0 <= Y, Y <= 10].
issuerknown_rules(75): certtypes__serialnumbert__size >= 0 may_be_deduced.
issuerknown_rules(76): certtypes__serialnumbert__first may_be_replaced_by 0.
issuerknown_rules(77): certtypes__serialnumbert__last may_be_replaced_by 4294967295.
issuerknown_rules(78): certtypes__serialnumbert__base__first <= 
     certtypes__serialnumbert__base__last may_be_deduced.
issuerknown_rules(79): certtypes__serialnumbert__base__first <= 
     certtypes__serialnumbert__first may_be_deduced.
issuerknown_rules(80): certtypes__serialnumbert__base__last >= 
     certtypes__serialnumbert__last may_be_deduced.
issuerknown_rules(81): certtypes__idt__size >= 0 may_be_deduced.
issuerknown_rules(82): A = B may_be_deduced_from
     [goal(checktype(A,certtypes__idt)),
      goal(checktype(B,certtypes__idt)),
      fld_issuer(A) = fld_issuer(B),
      fld_serialnumber(A) = fld_serialnumber(B)].
issuerknown_rules(83): contentst__size >= 0 may_be_deduced.
issuerknown_rules(84): A = B may_be_deduced_from
     [goal(checktype(A,contentst)),
      goal(checktype(B,contentst)),
      fld_id(A) = fld_id(B),
      fld_notbefore(A) = fld_notbefore(B),
      fld_notafter(A) = fld_notafter(B),
      fld_mechanism(A) = fld_mechanism(B)].
