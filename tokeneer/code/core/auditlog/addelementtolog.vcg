           *******************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 05-SEP-2011 15:33:09.49

                     procedure AuditLog.AddElementToLog




For path(s) from start to run-time check associated with statement of line 1446:

procedure_addelementtolog_1.
H1:    numberlogentries = (fld_length(usedlogfiles) - 1) * 
           maxlogfileentries + element(logfileentries, [
           currentlogfile]) .
H2:    elementid >= audittypes__elementt__first .
H3:    elementid <= audittypes__elementt__last .
H4:    severity >= audittypes__severityt__first .
H5:    severity <= audittypes__severityt__last .
H6:    for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(user, [
           i___1]) >= character__first) and (element(user, [
           i___1]) <= character__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           description__index__subtype__1__first) and (
           i___1 <= description__index__subtype__1__last)) -> ((element(
           description, [i___1]) >= character__first) and (element(
           description, [i___1]) <= character__last))) .
H8:    auditalarm >= alarmtypes__statust__first .
H9:    auditalarm <= alarmtypes__statust__last .
H10:   numberlogentries >= logentrycountt__first .
H11:   numberlogentries <= logentrycountt__last .
H12:   true .
H13:   true .
H14:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(
           logfilesstatus, [i___1]) >= filestatust__first) and (element(
           logfilesstatus, [i___1]) <= filestatust__last))) .
H15:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(
           logfileentries, [i___1]) >= fileentrycountt__first) and (element(
           logfileentries, [i___1]) <= fileentrycountt__last))) .
H16:   currentlogfile >= logfileindext__first .
H17:   currentlogfile <= logfileindext__last .
H18:   fld_length(usedlogfiles) >= logfilecountt__first .
H19:   fld_length(usedlogfiles) <= logfilecountt__last .
H20:   fld_lasti(usedlogfiles) >= logfileindext__first .
H21:   fld_lasti(usedlogfiles) <= logfileindext__last .
H22:   fld_head(usedlogfiles) >= logfileindext__first .
H23:   fld_head(usedlogfiles) <= logfileindext__last .
H24:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(fld_list(
           usedlogfiles), [i___1]) >= logfileindext__first) and (element(
           fld_list(usedlogfiles), [i___1]) <= 
           logfileindext__last))) .
        ->
C1:    auditalarm >= alarmtypes__statust__first .
C2:    auditalarm <= alarmtypes__statust__last .
 

For path(s) from start to precondition check associated with statement of line 1448:

procedure_addelementtolog_2.
H1:    numberlogentries = (fld_length(usedlogfiles) - 1) * 
           maxlogfileentries + element(logfileentries, [
           currentlogfile]) .
H2:    elementid >= audittypes__elementt__first .
H3:    elementid <= audittypes__elementt__last .
H4:    severity >= audittypes__severityt__first .
H5:    severity <= audittypes__severityt__last .
H6:    for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(user, [
           i___1]) >= character__first) and (element(user, [
           i___1]) <= character__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           description__index__subtype__1__first) and (
           i___1 <= description__index__subtype__1__last)) -> ((element(
           description, [i___1]) >= character__first) and (element(
           description, [i___1]) <= character__last))) .
H8:    auditalarm >= alarmtypes__statust__first .
H9:    auditalarm <= alarmtypes__statust__last .
H10:   numberlogentries >= logentrycountt__first .
H11:   numberlogentries <= logentrycountt__last .
H12:   true .
H13:   true .
H14:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(
           logfilesstatus, [i___1]) >= filestatust__first) and (element(
           logfilesstatus, [i___1]) <= filestatust__last))) .
H15:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(
           logfileentries, [i___1]) >= fileentrycountt__first) and (element(
           logfileentries, [i___1]) <= fileentrycountt__last))) .
H16:   currentlogfile >= logfileindext__first .
H17:   currentlogfile <= logfileindext__last .
H18:   fld_length(usedlogfiles) >= logfilecountt__first .
H19:   fld_length(usedlogfiles) <= logfilecountt__last .
H20:   fld_lasti(usedlogfiles) >= logfileindext__first .
H21:   fld_lasti(usedlogfiles) <= logfileindext__last .
H22:   fld_head(usedlogfiles) >= logfileindext__first .
H23:   fld_head(usedlogfiles) <= logfileindext__last .
H24:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(fld_list(
           usedlogfiles), [i___1]) >= logfileindext__first) and (element(
           fld_list(usedlogfiles), [i___1]) <= 
           logfileindext__last))) .
H25:   auditalarm >= alarmtypes__statust__first .
H26:   auditalarm <= alarmtypes__statust__last .
H27:   for_all(i___1: integer, ((i___1 >= 
           audittypes__descriptioni__first) and (i___1 <= 
           audittypes__descriptioni__last)) -> ((element(
           converttoauditdescription(description), [i___1]) >= 
           character__first) and (element(
           converttoauditdescription(description), [i___1]) <= 
           character__last))) .
        ->
C1:    severity >= audittypes__severityt__first .
C2:    severity <= audittypes__severityt__last .
C3:    elementid >= audittypes__elementt__first .
C4:    elementid <= audittypes__elementt__last .
C5:    numberlogentries = (fld_length(usedlogfiles) - 1) * 
           maxlogfileentries + element(logfileentries, [
           currentlogfile]) .
 

For path(s) from start to precondition check associated with statement of line 1458:

procedure_addelementtolog_3.
H1:    numberlogentries = (fld_length(usedlogfiles) - 1) * 
           maxlogfileentries + element(logfileentries, [
           currentlogfile]) .
H2:    elementid >= audittypes__elementt__first .
H3:    elementid <= audittypes__elementt__last .
H4:    severity >= audittypes__severityt__first .
H5:    severity <= audittypes__severityt__last .
H6:    for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(user, [
           i___1]) >= character__first) and (element(user, [
           i___1]) <= character__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           description__index__subtype__1__first) and (
           i___1 <= description__index__subtype__1__last)) -> ((element(
           description, [i___1]) >= character__first) and (element(
           description, [i___1]) <= character__last))) .
H8:    auditalarm >= alarmtypes__statust__first .
H9:    auditalarm <= alarmtypes__statust__last .
H10:   numberlogentries >= logentrycountt__first .
H11:   numberlogentries <= logentrycountt__last .
H12:   true .
H13:   true .
H14:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(
           logfilesstatus, [i___1]) >= filestatust__first) and (element(
           logfilesstatus, [i___1]) <= filestatust__last))) .
H15:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(
           logfileentries, [i___1]) >= fileentrycountt__first) and (element(
           logfileentries, [i___1]) <= fileentrycountt__last))) .
H16:   currentlogfile >= logfileindext__first .
H17:   currentlogfile <= logfileindext__last .
H18:   fld_length(usedlogfiles) >= logfilecountt__first .
H19:   fld_length(usedlogfiles) <= logfilecountt__last .
H20:   fld_lasti(usedlogfiles) >= logfileindext__first .
H21:   fld_lasti(usedlogfiles) <= logfileindext__last .
H22:   fld_head(usedlogfiles) >= logfileindext__first .
H23:   fld_head(usedlogfiles) <= logfileindext__last .
H24:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(fld_list(
           usedlogfiles), [i___1]) >= logfileindext__first) and (element(
           fld_list(usedlogfiles), [i___1]) <= 
           logfileindext__last))) .
H25:   auditalarm >= alarmtypes__statust__first .
H26:   auditalarm <= alarmtypes__statust__last .
H27:   for_all(i___1: integer, ((i___1 >= 
           audittypes__descriptioni__first) and (i___1 <= 
           audittypes__descriptioni__last)) -> ((element(
           converttoauditdescription(description), [i___1]) >= 
           character__first) and (element(
           converttoauditdescription(description), [i___1]) <= 
           character__last))) .
H28:   severity >= audittypes__severityt__first .
H29:   severity <= audittypes__severityt__last .
H30:   elementid >= audittypes__elementt__first .
H31:   elementid <= audittypes__elementt__last .
H32:   numberlogentries = (fld_length(usedlogfiles) - 1) * 
           maxlogfileentries + element(logfileentries, [
           currentlogfile]) .
H33:   numberlogentries__1 = (fld_length(usedlogfiles__1) - 1) * 
           maxlogfileentries + element(logfileentries__1, [
           currentlogfile__1]) .
H34:   auditalarm__1 >= alarmtypes__statust__first .
H35:   auditalarm__1 <= alarmtypes__statust__last .
H36:   numberlogentries__1 >= logentrycountt__first .
H37:   numberlogentries__1 <= logentrycountt__last .
H38:   true .
H39:   true .
H40:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(logfilesstatus__1, [
           i___1]) >= filestatust__first) and (element(
           logfilesstatus__1, [i___1]) <= filestatust__last))) .
H41:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(logfileentries__1, [
           i___1]) >= fileentrycountt__first) and (element(
           logfileentries__1, [i___1]) <= fileentrycountt__last))) .
H42:   currentlogfile__1 >= logfileindext__first .
H43:   currentlogfile__1 <= logfileindext__last .
H44:   fld_length(usedlogfiles__1) >= logfilecountt__first .
H45:   fld_length(usedlogfiles__1) <= logfilecountt__last .
H46:   fld_lasti(usedlogfiles__1) >= logfileindext__first .
H47:   fld_lasti(usedlogfiles__1) <= logfileindext__last .
H48:   fld_head(usedlogfiles__1) >= logfileindext__first .
H49:   fld_head(usedlogfiles__1) <= logfileindext__last .
H50:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(fld_list(usedlogfiles__1), [
           i___1]) >= logfileindext__first) and (element(fld_list(
           usedlogfiles__1), [i___1]) <= logfileindext__last))) .
H51:   auditalarm__2 >= alarmtypes__statust__first .
H52:   auditalarm__2 <= alarmtypes__statust__last .
H53:   auditalarm >= alarmtypes__statust__first .
H54:   auditalarm <= alarmtypes__statust__last .
H55:   auditalarm <> auditalarm__2 .
        ->
C1:    audittypes__warning >= audittypes__severityt__first .
C2:    audittypes__warning <= audittypes__severityt__last .
C3:    audittypes__auditalarmraised >= audittypes__elementt__first .
C4:    audittypes__auditalarmraised <= audittypes__elementt__last .
C5:    numberlogentries__1 = (fld_length(usedlogfiles__1) - 1) * 
           maxlogfileentries + element(logfileentries__1, [
           currentlogfile__1]) .
 

For path(s) from start to finish:

procedure_addelementtolog_4.
H1:    numberlogentries = (fld_length(usedlogfiles) - 1) * 
           maxlogfileentries + element(logfileentries, [
           currentlogfile]) .
H2:    elementid >= audittypes__elementt__first .
H3:    elementid <= audittypes__elementt__last .
H4:    severity >= audittypes__severityt__first .
H5:    severity <= audittypes__severityt__last .
H6:    for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(user, [
           i___1]) >= character__first) and (element(user, [
           i___1]) <= character__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           description__index__subtype__1__first) and (
           i___1 <= description__index__subtype__1__last)) -> ((element(
           description, [i___1]) >= character__first) and (element(
           description, [i___1]) <= character__last))) .
H8:    auditalarm >= alarmtypes__statust__first .
H9:    auditalarm <= alarmtypes__statust__last .
H10:   numberlogentries >= logentrycountt__first .
H11:   numberlogentries <= logentrycountt__last .
H12:   true .
H13:   true .
H14:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(
           logfilesstatus, [i___1]) >= filestatust__first) and (element(
           logfilesstatus, [i___1]) <= filestatust__last))) .
H15:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(
           logfileentries, [i___1]) >= fileentrycountt__first) and (element(
           logfileentries, [i___1]) <= fileentrycountt__last))) .
H16:   currentlogfile >= logfileindext__first .
H17:   currentlogfile <= logfileindext__last .
H18:   fld_length(usedlogfiles) >= logfilecountt__first .
H19:   fld_length(usedlogfiles) <= logfilecountt__last .
H20:   fld_lasti(usedlogfiles) >= logfileindext__first .
H21:   fld_lasti(usedlogfiles) <= logfileindext__last .
H22:   fld_head(usedlogfiles) >= logfileindext__first .
H23:   fld_head(usedlogfiles) <= logfileindext__last .
H24:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(fld_list(
           usedlogfiles), [i___1]) >= logfileindext__first) and (element(
           fld_list(usedlogfiles), [i___1]) <= 
           logfileindext__last))) .
H25:   auditalarm >= alarmtypes__statust__first .
H26:   auditalarm <= alarmtypes__statust__last .
H27:   for_all(i___1: integer, ((i___1 >= 
           audittypes__descriptioni__first) and (i___1 <= 
           audittypes__descriptioni__last)) -> ((element(
           converttoauditdescription(description), [i___1]) >= 
           character__first) and (element(
           converttoauditdescription(description), [i___1]) <= 
           character__last))) .
H28:   severity >= audittypes__severityt__first .
H29:   severity <= audittypes__severityt__last .
H30:   elementid >= audittypes__elementt__first .
H31:   elementid <= audittypes__elementt__last .
H32:   numberlogentries = (fld_length(usedlogfiles) - 1) * 
           maxlogfileentries + element(logfileentries, [
           currentlogfile]) .
H33:   numberlogentries__1 = (fld_length(usedlogfiles__1) - 1) * 
           maxlogfileentries + element(logfileentries__1, [
           currentlogfile__1]) .
H34:   auditalarm__1 >= alarmtypes__statust__first .
H35:   auditalarm__1 <= alarmtypes__statust__last .
H36:   numberlogentries__1 >= logentrycountt__first .
H37:   numberlogentries__1 <= logentrycountt__last .
H38:   true .
H39:   true .
H40:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(logfilesstatus__1, [
           i___1]) >= filestatust__first) and (element(
           logfilesstatus__1, [i___1]) <= filestatust__last))) .
H41:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(logfileentries__1, [
           i___1]) >= fileentrycountt__first) and (element(
           logfileentries__1, [i___1]) <= fileentrycountt__last))) .
H42:   currentlogfile__1 >= logfileindext__first .
H43:   currentlogfile__1 <= logfileindext__last .
H44:   fld_length(usedlogfiles__1) >= logfilecountt__first .
H45:   fld_length(usedlogfiles__1) <= logfilecountt__last .
H46:   fld_lasti(usedlogfiles__1) >= logfileindext__first .
H47:   fld_lasti(usedlogfiles__1) <= logfileindext__last .
H48:   fld_head(usedlogfiles__1) >= logfileindext__first .
H49:   fld_head(usedlogfiles__1) <= logfileindext__last .
H50:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(fld_list(usedlogfiles__1), [
           i___1]) >= logfileindext__first) and (element(fld_list(
           usedlogfiles__1), [i___1]) <= logfileindext__last))) .
H51:   auditalarm__2 >= alarmtypes__statust__first .
H52:   auditalarm__2 <= alarmtypes__statust__last .
H53:   auditalarm >= alarmtypes__statust__first .
H54:   auditalarm <= alarmtypes__statust__last .
H55:   auditalarm <> auditalarm__2 .
H56:   audittypes__warning >= audittypes__severityt__first .
H57:   audittypes__warning <= audittypes__severityt__last .
H58:   audittypes__auditalarmraised >= audittypes__elementt__first .
H59:   audittypes__auditalarmraised <= audittypes__elementt__last .
H60:   numberlogentries__1 = (fld_length(usedlogfiles__1) - 1) * 
           maxlogfileentries + element(logfileentries__1, [
           currentlogfile__1]) .
H61:   numberlogentries__3 = (fld_length(usedlogfiles__3) - 1) * 
           maxlogfileentries + element(logfileentries__3, [
           currentlogfile__3]) .
H62:   auditalarm__3 >= alarmtypes__statust__first .
H63:   auditalarm__3 <= alarmtypes__statust__last .
H64:   numberlogentries__3 >= logentrycountt__first .
H65:   numberlogentries__3 <= logentrycountt__last .
H66:   true .
H67:   true .
H68:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(logfilesstatus__3, [
           i___1]) >= filestatust__first) and (element(
           logfilesstatus__3, [i___1]) <= filestatust__last))) .
H69:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(logfileentries__3, [
           i___1]) >= fileentrycountt__first) and (element(
           logfileentries__3, [i___1]) <= fileentrycountt__last))) .
H70:   currentlogfile__3 >= logfileindext__first .
H71:   currentlogfile__3 <= logfileindext__last .
H72:   fld_length(usedlogfiles__3) >= logfilecountt__first .
H73:   fld_length(usedlogfiles__3) <= logfilecountt__last .
H74:   fld_lasti(usedlogfiles__3) >= logfileindext__first .
H75:   fld_lasti(usedlogfiles__3) <= logfileindext__last .
H76:   fld_head(usedlogfiles__3) >= logfileindext__first .
H77:   fld_head(usedlogfiles__3) <= logfileindext__last .
H78:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(fld_list(usedlogfiles__3), [
           i___1]) >= logfileindext__first) and (element(fld_list(
           usedlogfiles__3), [i___1]) <= logfileindext__last))) .
        ->
C1:    numberlogentries__3 = (fld_length(usedlogfiles__3) - 1) * 
           maxlogfileentries + element(logfileentries__3, [
           currentlogfile__3]) .
 

procedure_addelementtolog_5.
H1:    numberlogentries = (fld_length(usedlogfiles) - 1) * 
           maxlogfileentries + element(logfileentries, [
           currentlogfile]) .
H2:    elementid >= audittypes__elementt__first .
H3:    elementid <= audittypes__elementt__last .
H4:    severity >= audittypes__severityt__first .
H5:    severity <= audittypes__severityt__last .
H6:    for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(user, [
           i___1]) >= character__first) and (element(user, [
           i___1]) <= character__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           description__index__subtype__1__first) and (
           i___1 <= description__index__subtype__1__last)) -> ((element(
           description, [i___1]) >= character__first) and (element(
           description, [i___1]) <= character__last))) .
H8:    auditalarm >= alarmtypes__statust__first .
H9:    auditalarm <= alarmtypes__statust__last .
H10:   numberlogentries >= logentrycountt__first .
H11:   numberlogentries <= logentrycountt__last .
H12:   true .
H13:   true .
H14:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(
           logfilesstatus, [i___1]) >= filestatust__first) and (element(
           logfilesstatus, [i___1]) <= filestatust__last))) .
H15:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(
           logfileentries, [i___1]) >= fileentrycountt__first) and (element(
           logfileentries, [i___1]) <= fileentrycountt__last))) .
H16:   currentlogfile >= logfileindext__first .
H17:   currentlogfile <= logfileindext__last .
H18:   fld_length(usedlogfiles) >= logfilecountt__first .
H19:   fld_length(usedlogfiles) <= logfilecountt__last .
H20:   fld_lasti(usedlogfiles) >= logfileindext__first .
H21:   fld_lasti(usedlogfiles) <= logfileindext__last .
H22:   fld_head(usedlogfiles) >= logfileindext__first .
H23:   fld_head(usedlogfiles) <= logfileindext__last .
H24:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(fld_list(
           usedlogfiles), [i___1]) >= logfileindext__first) and (element(
           fld_list(usedlogfiles), [i___1]) <= 
           logfileindext__last))) .
H25:   auditalarm >= alarmtypes__statust__first .
H26:   auditalarm <= alarmtypes__statust__last .
H27:   for_all(i___1: integer, ((i___1 >= 
           audittypes__descriptioni__first) and (i___1 <= 
           audittypes__descriptioni__last)) -> ((element(
           converttoauditdescription(description), [i___1]) >= 
           character__first) and (element(
           converttoauditdescription(description), [i___1]) <= 
           character__last))) .
H28:   severity >= audittypes__severityt__first .
H29:   severity <= audittypes__severityt__last .
H30:   elementid >= audittypes__elementt__first .
H31:   elementid <= audittypes__elementt__last .
H32:   numberlogentries = (fld_length(usedlogfiles) - 1) * 
           maxlogfileentries + element(logfileentries, [
           currentlogfile]) .
H33:   numberlogentries__1 = (fld_length(usedlogfiles__1) - 1) * 
           maxlogfileentries + element(logfileentries__1, [
           currentlogfile__1]) .
H34:   auditalarm__1 >= alarmtypes__statust__first .
H35:   auditalarm__1 <= alarmtypes__statust__last .
H36:   numberlogentries__1 >= logentrycountt__first .
H37:   numberlogentries__1 <= logentrycountt__last .
H38:   true .
H39:   true .
H40:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(logfilesstatus__1, [
           i___1]) >= filestatust__first) and (element(
           logfilesstatus__1, [i___1]) <= filestatust__last))) .
H41:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(logfileentries__1, [
           i___1]) >= fileentrycountt__first) and (element(
           logfileentries__1, [i___1]) <= fileentrycountt__last))) .
H42:   currentlogfile__1 >= logfileindext__first .
H43:   currentlogfile__1 <= logfileindext__last .
H44:   fld_length(usedlogfiles__1) >= logfilecountt__first .
H45:   fld_length(usedlogfiles__1) <= logfilecountt__last .
H46:   fld_lasti(usedlogfiles__1) >= logfileindext__first .
H47:   fld_lasti(usedlogfiles__1) <= logfileindext__last .
H48:   fld_head(usedlogfiles__1) >= logfileindext__first .
H49:   fld_head(usedlogfiles__1) <= logfileindext__last .
H50:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(fld_list(usedlogfiles__1), [
           i___1]) >= logfileindext__first) and (element(fld_list(
           usedlogfiles__1), [i___1]) <= logfileindext__last))) .
H51:   auditalarm__2 >= alarmtypes__statust__first .
H52:   auditalarm__2 <= alarmtypes__statust__last .
H53:   auditalarm >= alarmtypes__statust__first .
H54:   auditalarm <= alarmtypes__statust__last .
H55:   not (auditalarm <> auditalarm__2) .
        ->
C1:    numberlogentries__1 = (fld_length(usedlogfiles__1) - 1) * 
           maxlogfileentries + element(logfileentries__1, [
           currentlogfile__1]) .
 

For checks of refinement integrity: 

procedure_addelementtolog_6.
H1:    true .
H2:    auditalarm = fld_auditalarm(state) .
H3:    numberlogentries = fld_numberlogentries(state) .
H4:    auditsystemfault <-> fld_auditsystemfault(state) .
H5:    logfiles = fld_logfiles(filestate) .
H6:    logfilesstatus = fld_logfilesstatus(state) .
H7:    logfileentries = fld_logfileentries(state) .
H8:    currentlogfile = fld_currentlogfile(state) .
H9:    usedlogfiles = fld_usedlogfiles(state) .
H10:   elementid >= audittypes__elementt__first .
H11:   elementid <= audittypes__elementt__last .
H12:   severity >= audittypes__severityt__first .
H13:   severity <= audittypes__severityt__last .
H14:   for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(user, [
           i___1]) >= character__first) and (element(user, [
           i___1]) <= character__last))) .
H15:   for_all(i___1: integer, ((i___1 >= 
           description__index__subtype__1__first) and (
           i___1 <= description__index__subtype__1__last)) -> ((element(
           description, [i___1]) >= character__first) and (element(
           description, [i___1]) <= character__last))) .
H16:   auditalarm >= alarmtypes__statust__first .
H17:   auditalarm <= alarmtypes__statust__last .
H18:   numberlogentries >= logentrycountt__first .
H19:   numberlogentries <= logentrycountt__last .
H20:   true .
H21:   true .
H22:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(
           logfilesstatus, [i___1]) >= filestatust__first) and (element(
           logfilesstatus, [i___1]) <= filestatust__last))) .
H23:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(
           logfileentries, [i___1]) >= fileentrycountt__first) and (element(
           logfileentries, [i___1]) <= fileentrycountt__last))) .
H24:   currentlogfile >= logfileindext__first .
H25:   currentlogfile <= logfileindext__last .
H26:   fld_length(usedlogfiles) >= logfilecountt__first .
H27:   fld_length(usedlogfiles) <= logfilecountt__last .
H28:   fld_lasti(usedlogfiles) >= logfileindext__first .
H29:   fld_lasti(usedlogfiles) <= logfileindext__last .
H30:   fld_head(usedlogfiles) >= logfileindext__first .
H31:   fld_head(usedlogfiles) <= logfileindext__last .
H32:   for_all(i___1: logfilecountt, ((i___1 >= 
           logfileindext__first) and (i___1 <= 
           logfileindext__last)) -> ((element(fld_list(
           usedlogfiles), [i___1]) >= logfileindext__first) and (element(
           fld_list(usedlogfiles), [i___1]) <= 
           logfileindext__last))) .
        ->
C1:    numberlogentries = (fld_length(usedlogfiles) - 1) * 
           maxlogfileentries + element(logfileentries, [
           currentlogfile]) .
 

procedure_addelementtolog_7.
*** true .          /* trivially true VC removed by Examiner */


