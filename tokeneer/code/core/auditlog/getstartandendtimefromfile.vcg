           *******************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 05-SEP-2011 15:33:08.14

               procedure AuditLog.GetStartAndEndTimeFromFile




For path(s) from start to run-time check associated with statement of line 328:

procedure_getstartandendtimefromfile_1.
H1:    true .
H2:    true .
H3:    for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(
           clock__printtime(clock__zerotime), [i___1]) >= 
           character__first) and (element(clock__printtime(
           clock__zerotime), [i___1]) <= character__last))) .
H4:    for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(
           clock__printtime(clock__zerotime), [i___1]) >= 
           character__first) and (element(clock__printtime(
           clock__zerotime), [i___1]) <= character__last))) .
H5:    true .
H6:    file__exists(thefile) .
H7:    true .
H8:    true .
H9:    true .
H10:   ok__1 .
H11:   for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(firsttime__2, [
           i___1]) >= character__first) and (element(firsttime__2, [
           i___1]) <= character__last))) .
H12:   timecount__2 >= natural__first .
H13:   timecount__2 <= natural__last .
        ->
C1:    timecount__2 >= natural__first .
C2:    timecount__2 <= natural__last .
 

For path(s) from start to run-time check associated with statement of line 337:

procedure_getstartandendtimefromfile_2.
H1:    true .
H2:    true .
H3:    for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(
           clock__printtime(clock__zerotime), [i___1]) >= 
           character__first) and (element(clock__printtime(
           clock__zerotime), [i___1]) <= character__last))) .
H4:    for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(
           clock__printtime(clock__zerotime), [i___1]) >= 
           character__first) and (element(clock__printtime(
           clock__zerotime), [i___1]) <= character__last))) .
H5:    true .
H6:    file__exists(thefile) .
H7:    true .
H8:    true .
H9:    true .
H10:   ok__1 .
H11:   for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(firsttime__2, [
           i___1]) >= character__first) and (element(firsttime__2, [
           i___1]) <= character__last))) .
H12:   timecount__2 >= natural__first .
H13:   timecount__2 <= natural__last .
H14:   timecount__2 >= natural__first .
H15:   timecount__2 <= natural__last .
H16:   for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(firsttime__2, [
           i___1]) >= character__first) and (element(firsttime__2, [
           i___1]) <= character__last))) .
H17:   timecount__2 >= natural__first .
H18:   timecount__2 <= natural__last .
H19:   timecount__2 <> clock__timetexti__last .
        ->
C1:    maxlogfileentries - 1 >= positive__first .
C2:    maxlogfileentries - 1 <= positive__last .
C3:    maxlogfileentries - 1 >= integer__base__first .
C4:    maxlogfileentries - 1 <= integer__base__last .
 

procedure_getstartandendtimefromfile_3.
H1:    true .
H2:    true .
H3:    for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(
           clock__printtime(clock__zerotime), [i___1]) >= 
           character__first) and (element(clock__printtime(
           clock__zerotime), [i___1]) <= character__last))) .
H4:    for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(
           clock__printtime(clock__zerotime), [i___1]) >= 
           character__first) and (element(clock__printtime(
           clock__zerotime), [i___1]) <= character__last))) .
H5:    true .
H6:    file__exists(thefile) .
H7:    true .
H8:    true .
H9:    true .
H10:   ok__1 .
H11:   for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(firsttime__2, [
           i___1]) >= character__first) and (element(firsttime__2, [
           i___1]) <= character__last))) .
H12:   timecount__2 >= natural__first .
H13:   timecount__2 <= natural__last .
H14:   timecount__2 >= natural__first .
H15:   timecount__2 <= natural__last .
H16:   for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(firsttime__2, [
           i___1]) >= character__first) and (element(firsttime__2, [
           i___1]) <= character__last))) .
H17:   timecount__2 >= natural__first .
H18:   timecount__2 <= natural__last .
H19:   not (timecount__2 <> clock__timetexti__last) .
        ->
C1:    maxlogfileentries - 1 >= positive__first .
C2:    maxlogfileentries - 1 <= positive__last .
C3:    maxlogfileentries - 1 >= integer__base__first .
C4:    maxlogfileentries - 1 <= integer__base__last .
 

For path(s) from start to run-time check associated with statement of line 340:

procedure_getstartandendtimefromfile_4.
H1:    true .
H2:    true .
H3:    for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(
           clock__printtime(clock__zerotime), [i___1]) >= 
           character__first) and (element(clock__printtime(
           clock__zerotime), [i___1]) <= character__last))) .
H4:    for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(
           clock__printtime(clock__zerotime), [i___1]) >= 
           character__first) and (element(clock__printtime(
           clock__zerotime), [i___1]) <= character__last))) .
H5:    true .
H6:    file__exists(thefile) .
H7:    true .
H8:    true .
H9:    true .
H10:   ok__1 .
H11:   for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(firsttime__2, [
           i___1]) >= character__first) and (element(firsttime__2, [
           i___1]) <= character__last))) .
H12:   timecount__2 >= natural__first .
H13:   timecount__2 <= natural__last .
H14:   timecount__2 >= natural__first .
H15:   timecount__2 <= natural__last .
H16:   for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(firsttime__2, [
           i___1]) >= character__first) and (element(firsttime__2, [
           i___1]) <= character__last))) .
H17:   timecount__2 >= natural__first .
H18:   timecount__2 <= natural__last .
H19:   timecount__2 <> clock__timetexti__last .
H20:   maxlogfileentries - 1 >= positive__first .
H21:   maxlogfileentries - 1 <= positive__last .
H22:   maxlogfileentries - 1 >= integer__base__first .
H23:   maxlogfileentries - 1 <= integer__base__last .
H24:   for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(lasttime__4, [
           i___1]) >= character__first) and (element(lasttime__4, [
           i___1]) <= character__last))) .
H25:   timecount__4 >= natural__first .
H26:   timecount__4 <= natural__last .
        ->
C1:    timecount__4 >= natural__first .
C2:    timecount__4 <= natural__last .
 

procedure_getstartandendtimefromfile_5.
H1:    true .
H2:    true .
H3:    for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(
           clock__printtime(clock__zerotime), [i___1]) >= 
           character__first) and (element(clock__printtime(
           clock__zerotime), [i___1]) <= character__last))) .
H4:    for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(
           clock__printtime(clock__zerotime), [i___1]) >= 
           character__first) and (element(clock__printtime(
           clock__zerotime), [i___1]) <= character__last))) .
H5:    true .
H6:    file__exists(thefile) .
H7:    true .
H8:    true .
H9:    true .
H10:   ok__1 .
H11:   for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(firsttime__2, [
           i___1]) >= character__first) and (element(firsttime__2, [
           i___1]) <= character__last))) .
H12:   timecount__2 >= natural__first .
H13:   timecount__2 <= natural__last .
H14:   timecount__2 >= natural__first .
H15:   timecount__2 <= natural__last .
H16:   for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(firsttime__2, [
           i___1]) >= character__first) and (element(firsttime__2, [
           i___1]) <= character__last))) .
H17:   timecount__2 >= natural__first .
H18:   timecount__2 <= natural__last .
H19:   not (timecount__2 <> clock__timetexti__last) .
H20:   maxlogfileentries - 1 >= positive__first .
H21:   maxlogfileentries - 1 <= positive__last .
H22:   maxlogfileentries - 1 >= integer__base__first .
H23:   maxlogfileentries - 1 <= integer__base__last .
H24:   for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(lasttime__4, [
           i___1]) >= character__first) and (element(lasttime__4, [
           i___1]) <= character__last))) .
H25:   timecount__4 >= natural__first .
H26:   timecount__4 <= natural__last .
        ->
C1:    timecount__4 >= natural__first .
C2:    timecount__4 <= natural__last .
 

For path(s) from start to finish:

procedure_getstartandendtimefromfile_6.
*** true .          /* trivially true VC removed by Examiner */


procedure_getstartandendtimefromfile_7.
*** true .          /* trivially true VC removed by Examiner */


procedure_getstartandendtimefromfile_8.
*** true .          /* trivially true VC removed by Examiner */


procedure_getstartandendtimefromfile_9.
*** true .          /* trivially true VC removed by Examiner */


procedure_getstartandendtimefromfile_10.
*** true .          /* trivially true VC removed by Examiner */


procedure_getstartandendtimefromfile_11.
*** true .          /* trivially true VC removed by Examiner */


