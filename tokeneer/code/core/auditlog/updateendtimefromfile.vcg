           *******************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 05-SEP-2011 15:33:08.20

                  procedure AuditLog.UpdateEndTimeFromFile




For path(s) from start to run-time check associated with statement of line 448:

procedure_updateendtimefromfile_1.
H1:    true .
H2:    for_all(i___1: integer, ((i___1 >= 
           audittypes__descriptioni__first) and (i___1 <= 
           audittypes__descriptioni__last)) -> ((element(
           description, [i___1]) >= character__first) and (element(
           description, [i___1]) <= character__last))) .
H3:    true .
H4:    for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(
           clock__printtime(clock__zerotime), [i___1]) >= 
           character__first) and (element(clock__printtime(
           clock__zerotime), [i___1]) <= character__last))) .
H5:    true .
H6:    file__exists(thefile) .
H7:    true .
H8:    true .
H9:    true .
H10:   ok__1 .
        ->
C1:    maxlogfileentries - 1 >= positive__first .
C2:    maxlogfileentries - 1 <= positive__last .
C3:    maxlogfileentries - 1 >= integer__base__first .
C4:    maxlogfileentries - 1 <= integer__base__last .
 

For path(s) from start to run-time check associated with statement of line 452:

procedure_updateendtimefromfile_2.
H1:    true .
H2:    for_all(i___1: integer, ((i___1 >= 
           audittypes__descriptioni__first) and (i___1 <= 
           audittypes__descriptioni__last)) -> ((element(
           description, [i___1]) >= character__first) and (element(
           description, [i___1]) <= character__last))) .
H3:    true .
H4:    for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(
           clock__printtime(clock__zerotime), [i___1]) >= 
           character__first) and (element(clock__printtime(
           clock__zerotime), [i___1]) <= character__last))) .
H5:    true .
H6:    file__exists(thefile) .
H7:    true .
H8:    true .
H9:    true .
H10:   ok__1 .
H11:   maxlogfileentries - 1 >= positive__first .
H12:   maxlogfileentries - 1 <= positive__last .
H13:   maxlogfileentries - 1 >= integer__base__first .
H14:   maxlogfileentries - 1 <= integer__base__last .
H15:   for_all(i___1: integer, ((i___1 >= clock__timetexti__first) and (
           i___1 <= clock__timetexti__last)) -> ((element(lasttime__3, [
           i___1]) >= character__first) and (element(lasttime__3, [
           i___1]) <= character__last))) .
H16:   timecount__3 >= natural__first .
H17:   timecount__3 <= natural__last .
        ->
C1:    timecount__3 >= natural__first .
C2:    timecount__3 <= natural__last .
 

For path(s) from start to finish:

procedure_updateendtimefromfile_3.
*** true .          /* trivially true VC removed by Examiner */


procedure_updateendtimefromfile_4.
*** true .          /* trivially true VC removed by Examiner */


procedure_updateendtimefromfile_5.
*** true .          /* trivially true VC removed by Examiner */


procedure_updateendtimefromfile_6.
*** true .          /* trivially true VC removed by Examiner */


