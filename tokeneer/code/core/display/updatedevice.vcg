           *******************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 05-SEP-2011 15:33:17.84

                       procedure Display.UpdateDevice




For path(s) from start to run-time check associated with statement of line 268:

procedure_updatedevice_1.
H1:    true .
H2:    currentdisplay >= msgt__first .
H3:    currentdisplay <= msgt__last .
H4:    fld_bottom(sizes) >= basictypes__unsigned32t__first .
H5:    fld_bottom(sizes) <= basictypes__unsigned32t__last .
H6:    fld_top(sizes) >= basictypes__unsigned32t__first .
H7:    fld_top(sizes) <= basictypes__unsigned32t__last .
H8:    currentlydisplayed >= msgt__first .
H9:    currentlydisplayed <= msgt__last .
H10:   currentdisplay <> currentlydisplayed .
        ->
C1:    currentdisplay >= msgt__first .
C2:    currentdisplay <= msgt__last .
 

For path(s) from start to run-time check associated with statement of line 270:

procedure_updatedevice_2.
H1:    true .
H2:    currentdisplay >= msgt__first .
H3:    currentdisplay <= msgt__last .
H4:    fld_bottom(sizes) >= basictypes__unsigned32t__first .
H5:    fld_bottom(sizes) <= basictypes__unsigned32t__last .
H6:    fld_top(sizes) >= basictypes__unsigned32t__first .
H7:    fld_top(sizes) <= basictypes__unsigned32t__last .
H8:    currentlydisplayed >= msgt__first .
H9:    currentlydisplayed <= msgt__last .
H10:   currentdisplay <> currentlydisplayed .
H11:   currentdisplay >= msgt__first .
H12:   currentdisplay <= msgt__last .
        ->
C1:    currentdisplay >= msgt__first .
C2:    currentdisplay <= msgt__last .
 

For path(s) from start to run-time check associated with statement of line 274:

procedure_updatedevice_3.
H1:    true .
H2:    currentdisplay >= msgt__first .
H3:    currentdisplay <= msgt__last .
H4:    fld_bottom(sizes) >= basictypes__unsigned32t__first .
H5:    fld_bottom(sizes) <= basictypes__unsigned32t__last .
H6:    fld_top(sizes) >= basictypes__unsigned32t__first .
H7:    fld_top(sizes) <= basictypes__unsigned32t__last .
H8:    currentlydisplayed >= msgt__first .
H9:    currentlydisplayed <= msgt__last .
H10:   currentdisplay <> currentlydisplayed .
H11:   currentdisplay >= msgt__first .
H12:   currentdisplay <= msgt__last .
H13:   currentdisplay >= msgt__first .
H14:   currentdisplay <= msgt__last .
H15:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) >= msgtextcount__first .
H16:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) <= msgtextcount__last .
H17:   for_all(i___2: integer, ((i___2 >= msgtexti__first) and (
           i___2 <= msgtexti__last)) -> ((element(fld_text(fld_bottom(element(
           msgtostrings, [currentdisplay]))), [i___2]) >= 
           character__first) and (element(fld_text(fld_bottom(element(
           msgtostrings, [currentdisplay]))), [i___2]) <= 
           character__last))) .
H18:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) >= msgtextcount__first .
H19:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) <= msgtextcount__last .
H20:   for_all(i___1: integer, ((i___1 >= msgtexti__first) and (
           i___1 <= msgtexti__last)) -> ((element(fld_text(fld_top(element(
           msgtostrings, [currentdisplay]))), [i___1]) >= 
           character__first) and (element(fld_text(fld_top(element(
           msgtostrings, [currentdisplay]))), [i___1]) <= 
           character__last))) .
        ->
C1:    fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) >= basictypes__unsigned32t__first .
C2:    fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) <= basictypes__unsigned32t__last .
C3:    fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) >= basictypes__unsigned32t__first .
C4:    fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) <= basictypes__unsigned32t__last .
 

For path(s) from start to run-time check associated with statement of line 294:

procedure_updatedevice_4.
H1:    true .
H2:    currentdisplay >= msgt__first .
H3:    currentdisplay <= msgt__last .
H4:    fld_bottom(sizes) >= basictypes__unsigned32t__first .
H5:    fld_bottom(sizes) <= basictypes__unsigned32t__last .
H6:    fld_top(sizes) >= basictypes__unsigned32t__first .
H7:    fld_top(sizes) <= basictypes__unsigned32t__last .
H8:    currentlydisplayed >= msgt__first .
H9:    currentlydisplayed <= msgt__last .
H10:   currentdisplay <> currentlydisplayed .
H11:   currentdisplay >= msgt__first .
H12:   currentdisplay <= msgt__last .
H13:   currentdisplay >= msgt__first .
H14:   currentdisplay <= msgt__last .
H15:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) >= msgtextcount__first .
H16:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) <= msgtextcount__last .
H17:   for_all(i___2: integer, ((i___2 >= msgtexti__first) and (
           i___2 <= msgtexti__last)) -> ((element(fld_text(fld_bottom(element(
           msgtostrings, [currentdisplay]))), [i___2]) >= 
           character__first) and (element(fld_text(fld_bottom(element(
           msgtostrings, [currentdisplay]))), [i___2]) <= 
           character__last))) .
H18:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) >= msgtextcount__first .
H19:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) <= msgtextcount__last .
H20:   for_all(i___1: integer, ((i___1 >= msgtexti__first) and (
           i___1 <= msgtexti__last)) -> ((element(fld_text(fld_top(element(
           msgtostrings, [currentdisplay]))), [i___1]) >= 
           character__first) and (element(fld_text(fld_top(element(
           msgtostrings, [currentdisplay]))), [i___1]) <= 
           character__last))) .
H21:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) >= basictypes__unsigned32t__first .
H22:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) <= basictypes__unsigned32t__last .
H23:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) >= basictypes__unsigned32t__first .
H24:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) <= basictypes__unsigned32t__last .
H25:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) <= fld_top(sizes) .
H26:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) <= fld_bottom(sizes) .
H27:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) >= msgtextcount__first .
H28:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) <= msgtextcount__last .
H29:   for_all(i___2: integer, ((i___2 >= msgtexti__first) and (
           i___2 <= msgtexti__last)) -> ((element(fld_text(fld_bottom(element(
           msgtostrings, [currentdisplay]))), [i___2]) >= 
           character__first) and (element(fld_text(fld_bottom(element(
           msgtostrings, [currentdisplay]))), [i___2]) <= 
           character__last))) .
H30:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) >= msgtextcount__first .
H31:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) <= msgtextcount__last .
H32:   for_all(i___1: integer, ((i___1 >= msgtexti__first) and (
           i___1 <= msgtexti__last)) -> ((element(fld_text(fld_top(element(
           msgtostrings, [currentdisplay]))), [i___1]) >= 
           character__first) and (element(fld_text(fld_top(element(
           msgtostrings, [currentdisplay]))), [i___1]) <= 
           character__last))) .
H33:   true .
H34:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) >= msgtextcount__first .
H35:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) <= msgtextcount__last .
H36:   for_all(i___2: integer, ((i___2 >= msgtexti__first) and (
           i___2 <= msgtexti__last)) -> ((element(fld_text(fld_bottom(element(
           msgtostrings, [currentdisplay]))), [i___2]) >= 
           character__first) and (element(fld_text(fld_bottom(element(
           msgtostrings, [currentdisplay]))), [i___2]) <= 
           character__last))) .
H37:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) >= msgtextcount__first .
H38:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) <= msgtextcount__last .
H39:   for_all(i___1: integer, ((i___1 >= msgtexti__first) and (
           i___1 <= msgtexti__last)) -> ((element(fld_text(fld_top(element(
           msgtostrings, [currentdisplay]))), [i___1]) >= 
           character__first) and (element(fld_text(fld_top(element(
           msgtostrings, [currentdisplay]))), [i___1]) <= 
           character__last))) .
H40:   true .
H41:   true .
H42:   true .
H43:   true .
H44:   not (topwritten__2 and bottomwritten__3) .
        ->
C1:    audittypes__warning >= audittypes__severityt__first .
C2:    audittypes__warning <= audittypes__severityt__last .
C3:    audittypes__systemfault >= audittypes__elementt__first .
C4:    audittypes__systemfault <= audittypes__elementt__last .
 

procedure_updatedevice_5.
H1:    true .
H2:    currentdisplay >= msgt__first .
H3:    currentdisplay <= msgt__last .
H4:    fld_bottom(sizes) >= basictypes__unsigned32t__first .
H5:    fld_bottom(sizes) <= basictypes__unsigned32t__last .
H6:    fld_top(sizes) >= basictypes__unsigned32t__first .
H7:    fld_top(sizes) <= basictypes__unsigned32t__last .
H8:    currentlydisplayed >= msgt__first .
H9:    currentlydisplayed <= msgt__last .
H10:   currentdisplay <> currentlydisplayed .
H11:   currentdisplay >= msgt__first .
H12:   currentdisplay <= msgt__last .
H13:   currentdisplay >= msgt__first .
H14:   currentdisplay <= msgt__last .
H15:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) >= msgtextcount__first .
H16:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) <= msgtextcount__last .
H17:   for_all(i___2: integer, ((i___2 >= msgtexti__first) and (
           i___2 <= msgtexti__last)) -> ((element(fld_text(fld_bottom(element(
           msgtostrings, [currentdisplay]))), [i___2]) >= 
           character__first) and (element(fld_text(fld_bottom(element(
           msgtostrings, [currentdisplay]))), [i___2]) <= 
           character__last))) .
H18:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) >= msgtextcount__first .
H19:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) <= msgtextcount__last .
H20:   for_all(i___1: integer, ((i___1 >= msgtexti__first) and (
           i___1 <= msgtexti__last)) -> ((element(fld_text(fld_top(element(
           msgtostrings, [currentdisplay]))), [i___1]) >= 
           character__first) and (element(fld_text(fld_top(element(
           msgtostrings, [currentdisplay]))), [i___1]) <= 
           character__last))) .
H21:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) >= basictypes__unsigned32t__first .
H22:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) <= basictypes__unsigned32t__last .
H23:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) >= basictypes__unsigned32t__first .
H24:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) <= basictypes__unsigned32t__last .
H25:   not ((fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) <= fld_top(sizes)) and (fld_len(
           fld_bottom(element(msgtostrings, [currentdisplay]))) <= 
           fld_bottom(sizes))) .
H26:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) >= msgtextcount__first .
H27:   fld_len(fld_bottom(element(msgtostrings, [
           currentdisplay]))) <= msgtextcount__last .
H28:   for_all(i___2: integer, ((i___2 >= msgtexti__first) and (
           i___2 <= msgtexti__last)) -> ((element(fld_text(fld_bottom(element(
           msgtostrings, [currentdisplay]))), [i___2]) >= 
           character__first) and (element(fld_text(fld_bottom(element(
           msgtostrings, [currentdisplay]))), [i___2]) <= 
           character__last))) .
H29:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) >= msgtextcount__first .
H30:   fld_len(fld_top(element(msgtostrings, [
           currentdisplay]))) <= msgtextcount__last .
H31:   for_all(i___1: integer, ((i___1 >= msgtexti__first) and (
           i___1 <= msgtexti__last)) -> ((element(fld_text(fld_top(element(
           msgtostrings, [currentdisplay]))), [i___1]) >= 
           character__first) and (element(fld_text(fld_top(element(
           msgtostrings, [currentdisplay]))), [i___1]) <= 
           character__last))) .
H32:   fld_len(combinelines(element(msgtostrings, [
           currentdisplay]))) >= scrolltextcount__first .
H33:   fld_len(combinelines(element(msgtostrings, [
           currentdisplay]))) <= scrolltextcount__last .
H34:   for_all(i___1: integer, ((i___1 >= scrolltexti__first) and (
           i___1 <= scrolltexti__last)) -> ((element(fld_text(
           combinelines(element(msgtostrings, [
           currentdisplay]))), [i___1]) >= character__first) and (element(
           fld_text(combinelines(element(msgtostrings, [
           currentdisplay]))), [i___1]) <= character__last))) .
H35:   true .
H36:   true .
H37:   not written__4 .
        ->
C1:    audittypes__warning >= audittypes__severityt__first .
C2:    audittypes__warning <= audittypes__severityt__last .
C3:    audittypes__systemfault >= audittypes__elementt__first .
C4:    audittypes__systemfault <= audittypes__elementt__last .
 

For path(s) from start to finish:

procedure_updatedevice_6.
*** true .          /* trivially true VC removed by Examiner */


procedure_updatedevice_7.
*** true .          /* trivially true VC removed by Examiner */


procedure_updatedevice_8.
*** true .          /* trivially true VC removed by Examiner */


procedure_updatedevice_9.
*** true .          /* trivially true VC removed by Examiner */


procedure_updatedevice_10.
*** true .          /* trivially true VC removed by Examiner */


For checks of refinement integrity: 

procedure_updatedevice_11.
*** true .          /* trivially true VC removed by Examiner */


procedure_updatedevice_12.
*** true .          /* trivially true VC removed by Examiner */


