           /*********************************************************/
                           /*Proof Rule Declarations*/
                              /*Examiner GPL 2011*/
             /*Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.*/
           /*********************************************************/


                        /*DATE : 05-SEP-2011 15:33:14.22*/

                           /*procedure Auth.Extract*/


rule_family extract_rules:
     X      requires [X:any] &
     X <= Y requires [X:ire, Y:ire] &
     X >= Y requires [X:ire, Y:ire].

extract_rules(1): integer__size >= 0 may_be_deduced.
extract_rules(2): integer__first may_be_replaced_by -2147483648.
extract_rules(3): integer__last may_be_replaced_by 2147483647.
extract_rules(4): integer__base__first may_be_replaced_by -2147483648.
extract_rules(5): integer__base__last may_be_replaced_by 2147483647.
extract_rules(6): character__size >= 0 may_be_deduced.
extract_rules(7): character__first may_be_replaced_by 0.
extract_rules(8): character__last may_be_replaced_by 255.
extract_rules(9): character__base__first may_be_replaced_by 0.
extract_rules(10): character__base__last may_be_replaced_by 255.
extract_rules(11): positive__size >= 0 may_be_deduced.
extract_rules(12): positive__first may_be_replaced_by 1.
extract_rules(13): positive__last may_be_replaced_by 2147483647.
extract_rules(14): positive__base__first may_be_replaced_by -2147483648.
extract_rules(15): positive__base__last may_be_replaced_by 2147483647.
extract_rules(16): basictypes__unsigned32t__size >= 0 may_be_deduced.
extract_rules(17): basictypes__unsigned32t__size may_be_replaced_by 32.
extract_rules(18): basictypes__unsigned32t__first may_be_replaced_by 0.
extract_rules(19): basictypes__unsigned32t__last may_be_replaced_by 4294967295.
extract_rules(20): basictypes__unsigned32t__base__first <= 
     basictypes__unsigned32t__base__last may_be_deduced.
extract_rules(21): basictypes__unsigned32t__base__first <= 
     basictypes__unsigned32t__first may_be_deduced.
extract_rules(22): basictypes__unsigned32t__base__last >= 
     basictypes__unsigned32t__last may_be_deduced.
extract_rules(23): privtypes__privileget__size >= 0 may_be_deduced.
extract_rules(24): privtypes__privileget__first may_be_replaced_by privtypes__useronly.
extract_rules(25): privtypes__privileget__last may_be_replaced_by privtypes__securityofficer.
extract_rules(26): privtypes__privileget__base__first may_be_replaced_by privtypes__useronly.
extract_rules(27): privtypes__privileget__base__last may_be_replaced_by privtypes__securityofficer.
extract_rules(28): privtypes__privileget__pos(
     privtypes__privileget__first) may_be_replaced_by 0.
extract_rules(29): privtypes__privileget__pos(privtypes__useronly) may_be_replaced_by 0.
extract_rules(30): privtypes__privileget__val(0) may_be_replaced_by 
     privtypes__useronly.
extract_rules(31): privtypes__privileget__pos(privtypes__guard) may_be_replaced_by 1.
extract_rules(32): privtypes__privileget__val(1) may_be_replaced_by 
     privtypes__guard.
extract_rules(33): privtypes__privileget__pos(
     privtypes__auditmanager) may_be_replaced_by 2.
extract_rules(34): privtypes__privileget__val(2) may_be_replaced_by 
     privtypes__auditmanager.
extract_rules(35): privtypes__privileget__pos(
     privtypes__securityofficer) may_be_replaced_by 3.
extract_rules(36): privtypes__privileget__val(3) may_be_replaced_by 
     privtypes__securityofficer.
extract_rules(37): privtypes__privileget__pos(
     privtypes__privileget__last) may_be_replaced_by 3.
extract_rules(38): privtypes__privileget__pos(succ(X)) may_be_replaced_by 
     privtypes__privileget__pos(X) + 1
     if [X <=privtypes__securityofficer, X <> 
     privtypes__securityofficer].
extract_rules(39): privtypes__privileget__pos(pred(X)) may_be_replaced_by 
     privtypes__privileget__pos(X) - 1
     if [X >=privtypes__useronly, X <> privtypes__useronly].
extract_rules(40): privtypes__privileget__pos(X) >= 0 may_be_deduced_from
     [privtypes__useronly <= X, X <= privtypes__securityofficer].
extract_rules(41): privtypes__privileget__pos(X) <= 3 may_be_deduced_from
     [privtypes__useronly <= X, X <= privtypes__securityofficer].
extract_rules(42): privtypes__privileget__val(X) >= 
     privtypes__useronly may_be_deduced_from
     [0 <= X, X <= 3].
extract_rules(43): privtypes__privileget__val(X) <= 
     privtypes__securityofficer may_be_deduced_from
     [0 <= X, X <= 3].
extract_rules(44): succ(privtypes__privileget__val(X)) may_be_replaced_by 
     privtypes__privileget__val(X+1)
     if [0 <= X, X < 3].
extract_rules(45): pred(privtypes__privileget__val(X)) may_be_replaced_by 
     privtypes__privileget__val(X-1)
     if [0 < X, X <= 3].
extract_rules(46): privtypes__privileget__pos(
     privtypes__privileget__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 3].
extract_rules(47): privtypes__privileget__val(
     privtypes__privileget__pos(X)) may_be_replaced_by X
     if [privtypes__useronly <= X, X <= 
     privtypes__securityofficer].
extract_rules(48): privtypes__privileget__pos(X) <= 
     privtypes__privileget__pos(Y) & X <= Y are_interchangeable 
     if [privtypes__useronly <= X, X <= 
     privtypes__securityofficer, privtypes__useronly <= Y, Y <= 
     privtypes__securityofficer].
extract_rules(49): privtypes__privileget__val(X) <= 
     privtypes__privileget__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 3, 0 <= Y, Y <= 3].
extract_rules(50): privtypes__classt__size >= 0 may_be_deduced.
extract_rules(51): privtypes__classt__first may_be_replaced_by privtypes__unmarked.
extract_rules(52): privtypes__classt__last may_be_replaced_by privtypes__topsecret.
extract_rules(53): privtypes__classt__base__first may_be_replaced_by privtypes__unmarked.
extract_rules(54): privtypes__classt__base__last may_be_replaced_by privtypes__topsecret.
extract_rules(55): privtypes__classt__pos(privtypes__classt__first) may_be_replaced_by 0.
extract_rules(56): privtypes__classt__pos(privtypes__unmarked) may_be_replaced_by 0.
extract_rules(57): privtypes__classt__val(0) may_be_replaced_by 
     privtypes__unmarked.
extract_rules(58): privtypes__classt__pos(privtypes__unclassified) may_be_replaced_by 1.
extract_rules(59): privtypes__classt__val(1) may_be_replaced_by 
     privtypes__unclassified.
extract_rules(60): privtypes__classt__pos(privtypes__restricted) may_be_replaced_by 2.
extract_rules(61): privtypes__classt__val(2) may_be_replaced_by 
     privtypes__restricted.
extract_rules(62): privtypes__classt__pos(privtypes__confidential) may_be_replaced_by 3.
extract_rules(63): privtypes__classt__val(3) may_be_replaced_by 
     privtypes__confidential.
extract_rules(64): privtypes__classt__pos(privtypes__secret) may_be_replaced_by 4.
extract_rules(65): privtypes__classt__val(4) may_be_replaced_by 
     privtypes__secret.
extract_rules(66): privtypes__classt__pos(privtypes__topsecret) may_be_replaced_by 5.
extract_rules(67): privtypes__classt__val(5) may_be_replaced_by 
     privtypes__topsecret.
extract_rules(68): privtypes__classt__pos(privtypes__classt__last) may_be_replaced_by 5.
extract_rules(69): privtypes__classt__pos(succ(X)) may_be_replaced_by 
     privtypes__classt__pos(X) + 1
     if [X <=privtypes__topsecret, X <> privtypes__topsecret].
extract_rules(70): privtypes__classt__pos(pred(X)) may_be_replaced_by 
     privtypes__classt__pos(X) - 1
     if [X >=privtypes__unmarked, X <> privtypes__unmarked].
extract_rules(71): privtypes__classt__pos(X) >= 0 may_be_deduced_from
     [privtypes__unmarked <= X, X <= privtypes__topsecret].
extract_rules(72): privtypes__classt__pos(X) <= 5 may_be_deduced_from
     [privtypes__unmarked <= X, X <= privtypes__topsecret].
extract_rules(73): privtypes__classt__val(X) >= 
     privtypes__unmarked may_be_deduced_from
     [0 <= X, X <= 5].
extract_rules(74): privtypes__classt__val(X) <= 
     privtypes__topsecret may_be_deduced_from
     [0 <= X, X <= 5].
extract_rules(75): succ(privtypes__classt__val(X)) may_be_replaced_by 
     privtypes__classt__val(X+1)
     if [0 <= X, X < 5].
extract_rules(76): pred(privtypes__classt__val(X)) may_be_replaced_by 
     privtypes__classt__val(X-1)
     if [0 < X, X <= 5].
extract_rules(77): privtypes__classt__pos(privtypes__classt__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 5].
extract_rules(78): privtypes__classt__val(privtypes__classt__pos(X)) may_be_replaced_by X
     if [privtypes__unmarked <= X, X <= privtypes__topsecret].
extract_rules(79): privtypes__classt__pos(X) <= privtypes__classt__pos(Y) & X <= Y are_interchangeable 
     if [privtypes__unmarked <= X, X <= privtypes__topsecret, 
     privtypes__unmarked <= Y, Y <= privtypes__topsecret].
extract_rules(80): privtypes__classt__val(X) <= privtypes__classt__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 5, 0 <= Y, Y <= 5].
extract_rules(81): privtypes__clearancet__size >= 0 may_be_deduced.
extract_rules(82): A = B may_be_deduced_from
     [goal(checktype(A,privtypes__clearancet)),
      goal(checktype(B,privtypes__clearancet)),
      fld_class(A) = fld_class(B)].
extract_rules(83): cryptotypes__namecountt__size >= 0 may_be_deduced.
extract_rules(84): cryptotypes__namecountt__first may_be_replaced_by 0.
extract_rules(85): cryptotypes__namecountt__last may_be_replaced_by 40.
extract_rules(86): cryptotypes__namecountt__base__first may_be_replaced_by -2147483648.
extract_rules(87): cryptotypes__namecountt__base__last may_be_replaced_by 2147483647.
extract_rules(88): cryptotypes__namei__size >= 0 may_be_deduced.
extract_rules(89): cryptotypes__namei__first may_be_replaced_by 1.
extract_rules(90): cryptotypes__namei__last may_be_replaced_by 40.
extract_rules(91): cryptotypes__namei__base__first may_be_replaced_by -2147483648.
extract_rules(92): cryptotypes__namei__base__last may_be_replaced_by 2147483647.
extract_rules(93): cryptotypes__issueridt__size >= 0 may_be_deduced.
extract_rules(94): cryptotypes__issueridt__first may_be_replaced_by 0.
extract_rules(95): cryptotypes__issueridt__last may_be_replaced_by 4294967295.
extract_rules(96): cryptotypes__issueridt__base__first <= 
     cryptotypes__issueridt__base__last may_be_deduced.
extract_rules(97): cryptotypes__issueridt__base__first <= 
     cryptotypes__issueridt__first may_be_deduced.
extract_rules(98): cryptotypes__issueridt__base__last >= 
     cryptotypes__issueridt__last may_be_deduced.
extract_rules(99): cryptotypes__issuert__size >= 0 may_be_deduced.
extract_rules(100): A = B may_be_deduced_from
     [goal(checktype(A,cryptotypes__issuert)),
      goal(checktype(B,cryptotypes__issuert)),
      fld_id(A) = fld_id(B),
      fld_namelength(A) = fld_namelength(B),
      fld_name(A) = fld_name(B)].
extract_rules(101): cryptotypes__algorithmt__size >= 0 may_be_deduced.
extract_rules(102): cryptotypes__algorithmt__first may_be_replaced_by cryptotypes__rsa.
extract_rules(103): cryptotypes__algorithmt__last may_be_replaced_by cryptotypes__ripemd160_rsa.
extract_rules(104): cryptotypes__algorithmt__base__first may_be_replaced_by cryptotypes__rsa.
extract_rules(105): cryptotypes__algorithmt__base__last may_be_replaced_by cryptotypes__ripemd160_rsa.
extract_rules(106): cryptotypes__algorithmt__pos(
     cryptotypes__algorithmt__first) may_be_replaced_by 0.
extract_rules(107): cryptotypes__algorithmt__pos(cryptotypes__rsa) may_be_replaced_by 0.
extract_rules(108): cryptotypes__algorithmt__val(0) may_be_replaced_by 
     cryptotypes__rsa.
extract_rules(109): cryptotypes__algorithmt__pos(cryptotypes__md2) may_be_replaced_by 1.
extract_rules(110): cryptotypes__algorithmt__val(1) may_be_replaced_by 
     cryptotypes__md2.
extract_rules(111): cryptotypes__algorithmt__pos(cryptotypes__md5) may_be_replaced_by 2.
extract_rules(112): cryptotypes__algorithmt__val(2) may_be_replaced_by 
     cryptotypes__md5.
extract_rules(113): cryptotypes__algorithmt__pos(
     cryptotypes__sha_1) may_be_replaced_by 3.
extract_rules(114): cryptotypes__algorithmt__val(3) may_be_replaced_by 
     cryptotypes__sha_1.
extract_rules(115): cryptotypes__algorithmt__pos(
     cryptotypes__ripemd128) may_be_replaced_by 4.
extract_rules(116): cryptotypes__algorithmt__val(4) may_be_replaced_by 
     cryptotypes__ripemd128.
extract_rules(117): cryptotypes__algorithmt__pos(
     cryptotypes__ripemd160) may_be_replaced_by 5.
extract_rules(118): cryptotypes__algorithmt__val(5) may_be_replaced_by 
     cryptotypes__ripemd160.
extract_rules(119): cryptotypes__algorithmt__pos(
     cryptotypes__md2_rsa) may_be_replaced_by 6.
extract_rules(120): cryptotypes__algorithmt__val(6) may_be_replaced_by 
     cryptotypes__md2_rsa.
extract_rules(121): cryptotypes__algorithmt__pos(
     cryptotypes__md5_rsa) may_be_replaced_by 7.
extract_rules(122): cryptotypes__algorithmt__val(7) may_be_replaced_by 
     cryptotypes__md5_rsa.
extract_rules(123): cryptotypes__algorithmt__pos(
     cryptotypes__sha1_rsa) may_be_replaced_by 8.
extract_rules(124): cryptotypes__algorithmt__val(8) may_be_replaced_by 
     cryptotypes__sha1_rsa.
extract_rules(125): cryptotypes__algorithmt__pos(
     cryptotypes__ripemd128_rsa) may_be_replaced_by 9.
extract_rules(126): cryptotypes__algorithmt__val(9) may_be_replaced_by 
     cryptotypes__ripemd128_rsa.
extract_rules(127): cryptotypes__algorithmt__pos(
     cryptotypes__ripemd160_rsa) may_be_replaced_by 10.
extract_rules(128): cryptotypes__algorithmt__val(10) may_be_replaced_by 
     cryptotypes__ripemd160_rsa.
extract_rules(129): cryptotypes__algorithmt__pos(
     cryptotypes__algorithmt__last) may_be_replaced_by 10.
extract_rules(130): cryptotypes__algorithmt__pos(succ(X)) may_be_replaced_by 
     cryptotypes__algorithmt__pos(X) + 1
     if [X <=cryptotypes__ripemd160_rsa, X <> 
     cryptotypes__ripemd160_rsa].
extract_rules(131): cryptotypes__algorithmt__pos(pred(X)) may_be_replaced_by 
     cryptotypes__algorithmt__pos(X) - 1
     if [X >=cryptotypes__rsa, X <> cryptotypes__rsa].
extract_rules(132): cryptotypes__algorithmt__pos(X) >= 0 may_be_deduced_from
     [cryptotypes__rsa <= X, X <= cryptotypes__ripemd160_rsa].
extract_rules(133): cryptotypes__algorithmt__pos(X) <= 10 may_be_deduced_from
     [cryptotypes__rsa <= X, X <= cryptotypes__ripemd160_rsa].
extract_rules(134): cryptotypes__algorithmt__val(X) >= 
     cryptotypes__rsa may_be_deduced_from
     [0 <= X, X <= 10].
extract_rules(135): cryptotypes__algorithmt__val(X) <= 
     cryptotypes__ripemd160_rsa may_be_deduced_from
     [0 <= X, X <= 10].
extract_rules(136): succ(cryptotypes__algorithmt__val(X)) may_be_replaced_by 
     cryptotypes__algorithmt__val(X+1)
     if [0 <= X, X < 10].
extract_rules(137): pred(cryptotypes__algorithmt__val(X)) may_be_replaced_by 
     cryptotypes__algorithmt__val(X-1)
     if [0 < X, X <= 10].
extract_rules(138): cryptotypes__algorithmt__pos(
     cryptotypes__algorithmt__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 10].
extract_rules(139): cryptotypes__algorithmt__val(
     cryptotypes__algorithmt__pos(X)) may_be_replaced_by X
     if [cryptotypes__rsa <= X, X <= cryptotypes__ripemd160_rsa].
extract_rules(140): cryptotypes__algorithmt__pos(X) <= 
     cryptotypes__algorithmt__pos(Y) & X <= Y are_interchangeable 
     if [cryptotypes__rsa <= X, X <= cryptotypes__ripemd160_rsa, 
     cryptotypes__rsa <= Y, Y <= cryptotypes__ripemd160_rsa].
extract_rules(141): cryptotypes__algorithmt__val(X) <= 
     cryptotypes__algorithmt__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 10, 0 <= Y, Y <= 10].
extract_rules(142): certtypes__rawcertificatei__size >= 0 may_be_deduced.
extract_rules(143): certtypes__rawcertificatei__first may_be_replaced_by 1.
extract_rules(144): certtypes__rawcertificatei__last may_be_replaced_by 4096.
extract_rules(145): certtypes__rawcertificatei__base__first may_be_replaced_by -2147483648.
extract_rules(146): certtypes__rawcertificatei__base__last may_be_replaced_by 2147483647.
extract_rules(147): certtypes__serialnumbert__size >= 0 may_be_deduced.
extract_rules(148): certtypes__serialnumbert__first may_be_replaced_by 0.
extract_rules(149): certtypes__serialnumbert__last may_be_replaced_by 4294967295.
extract_rules(150): certtypes__serialnumbert__base__first <= 
     certtypes__serialnumbert__base__last may_be_deduced.
extract_rules(151): certtypes__serialnumbert__base__first <= 
     certtypes__serialnumbert__first may_be_deduced.
extract_rules(152): certtypes__serialnumbert__base__last >= 
     certtypes__serialnumbert__last may_be_deduced.
extract_rules(153): certtypes__idt__size >= 0 may_be_deduced.
extract_rules(154): A = B may_be_deduced_from
     [goal(checktype(A,certtypes__idt)),
      goal(checktype(B,certtypes__idt)),
      fld_issuer(A) = fld_issuer(B),
      fld_serialnumber(A) = fld_serialnumber(B)].
extract_rules(155): certprocessing__timet__size >= 0 may_be_deduced.
extract_rules(156): A = B may_be_deduced_from
     [goal(checktype(A,certprocessing__timet)),
      goal(checktype(B,certprocessing__timet)),
      fld_year(A) = fld_year(B),
      fld_month(A) = fld_month(B),
      fld_day(A) = fld_day(B),
      fld_hour(A) = fld_hour(B),
      fld_minute(A) = fld_minute(B)].
extract_rules(157): certprocessing__validityt__size >= 0 may_be_deduced.
extract_rules(158): A = B may_be_deduced_from
     [goal(checktype(A,certprocessing__validityt)),
      goal(checktype(B,certprocessing__validityt)),
      fld_notbefore(A) = fld_notbefore(B),
      fld_notafter(A) = fld_notafter(B)].
extract_rules(159): certprocessing__privileget__size >= 0 may_be_deduced.
extract_rules(160): A = B may_be_deduced_from
     [goal(checktype(A,certprocessing__privileget)),
      goal(checktype(B,certprocessing__privileget)),
      fld_role(A) = fld_role(B),
      fld_class(A) = fld_class(B)].
extract_rules(161): certprocessing__authcertdatat__size >= 0 may_be_deduced.
extract_rules(162): A = B may_be_deduced_from
     [goal(checktype(A,certprocessing__authcertdatat)),
      goal(checktype(B,certprocessing__authcertdatat)),
      fld_holder(A) = fld_holder(B),
      fld_issuer(A) = fld_issuer(B),
      fld_sigalgid(A) = fld_sigalgid(B),
      fld_serialnumber(A) = fld_serialnumber(B),
      fld_attcertvalidity(A) = fld_attcertvalidity(B),
      fld_privilege(A) = fld_privilege(B)].
extract_rules(163): cert__contentst__size >= 0 may_be_deduced.
extract_rules(164): A = B may_be_deduced_from
     [goal(checktype(A,cert__contentst)),
      goal(checktype(B,cert__contentst)),
      fld_id(A) = fld_id(B),
      fld_notbefore(A) = fld_notbefore(B),
      fld_notafter(A) = fld_notafter(B),
      fld_mechanism(A) = fld_mechanism(B)].
extract_rules(165): cert__attr__contentst__size >= 0 may_be_deduced.
extract_rules(166): A = B may_be_deduced_from
     [goal(checktype(A,cert__attr__contentst)),
      goal(checktype(B,cert__attr__contentst)),
      fld_inherit(A) = fld_inherit(B),
      fld_basecertid(A) = fld_basecertid(B)].
extract_rules(167): contentst__size >= 0 may_be_deduced.
extract_rules(168): A = B may_be_deduced_from
     [goal(checktype(A,contentst)),
      goal(checktype(B,contentst)),
      fld_inherit(A) = fld_inherit(B),
      fld_role(A) = fld_role(B),
      fld_clearance(A) = fld_clearance(B)].
