           *******************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 05-SEP-2011 15:33:24.54

                       procedure UserEntry.UnlockDoor




For path(s) from start to run-time check associated with statement of line 913:

procedure_unlockdoor_1.
H1:    status = waitingremovetokensuccess .
H2:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H3:    status >= statust__first .
H4:    status <= statust__last .
H5:    true .
H6:    not (usertoken__ispresent(usertoken__state)) .
H7:    (latch__islocked(latch__state__1) and ((
           door__thecurrentdoor(door__state__1) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(door__state__1)))) <-> (
           door__thedooralarm(door__state__1) = 
           alarmtypes__alarming) .
H8:    latch__islocked(latch__state__1) <-> 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), latch__prf_latchtimeout(latch__state__1)) .
        ->
C1:    display__doorunlocked >= display__msgt__first .
C2:    display__doorunlocked <= display__msgt__last .
 

For path(s) from start to run-time check associated with statement of line 914:

procedure_unlockdoor_2.
H1:    status = waitingremovetokensuccess .
H2:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H3:    status >= statust__first .
H4:    status <= statust__last .
H5:    true .
H6:    not (usertoken__ispresent(usertoken__state)) .
H7:    (latch__islocked(latch__state__1) and ((
           door__thecurrentdoor(door__state__1) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(door__state__1)))) <-> (
           door__thedooralarm(door__state__1) = 
           alarmtypes__alarming) .
H8:    latch__islocked(latch__state__1) <-> 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), latch__prf_latchtimeout(latch__state__1)) .
H9:    display__doorunlocked >= display__msgt__first .
H10:   display__doorunlocked <= display__msgt__last .
        ->
C1:    quiescent >= statust__first .
C2:    quiescent <= statust__last .
 

For path(s) from start to run-time check associated with statement of line 924:

procedure_unlockdoor_3.
H1:    status = waitingremovetokensuccess .
H2:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H3:    status >= statust__first .
H4:    status <= statust__last .
H5:    true .
H6:    not (not (usertoken__ispresent(usertoken__state))) .
H7:    true .
H8:    true .
H9:    clock__greaterthan(clock__thecurrenttime(
           clock__currenttime), tokenremovaltimeout) .
H10:   for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(
           usertoken__extractuser(usertoken__state), [i___1]) >= 
           character__first) and (element(
           usertoken__extractuser(usertoken__state), [i___1]) <= 
           character__last))) .
        ->
C1:    audittypes__warning >= audittypes__severityt__first .
C2:    audittypes__warning <= audittypes__severityt__last .
C3:    audittypes__entrytimeout >= audittypes__elementt__first .
C4:    audittypes__entrytimeout <= audittypes__elementt__last .
 

For path(s) from start to run-time check associated with statement of line 931:

procedure_unlockdoor_4.
H1:    status = waitingremovetokensuccess .
H2:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H3:    status >= statust__first .
H4:    status <= statust__last .
H5:    true .
H6:    not (not (usertoken__ispresent(usertoken__state))) .
H7:    true .
H8:    true .
H9:    clock__greaterthan(clock__thecurrenttime(
           clock__currenttime), tokenremovaltimeout) .
H10:   for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(
           usertoken__extractuser(usertoken__state), [i___1]) >= 
           character__first) and (element(
           usertoken__extractuser(usertoken__state), [i___1]) <= 
           character__last))) .
H11:   audittypes__warning >= audittypes__severityt__first .
H12:   audittypes__warning <= audittypes__severityt__last .
H13:   audittypes__entrytimeout >= audittypes__elementt__first .
H14:   audittypes__entrytimeout <= audittypes__elementt__last .
        ->
C1:    display__removetoken >= display__msgt__first .
C2:    display__removetoken <= display__msgt__last .
 

For path(s) from start to run-time check associated with statement of line 932:

procedure_unlockdoor_5.
H1:    status = waitingremovetokensuccess .
H2:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H3:    status >= statust__first .
H4:    status <= statust__last .
H5:    true .
H6:    not (not (usertoken__ispresent(usertoken__state))) .
H7:    true .
H8:    true .
H9:    clock__greaterthan(clock__thecurrenttime(
           clock__currenttime), tokenremovaltimeout) .
H10:   for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(
           usertoken__extractuser(usertoken__state), [i___1]) >= 
           character__first) and (element(
           usertoken__extractuser(usertoken__state), [i___1]) <= 
           character__last))) .
H11:   audittypes__warning >= audittypes__severityt__first .
H12:   audittypes__warning <= audittypes__severityt__last .
H13:   audittypes__entrytimeout >= audittypes__elementt__first .
H14:   audittypes__entrytimeout <= audittypes__elementt__last .
H15:   display__removetoken >= display__msgt__first .
H16:   display__removetoken <= display__msgt__last .
        ->
C1:    waitingremovetokenfail >= statust__first .
C2:    waitingremovetokenfail <= statust__last .
 

For path(s) from start to finish:

procedure_unlockdoor_6.
H1:    status = waitingremovetokensuccess .
H2:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H3:    status >= statust__first .
H4:    status <= statust__last .
H5:    true .
H6:    not (usertoken__ispresent(usertoken__state)) .
H7:    (latch__islocked(latch__state__1) and ((
           door__thecurrentdoor(door__state__1) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(door__state__1)))) <-> (
           door__thedooralarm(door__state__1) = 
           alarmtypes__alarming) .
H8:    latch__islocked(latch__state__1) <-> 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), latch__prf_latchtimeout(latch__state__1)) .
H9:    display__doorunlocked >= display__msgt__first .
H10:   display__doorunlocked <= display__msgt__last .
H11:   quiescent >= statust__first .
H12:   quiescent <= statust__last .
        ->
C1:    (latch__islocked(latch__state__1) and ((
           door__thecurrentdoor(door__state__1) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(door__state__1)))) <-> (
           door__thedooralarm(door__state__1) = 
           alarmtypes__alarming) .
C2:    (latch__islocked(latch__state) and (not (
           latch__islocked(latch__state__1)))) <-> 
           prf_userentryunlockdoor .
 

procedure_unlockdoor_7.
H1:    status = waitingremovetokensuccess .
H2:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H3:    status >= statust__first .
H4:    status <= statust__last .
H5:    true .
H6:    not (not (usertoken__ispresent(usertoken__state))) .
H7:    true .
H8:    true .
H9:    clock__greaterthan(clock__thecurrenttime(
           clock__currenttime), tokenremovaltimeout) .
H10:   for_all(i___1: integer, ((i___1 >= 
           audittypes__usertexti__first) and (i___1 <= 
           audittypes__usertexti__last)) -> ((element(
           usertoken__extractuser(usertoken__state), [i___1]) >= 
           character__first) and (element(
           usertoken__extractuser(usertoken__state), [i___1]) <= 
           character__last))) .
H11:   audittypes__warning >= audittypes__severityt__first .
H12:   audittypes__warning <= audittypes__severityt__last .
H13:   audittypes__entrytimeout >= audittypes__elementt__first .
H14:   audittypes__entrytimeout <= audittypes__elementt__last .
H15:   display__removetoken >= display__msgt__first .
H16:   display__removetoken <= display__msgt__last .
H17:   waitingremovetokenfail >= statust__first .
H18:   waitingremovetokenfail <= statust__last .
        ->
C1:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
C2:    (latch__islocked(latch__state) and (not (
           latch__islocked(latch__state)))) <-> 
           prf_userentryunlockdoor .
 

procedure_unlockdoor_8.
H1:    status = waitingremovetokensuccess .
H2:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
H3:    status >= statust__first .
H4:    status <= statust__last .
H5:    true .
H6:    not (not (usertoken__ispresent(usertoken__state))) .
H7:    true .
H8:    true .
H9:    not (clock__greaterthan(clock__thecurrenttime(
           clock__currenttime), tokenremovaltimeout)) .
        ->
C1:    (latch__islocked(latch__state) and ((
           door__thecurrentdoor(door__state) = door__open) and 
           clock__greaterthanorequal(clock__thecurrenttime(
           clock__currenttime), door__prf_alarmtimeout(
           door__state)))) <-> (door__thedooralarm(
           door__state) = alarmtypes__alarming) .
C2:    (latch__islocked(latch__state) and (not (
           latch__islocked(latch__state)))) <-> 
           prf_userentryunlockdoor .
 

