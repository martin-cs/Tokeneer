*****************************************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
*****************************************************************************


CREATED 05-SEP-2011, 15:33:28  SIMPLIFIED 05-SEP-2011, 15:39:53

SPARK Simplifier GPL 2011
Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.

procedure ConfigData.ValidateFile.ReadAccessPolicy






@@@@@@@@@@  VC: procedure_readaccesspolicy_1.  @@@@@@@@@@
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  true
***  Proved C1:  true
-S-  Applied substitution rule readaccesspo_rules(28).
     This was achieved by replacing all occurrences of accesspolicyt__first by:
          workinghours.
<S>  New C2:  workinghours <= accesspolicyt__last
-S-  Applied substitution rule readaccesspo_rules(29).
     This was achieved by replacing all occurrences of accesspolicyt__last by:
          allhours.
<S>  New C2:  true
***  Proved C2:  true
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_2.  @@@@@@@@@@
%%%  Simplified H2 on reading formula in, to give:
     %%%  H2:  true
%%%  Simplified H4 on reading formula in, to give:
     %%%  H4:  for_all(i___1 : integer, accesspolicytexti__first <= i___1 and 
          i___1 <= accesspolicytexti__last -> character__first <= element(
          thetitle__1, [i___1]) and element(thetitle__1, [i___1]) <= 
          character__last)
***  Proved C1:  stop__1 >= natural__first
     using hypothesis H5.
***  Proved C2:  stop__1 <= natural__last
     using hypothesis H6.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_3.  @@@@@@@@@@
%%%  Simplified H2 on reading formula in, to give:
     %%%  H2:  true
%%%  Simplified H4 on reading formula in, to give:
     %%%  H4:  for_all(i___1 : integer, accesspolicytexti__first <= i___1 and 
          i___1 <= accesspolicytexti__last -> character__first <= element(
          thetitle__1, [i___1]) and element(thetitle__1, [i___1]) <= 
          character__last)
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H4).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H5)
          .
---  Hypothesis H11 has been replaced by "true".  (It is already present, as H6)
          .
%%%  Simplified H14 on reading formula in, to give:
     %%%  H14:  for_all(i___1 : integer, accesstexti__first <= i___1 and i___1 
          <= accesstexti__last -> character__first <= element(
          rawaccesspolicy__2, [i___1]) and element(rawaccesspolicy__2, [i___1]) 
          <= character__last)
***  Proved C1:  stop__2 >= natural__first
     using hypothesis H15.
***  Proved C2:  stop__2 <= natural__last
     using hypothesis H16.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_4.  @@@@@@@@@@
%%%  Simplified H2 on reading formula in, to give:
     %%%  H2:  true
%%%  Simplified H4 on reading formula in, to give:
     %%%  H4:  for_all(i___1 : integer, accesspolicytexti__first <= i___1 and 
          i___1 <= accesspolicytexti__last -> character__first <= element(
          thetitle__1, [i___1]) and element(thetitle__1, [i___1]) <= 
          character__last)
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H5).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H4).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H5)
          .
---  Hypothesis H11 has been replaced by "true".  (It is already present, as H6)
          .
%%%  Simplified H14 on reading formula in, to give:
     %%%  H14:  for_all(i___1 : integer, accesstexti__first <= i___1 and i___1 
          <= accesstexti__last -> character__first <= element(
          rawaccesspolicy__2, [i___1]) and element(rawaccesspolicy__2, [i___1]) 
          <= character__last)
---  Hypothesis H17 has been replaced by "true".  (It is already present, as 
          H15).
---  Hypothesis H18 has been replaced by "true".  (It is already present, as 
          H16).
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  true
%%%  Simplified C3 on reading formula in, to give:
     %%%  C3:  true
%%%  Simplified C5 on reading formula in, to give:
     %%%  C5:  true
***  Proved C1:  true
***  Proved C2:  accesspolicyt__first <= accesspolicyt__last
     using hypothesis H3.
***  Proved C3:  true
***  Proved C4:  accesspolicyt__first <= accesspolicyt__last
     using hypothesis H3.
***  Proved C5:  true
***  Proved C6:  accesspolicyt__first <= accesspolicyt__last
     using hypothesis H3.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_5.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H3 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H4 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H5 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H6 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  accesspolicyt__first <= succ(loop__1__ap)
%%%  Simplified C3 on reading formula in, to give:
     %%%  C3:  accesspolicyt__first <= succ(loop__1__ap)
%%%  Simplified C5 on reading formula in, to give:
     %%%  C5:  accesspolicyt__first <= succ(loop__1__ap)
-S-  Applied substitution rule readaccesspo_rules(28).
     This was achieved by replacing all occurrences of accesspolicyt__first by:
          workinghours.
<S>  New H1:  workinghours <= loop__1__ap
<S>  New C1:  workinghours <= succ(loop__1__ap)
<S>  New C3:  workinghours <= succ(loop__1__ap)
<S>  New C5:  workinghours <= succ(loop__1__ap)
-S-  Applied substitution rule readaccesspo_rules(29).
     This was achieved by replacing all occurrences of accesspolicyt__last by:
          allhours.
<S>  New H2:  loop__1__ap <= allhours
<S>  New H14:  not loop__1__ap = allhours
<S>  New C2:  loop__1__ap <= workinghours
<S>  New C4:  loop__1__ap <= workinghours
<S>  New C6:  loop__1__ap <= workinghours
***  Proved C1:  workinghours <= succ(loop__1__ap)
     using hypotheses H1 & H14.
***  Proved C3:  workinghours <= succ(loop__1__ap)
     using hypotheses H1 & H14.
***  Proved C5:  workinghours <= succ(loop__1__ap)
     using hypotheses H1 & H14.
***  Proved C2:  loop__1__ap <= workinghours
     using hypothesis H[14].
***  Proved C4:  loop__1__ap <= workinghours
     using hypothesis H[14].
***  Proved C6:  loop__1__ap <= workinghours
     using hypothesis H[14].
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_6.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H5 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H6 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H17 has been replaced by "true".  (It is already present, as H9)
          .
---  Hypothesis H18 has been replaced by "true".  (It is already present, as 
          H10).
%%%  Simplified H21 on reading formula in, to give:
     %%%  H21:  false
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  accesspolicyt__first <= succ(loop__1__ap)
%%%  Simplified C3 on reading formula in, to give:
     %%%  C3:  accesspolicyt__first <= succ(loop__1__ap)
%%%  Simplified C5 on reading formula in, to give:
     %%%  C5:  accesspolicyt__first <= succ(loop__1__ap)
-S-  Applied substitution rule readaccesspo_rules(28).
     This was achieved by replacing all occurrences of accesspolicyt__first by:
          workinghours.
<S>  New H1:  workinghours <= loop__1__ap
<S>  New C1:  workinghours <= succ(loop__1__ap)
<S>  New C3:  workinghours <= succ(loop__1__ap)
<S>  New C5:  workinghours <= succ(loop__1__ap)
-S-  Applied substitution rule readaccesspo_rules(29).
     This was achieved by replacing all occurrences of accesspolicyt__last by:
          allhours.
<S>  New H2:  loop__1__ap <= allhours
<S>  New H22:  not loop__1__ap = allhours
<S>  New C2:  loop__1__ap <= workinghours
<S>  New C4:  loop__1__ap <= workinghours
<S>  New C6:  loop__1__ap <= workinghours
***  Proved C1:  workinghours <= succ(loop__1__ap)
     using hypotheses H1 & H22.
***  Proved C3:  workinghours <= succ(loop__1__ap)
     using hypotheses H1 & H22.
***  Proved C5:  workinghours <= succ(loop__1__ap)
     using hypotheses H1 & H22.
***  Proved C2:  loop__1__ap <= workinghours
     using hypothesis H[22].
***  Proved C4:  loop__1__ap <= workinghours
     using hypothesis H[22].
***  Proved C6:  loop__1__ap <= workinghours
     using hypothesis H[22].
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_7.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H15 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H16 has been replaced by "true".  (It is already present, as H2)
          .
---  Hypothesis H17 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H18 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified H19 on reading formula in, to give:
     %%%  H19:  for_all(i___1 : integer, accesstexti__first <= i___1 and i___1 
          <= accesstexti__last -> character__first <= element(rawaccesspolicy, [
          i___1]) and element(rawaccesspolicy, [i___1]) <= character__last)
---  Hypothesis H20 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H21 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H22 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H23 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H24 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H25 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified H28 on reading formula in, to give:
     %%%  H28:  true
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  accesspolicyt__first <= succ(loop__1__ap)
%%%  Simplified C3 on reading formula in, to give:
     %%%  C3:  accesspolicyt__first <= succ(loop__1__ap)
%%%  Simplified C5 on reading formula in, to give:
     %%%  C5:  accesspolicyt__first <= succ(loop__1__ap)
-S-  Applied substitution rule readaccesspo_rules(28).
     This was achieved by replacing all occurrences of accesspolicyt__first by:
          workinghours.
<S>  New H1:  workinghours <= loop__1__ap
<S>  New C1:  workinghours <= succ(loop__1__ap)
<S>  New C3:  workinghours <= succ(loop__1__ap)
<S>  New C5:  workinghours <= succ(loop__1__ap)
-S-  Applied substitution rule readaccesspo_rules(29).
     This was achieved by replacing all occurrences of accesspolicyt__last by:
          allhours.
<S>  New H2:  loop__1__ap <= allhours
<S>  New H29:  not loop__1__ap = allhours
<S>  New C2:  loop__1__ap <= workinghours
<S>  New C4:  loop__1__ap <= workinghours
<S>  New C6:  loop__1__ap <= workinghours
***  Proved C1:  workinghours <= succ(loop__1__ap)
     using hypotheses H1 & H29.
***  Proved C3:  workinghours <= succ(loop__1__ap)
     using hypotheses H1 & H29.
***  Proved C5:  workinghours <= succ(loop__1__ap)
     using hypotheses H1 & H29.
***  Proved C2:  loop__1__ap <= workinghours
     using hypothesis H[29].
***  Proved C4:  loop__1__ap <= workinghours
     using hypothesis H[29].
***  Proved C6:  loop__1__ap <= workinghours
     using hypothesis H[29].
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_8.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H15 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H16 has been replaced by "true".  (It is already present, as H2)
          .
---  Hypothesis H17 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H18 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified H19 on reading formula in, to give:
     %%%  H19:  for_all(i___1 : integer, accesstexti__first <= i___1 and i___1 
          <= accesstexti__last -> character__first <= element(rawaccesspolicy, [
          i___1]) and element(rawaccesspolicy, [i___1]) <= character__last)
---  Hypothesis H20 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H21 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H22 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H23 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H24 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H25 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  accesspolicyt__first <= succ(loop__1__ap)
%%%  Simplified C3 on reading formula in, to give:
     %%%  C3:  accesspolicyt__first <= succ(loop__1__ap)
%%%  Simplified C5 on reading formula in, to give:
     %%%  C5:  accesspolicyt__first <= succ(loop__1__ap)
-S-  Applied substitution rule readaccesspo_rules(28).
     This was achieved by replacing all occurrences of accesspolicyt__first by:
          workinghours.
<S>  New H1:  workinghours <= loop__1__ap
<S>  New C1:  workinghours <= succ(loop__1__ap)
<S>  New C3:  workinghours <= succ(loop__1__ap)
<S>  New C5:  workinghours <= succ(loop__1__ap)
-S-  Applied substitution rule readaccesspo_rules(29).
     This was achieved by replacing all occurrences of accesspolicyt__last by:
          allhours.
<S>  New H2:  loop__1__ap <= allhours
<S>  New H30:  not loop__1__ap = allhours
<S>  New C2:  loop__1__ap <= workinghours
<S>  New C4:  loop__1__ap <= workinghours
<S>  New C6:  loop__1__ap <= workinghours
***  Proved C1:  workinghours <= succ(loop__1__ap)
     using hypotheses H1 & H30.
***  Proved C3:  workinghours <= succ(loop__1__ap)
     using hypotheses H1 & H30.
***  Proved C5:  workinghours <= succ(loop__1__ap)
     using hypotheses H1 & H30.
***  Proved C2:  loop__1__ap <= workinghours
     using hypothesis H[30].
***  Proved C4:  loop__1__ap <= workinghours
     using hypothesis H[30].
***  Proved C6:  loop__1__ap <= workinghours
     using hypothesis H[30].
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_9.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H3 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H4 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H5 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H6 has been replaced by "true".  (It is already present, as H2).
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  accesspolicyt__first <= loop__1__ap
***  Proved C1:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C2:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_10.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H3 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H4 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H5 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H6 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  accesspolicyt__first <= loop__1__ap
%%%  Simplified C5 on reading formula in, to give:
     %%%  C5:  accesspolicyt__first <= loop__1__ap
%%%  Simplified C7 on reading formula in, to give:
     %%%  C7:  accesspolicyt__first <= loop__1__ap
***  Proved C1:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C2:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
***  Proved C5:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C6:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
***  Proved C7:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C8:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
-S-  Applied substitution rule readaccesspo_rules(56).
     This was achieved by replacing all occurrences of accesstexti__first by:
          1.
<S>  New C3:  stop >= 1
-S-  Applied substitution rule readaccesspo_rules(57).
     This was achieved by replacing all occurrences of accesstexti__last by:
          12.
<S>  New C4:  stop <= 12
-S-  Applied substitution rule readaccesspo_rules(18).
     This was achieved by replacing all occurrences of natural__first by:
          0.
<S>  New H7:  stop >= 0
-S-  Applied substitution rule readaccesspo_rules(19).
     This was achieved by replacing all occurrences of natural__last by:
          2147483647.
<S>  New H8:  stop <= 2147483647
-S-  Applied substitution rule readaccesspo_rules(28).
     This was achieved by replacing all occurrences of accesspolicyt__first by:
          workinghours.
<S>  New H1:  workinghours <= loop__1__ap
-S-  Applied substitution rule readaccesspo_rules(29).
     This was achieved by replacing all occurrences of accesspolicyt__last by:
          allhours.
<S>  New H2:  loop__1__ap <= allhours
---  Eliminated hypothesis H3 (true-hypothesis).
---  Eliminated hypothesis H4 (true-hypothesis).
---  Eliminated hypothesis H5 (true-hypothesis).
---  Eliminated hypothesis H6 (true-hypothesis).
---  Eliminated hypothesis H9 (true-hypothesis).
---  Eliminated hypothesis H10 (true-hypothesis).
-S-  Eliminated hypothesis H11.
     This was achieved by replacing all occurrences of stop by:
          fld_length(element(accessstringlookup, [loop__1__ap])).
<S>  New H7:  fld_length(element(accessstringlookup, [loop__1__ap])) >= 0
<S>  New H8:  fld_length(element(accessstringlookup, [loop__1__ap])) <= 
          2147483647
<S>  New C3:  fld_length(element(accessstringlookup, [loop__1__ap])) >= 1
<S>  New C4:  fld_length(element(accessstringlookup, [loop__1__ap])) <= 12
***  Proved C3:  fld_length(element(accessstringlookup, [loop__1__ap])) >= 1
     using hypotheses H1 & H2.
***  Proved C4:  fld_length(element(accessstringlookup, [loop__1__ap])) <= 12
     using hypotheses H1 & H2.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_11.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H5 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H6 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H2).
-S-  Applied substitution rule readaccesspo_rules(8).
     This was achieved by replacing all occurrences of integer__first by:
          - 2147483648.
<S>  New C1:  stop >= - 2147483648
<S>  New C3:  true
-S-  Applied substitution rule readaccesspo_rules(9).
     This was achieved by replacing all occurrences of integer__last by:
          2147483647.
<S>  New C2:  stop <= 2147483647
<S>  New C4:  true
***  Proved C3:  true
***  Proved C4:  true
-S-  Applied substitution rule readaccesspo_rules(18).
     This was achieved by replacing all occurrences of natural__first by:
          0.
<S>  New H9:  stop >= 0
-S-  Applied substitution rule readaccesspo_rules(19).
     This was achieved by replacing all occurrences of natural__last by:
          2147483647.
<S>  New H10:  stop <= 2147483647
-S-  Applied substitution rule readaccesspo_rules(28).
     This was achieved by replacing all occurrences of accesspolicyt__first by:
          workinghours.
<S>  New H1:  workinghours <= loop__1__ap
-S-  Applied substitution rule readaccesspo_rules(29).
     This was achieved by replacing all occurrences of accesspolicyt__last by:
          allhours.
<S>  New H2:  loop__1__ap <= allhours
-S-  Applied substitution rule readaccesspo_rules(56).
     This was achieved by replacing all occurrences of accesstexti__first by:
          1.
<S>  New H3:  stop >= 1
-S-  Applied substitution rule readaccesspo_rules(57).
     This was achieved by replacing all occurrences of accesstexti__last by:
          12.
<S>  New H4:  stop <= 12
***  Proved C1:  stop >= - 2147483648
     using hypothesis H9.
***  Proved C2:  stop <= 2147483647
     using hypothesis H10.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_12.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H5 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H6 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H2).
***  Proved C1:  1 <= stop -> stop >= accesstexti__first and stop <= 
          accesstexti__last
     using hypotheses H3 & H4.
-S-  Applied substitution rule readaccesspo_rules(8).
     This was achieved by replacing all occurrences of integer__first by:
          - 2147483648.
<S>  New H11:  stop >= - 2147483648
<S>  New H13:  true
-S-  Applied substitution rule readaccesspo_rules(9).
     This was achieved by replacing all occurrences of integer__last by:
          2147483647.
<S>  New H12:  stop <= 2147483647
<S>  New H14:  true
-S-  Applied substitution rule readaccesspo_rules(18).
     This was achieved by replacing all occurrences of natural__first by:
          0.
<S>  New H9:  stop >= 0
-S-  Applied substitution rule readaccesspo_rules(19).
     This was achieved by replacing all occurrences of natural__last by:
          2147483647.
<S>  New H10:  stop <= 2147483647
-S-  Applied substitution rule readaccesspo_rules(28).
     This was achieved by replacing all occurrences of accesspolicyt__first by:
          workinghours.
<S>  New H1:  workinghours <= loop__1__ap
-S-  Applied substitution rule readaccesspo_rules(29).
     This was achieved by replacing all occurrences of accesspolicyt__last by:
          allhours.
<S>  New H2:  loop__1__ap <= allhours
-S-  Applied substitution rule readaccesspo_rules(56).
     This was achieved by replacing all occurrences of accesstexti__first by:
          1.
<S>  New H3:  stop >= 1
<S>  New C2:  1 <= stop -> 1 <= accesstexti__last
-S-  Applied substitution rule readaccesspo_rules(57).
     This was achieved by replacing all occurrences of accesstexti__last by:
          12.
<S>  New H4:  stop <= 12
<S>  New C2:  true
***  Proved C2:  true
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_13.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H5 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H6 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H17 has been replaced by "true".  (It is already present, as H9)
          .
---  Hypothesis H18 has been replaced by "true".  (It is already present, as 
          H10).
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  accesspolicyt__first <= loop__1__ap
%%%  Simplified C5 on reading formula in, to give:
     %%%  C5:  true
%%%  Simplified C11 on reading formula in, to give:
     %%%  C11:  true
%%%  Simplified C15 on reading formula in, to give:
     %%%  C15:  accesspolicyt__first <= loop__1__ap
%%%  Simplified C17 on reading formula in, to give:
     %%%  C17:  accesspolicyt__first <= loop__1__ap
***  Proved C1:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C2:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
***  Proved C3:  stop >= accesstexti__first
     using hypothesis H3.
***  Proved C4:  stop <= accesstexti__last
     using hypothesis H4.
***  Proved C5:  true
***  Proved C7:  1 <= accesstexti__last
     using hypotheses H4 & H19.
***  Proved C8:  1 <= stop
     using hypothesis H19.
***  Proved C10:  1 <= accesstexti__last
     using hypotheses H4 & H19.
***  Proved C11:  true
***  Proved C12:  1 <= stop
     using hypothesis H19.
***  Proved C13:  stop >= natural__first
     using hypothesis H9.
***  Proved C14:  stop <= natural__last
     using hypothesis H10.
***  Proved C15:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C16:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
***  Proved C17:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C18:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
-S-  Applied substitution rule readaccesspo_rules(56).
     This was achieved by replacing all occurrences of accesstexti__first by:
          1.
<S>  New H3:  stop >= 1
<S>  New H15:  1 <= stop -> stop >= 1 and stop <= accesstexti__last
<S>  New H16:  1 <= stop -> 1 <= accesstexti__last
<S>  New C6:  true
<S>  New C9:  true
***  Proved C6:  true
***  Proved C9:  true
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_14.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H15 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H16 has been replaced by "true".  (It is already present, as H2)
          .
---  Hypothesis H17 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H18 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified H19 on reading formula in, to give:
     %%%  H19:  for_all(i___1 : integer, accesstexti__first <= i___1 and i___1 
          <= accesstexti__last -> character__first <= element(rawaccesspolicy, [
          i___1]) and element(rawaccesspolicy, [i___1]) <= character__last)
---  Hypothesis H20 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H21 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H22 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H23 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H24 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H25 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  accesspolicyt__first <= loop__1__ap
%%%  Simplified C11 on reading formula in, to give:
     %%%  C11:  loop__2__i >= 0
%%%  Simplified C15 on reading formula in, to give:
     %%%  C15:  accesspolicyt__first <= loop__1__ap
%%%  Simplified C17 on reading formula in, to give:
     %%%  C17:  accesspolicyt__first <= loop__1__ap
***  Proved C1:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C2:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
***  Proved C3:  stop >= accesstexti__first
     using hypothesis H3.
***  Proved C4:  stop <= accesstexti__last
     using hypothesis H4.
***  Proved C5:  stop = stop__entry__loop__2
     using hypothesis H5.
***  Proved C6:  loop__2__i + 1 >= accesstexti__first
     using hypothesis H6.
***  Proved C9:  loop__2__i + 1 >= accesstexti__first
     using hypothesis H6.
***  Proved C11:  loop__2__i >= 0
     using hypothesis H11.
***  Proved C13:  stop__entry__loop__2 >= natural__first
     using hypothesis H13.
***  Proved C14:  stop__entry__loop__2 <= natural__last
     using hypothesis H14.
***  Proved C15:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C16:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
***  Proved C17:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C18:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
-S-  Applied substitution rule readaccesspo_rules(57).
     This was achieved by replacing all occurrences of accesstexti__last by:
          12.
<S>  New H4:  stop <= 12
<S>  New H7:  loop__2__i <= 12
<S>  New H19:  for_all(i___1 : integer, accesstexti__first <= i___1 and i___1 
          <= 12 -> character__first <= element(rawaccesspolicy, [i___1]) and 
          element(rawaccesspolicy, [i___1]) <= character__last)
<S>  New C7:  loop__2__i <= 11
<S>  New C10:  loop__2__i <= 11
>>>  Restructured hypothesis H26 into:
     >>>  H26:  element(fld_text(element(accessstringlookup, [loop__1__ap])), [
          loop__2__i]) = element(rawaccesspolicy, [loop__2__i])
>>>  Restructured hypothesis H27 into:
     >>>  H27:  loop__2__i <> stop__entry__loop__2
-S-  Applied substitution rule readaccesspo_rules(13).
     This was achieved by replacing all occurrences of character__first by:
          0.
<S>  New H19:  for_all(i___1 : integer, accesstexti__first <= i___1 and i___1 
          <= 12 -> 0 <= element(rawaccesspolicy, [i___1]) and element(
          rawaccesspolicy, [i___1]) <= character__last)
-S-  Applied substitution rule readaccesspo_rules(14).
     This was achieved by replacing all occurrences of character__last by:
          255.
<S>  New H19:  for_all(i___1 : integer, accesstexti__first <= i___1 and i___1 
          <= 12 -> 0 <= element(rawaccesspolicy, [i___1]) and element(
          rawaccesspolicy, [i___1]) <= 255)
-S-  Applied substitution rule readaccesspo_rules(18).
     This was achieved by replacing all occurrences of natural__first by:
          0.
<S>  New H13:  stop__entry__loop__2 >= 0
-S-  Applied substitution rule readaccesspo_rules(19).
     This was achieved by replacing all occurrences of natural__last by:
          2147483647.
<S>  New H14:  stop__entry__loop__2 <= 2147483647
-S-  Applied substitution rule readaccesspo_rules(28).
     This was achieved by replacing all occurrences of accesspolicyt__first by:
          workinghours.
<S>  New H1:  workinghours <= loop__1__ap
-S-  Applied substitution rule readaccesspo_rules(29).
     This was achieved by replacing all occurrences of accesspolicyt__last by:
          allhours.
<S>  New H2:  loop__1__ap <= allhours
-S-  Applied substitution rule readaccesspo_rules(56).
     This was achieved by replacing all occurrences of accesstexti__first by:
          1.
<S>  New H3:  stop >= 1
<S>  New H6:  loop__2__i >= 1
<S>  New H19:  for_all(i___1 : integer, 1 <= i___1 and i___1 <= 12 -> 0 <= 
          element(rawaccesspolicy, [i___1]) and element(rawaccesspolicy, [i___1]
          ) <= 255)
%%%  Hypotheses H12 & H27 together imply that
          loop__2__i < stop__entry__loop__2.
     H12 & H27 have therefore been deleted and a new H28 added to this effect.
***  Proved C8:  loop__2__i + 1 <= stop
     via its standard form, which is:
     Std.Fm C8:  - loop__2__i + stop > 0
     using hypotheses H5 & H28.
***  Proved C12:  loop__2__i + 1 <= stop__entry__loop__2
     via its standard form, which is:
     Std.Fm C12:  - loop__2__i + stop__entry__loop__2 > 0
     using hypothesis H28.
---  Eliminated hypothesis H9 (true-hypothesis).
---  Eliminated hypothesis H10 (true-hypothesis).
---  Eliminated hypothesis H15 (true-hypothesis).
---  Eliminated hypothesis H16 (true-hypothesis).
---  Eliminated hypothesis H17 (true-hypothesis).
---  Eliminated hypothesis H18 (true-hypothesis).
---  Eliminated hypothesis H20 (true-hypothesis).
---  Eliminated hypothesis H21 (true-hypothesis).
---  Eliminated hypothesis H22 (true-hypothesis).
---  Eliminated hypothesis H23 (true-hypothesis).
---  Eliminated hypothesis H24 (true-hypothesis).
---  Eliminated hypothesis H25 (true-hypothesis).
---  Eliminated hypothesis H11 (duplicate of H6).
---  Eliminated hypothesis H3 (redundant, given H5, H6 & H28).
---  Eliminated hypothesis H7 (redundant, given H4, H5 & H28).
---  Eliminated hypothesis H8 (redundant, given H5 & H28).
---  Eliminated hypothesis H13 (redundant, given H6 & H28).
---  Eliminated hypothesis H14 (redundant, given H4 & H5).
-S-  Eliminated hypothesis H5.
     This was achieved by replacing all occurrences of stop by:
          stop__entry__loop__2.
<S>  New H4:  stop__entry__loop__2 <= 12
---  Eliminated conclusion C10, which is a duplicate of C7.
***  Proved C7:  loop__2__i <= 11
     using hypotheses H4 & H28.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_15.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H15 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H16 has been replaced by "true".  (It is already present, as H2)
          .
---  Hypothesis H17 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H18 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified H19 on reading formula in, to give:
     %%%  H19:  for_all(i___1 : integer, accesstexti__first <= i___1 and i___1 
          <= accesstexti__last -> character__first <= element(rawaccesspolicy, [
          i___1]) and element(rawaccesspolicy, [i___1]) <= character__last)
%%%  Simplified C5 on reading formula in, to give:
     %%%  C5:  accesspolicyt__first <= loop__1__ap
***  Proved C1:  loop__2__i >= accesstexti__first
     using hypothesis H6.
***  Proved C2:  loop__2__i <= accesstexti__last
     using hypothesis H7.
***  Proved C3:  loop__2__i >= accesstexti__first
     using hypothesis H6.
***  Proved C4:  loop__2__i <= accesstexti__last
     using hypothesis H7.
***  Proved C5:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C6:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_16.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H3 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H4 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H5 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H6 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  accesspolicyt__first <= loop__1__ap
***  Proved C1:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C2:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_17.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H5 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H6 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H7 has been replaced by "true".  (It is already present, as H1).
---  Hypothesis H8 has been replaced by "true".  (It is already present, as H2).
---  Hypothesis H17 has been replaced by "true".  (It is already present, as H9)
          .
---  Hypothesis H18 has been replaced by "true".  (It is already present, as 
          H10).
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  accesspolicyt__first <= loop__1__ap
***  Proved C1:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C2:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_18.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H15 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H16 has been replaced by "true".  (It is already present, as H2)
          .
---  Hypothesis H17 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H18 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified H19 on reading formula in, to give:
     %%%  H19:  for_all(i___1 : integer, accesstexti__first <= i___1 and i___1 
          <= accesstexti__last -> character__first <= element(rawaccesspolicy, [
          i___1]) and element(rawaccesspolicy, [i___1]) <= character__last)
---  Hypothesis H20 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H21 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H22 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H23 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H24 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H25 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  accesspolicyt__first <= loop__1__ap
***  Proved C1:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C2:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_19.  @@@@@@@@@@
%%%  Simplified H1 on reading formula in, to give:
     %%%  H1:  accesspolicyt__first <= loop__1__ap
---  Hypothesis H9 has been replaced by "true".  (It is already present, as H6).
---  Hypothesis H10 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H15 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H16 has been replaced by "true".  (It is already present, as H2)
          .
---  Hypothesis H17 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H18 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified H19 on reading formula in, to give:
     %%%  H19:  for_all(i___1 : integer, accesstexti__first <= i___1 and i___1 
          <= accesstexti__last -> character__first <= element(rawaccesspolicy, [
          i___1]) and element(rawaccesspolicy, [i___1]) <= character__last)
---  Hypothesis H20 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H21 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H22 has been replaced by "true".  (It is already present, as H6)
          .
---  Hypothesis H23 has been replaced by "true".  (It is already present, as H7)
          .
---  Hypothesis H24 has been replaced by "true".  (It is already present, as H1)
          .
---  Hypothesis H25 has been replaced by "true".  (It is already present, as H2)
          .
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  accesspolicyt__first <= loop__1__ap
***  Proved C1:  accesspolicyt__first <= loop__1__ap
     using hypothesis H1.
***  Proved C2:  loop__1__ap <= accesspolicyt__last
     using hypothesis H2.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_20.  @@@@@@@@@@
***  Proved C1:  true
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_21.  @@@@@@@@@@
***  Proved C1:  true
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_22.  @@@@@@@@@@
***  Proved C1:  true
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_23.  @@@@@@@@@@
***  Proved C1:  true
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_24.  @@@@@@@@@@
***  Proved C1:  true
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_25.  @@@@@@@@@@
***  Proved C1:  true
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_26.  @@@@@@@@@@
***  Proved C1:  true
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_27.  @@@@@@@@@@
***  Proved C1:  true
***  PROVED VC.


@@@@@@@@@@  VC: procedure_readaccesspolicy_28.  @@@@@@@@@@
***  Proved C1:  true
***  PROVED VC.

