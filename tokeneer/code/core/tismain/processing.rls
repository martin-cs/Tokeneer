           /*********************************************************/
                           /*Proof Rule Declarations*/
                              /*Examiner GPL 2011*/
             /*Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.*/
           /*********************************************************/


                        /*DATE : 05-SEP-2011 15:33:31.20*/

                        /*procedure TISMain.Processing*/


rule_family processing_rules:
     X      requires [X:any] &
     X <= Y requires [X:ire, Y:ire] &
     X >= Y requires [X:ire, Y:ire].

processing_rules(1): alarmtypes__statust__size >= 0 may_be_deduced.
processing_rules(2): alarmtypes__statust__first may_be_replaced_by alarmtypes__alarming.
processing_rules(3): alarmtypes__statust__last may_be_replaced_by alarmtypes__silent.
processing_rules(4): alarmtypes__statust__base__first may_be_replaced_by alarmtypes__alarming.
processing_rules(5): alarmtypes__statust__base__last may_be_replaced_by alarmtypes__silent.
processing_rules(6): alarmtypes__statust__pos(alarmtypes__statust__first) may_be_replaced_by 0.
processing_rules(7): alarmtypes__statust__pos(
     alarmtypes__alarming) may_be_replaced_by 0.
processing_rules(8): alarmtypes__statust__val(0) may_be_replaced_by 
     alarmtypes__alarming.
processing_rules(9): alarmtypes__statust__pos(alarmtypes__silent) may_be_replaced_by 1.
processing_rules(10): alarmtypes__statust__val(1) may_be_replaced_by 
     alarmtypes__silent.
processing_rules(11): alarmtypes__statust__pos(
     alarmtypes__statust__last) may_be_replaced_by 1.
processing_rules(12): alarmtypes__statust__pos(succ(X)) may_be_replaced_by 
     alarmtypes__statust__pos(X) + 1
     if [X <=alarmtypes__silent, X <> alarmtypes__silent].
processing_rules(13): alarmtypes__statust__pos(pred(X)) may_be_replaced_by 
     alarmtypes__statust__pos(X) - 1
     if [X >=alarmtypes__alarming, X <> alarmtypes__alarming].
processing_rules(14): alarmtypes__statust__pos(X) >= 0 may_be_deduced_from
     [alarmtypes__alarming <= X, X <= alarmtypes__silent].
processing_rules(15): alarmtypes__statust__pos(X) <= 1 may_be_deduced_from
     [alarmtypes__alarming <= X, X <= alarmtypes__silent].
processing_rules(16): alarmtypes__statust__val(X) >= 
     alarmtypes__alarming may_be_deduced_from
     [0 <= X, X <= 1].
processing_rules(17): alarmtypes__statust__val(X) <= 
     alarmtypes__silent may_be_deduced_from
     [0 <= X, X <= 1].
processing_rules(18): succ(alarmtypes__statust__val(X)) may_be_replaced_by 
     alarmtypes__statust__val(X+1)
     if [0 <= X, X < 1].
processing_rules(19): pred(alarmtypes__statust__val(X)) may_be_replaced_by 
     alarmtypes__statust__val(X-1)
     if [0 < X, X <= 1].
processing_rules(20): alarmtypes__statust__pos(
     alarmtypes__statust__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 1].
processing_rules(21): alarmtypes__statust__val(
     alarmtypes__statust__pos(X)) may_be_replaced_by X
     if [alarmtypes__alarming <= X, X <= alarmtypes__silent].
processing_rules(22): alarmtypes__statust__pos(X) <= 
     alarmtypes__statust__pos(Y) & X <= Y are_interchangeable 
     if [alarmtypes__alarming <= X, X <= alarmtypes__silent, 
     alarmtypes__alarming <= Y, Y <= alarmtypes__silent].
processing_rules(23): alarmtypes__statust__val(X) <= 
     alarmtypes__statust__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 1, 0 <= Y, Y <= 1].
processing_rules(24): privtypes__privileget__size >= 0 may_be_deduced.
processing_rules(25): privtypes__privileget__first may_be_replaced_by privtypes__useronly.
processing_rules(26): privtypes__privileget__last may_be_replaced_by privtypes__securityofficer.
processing_rules(27): privtypes__privileget__base__first may_be_replaced_by privtypes__useronly.
processing_rules(28): privtypes__privileget__base__last may_be_replaced_by privtypes__securityofficer.
processing_rules(29): privtypes__privileget__pos(
     privtypes__privileget__first) may_be_replaced_by 0.
processing_rules(30): privtypes__privileget__pos(
     privtypes__useronly) may_be_replaced_by 0.
processing_rules(31): privtypes__privileget__val(0) may_be_replaced_by 
     privtypes__useronly.
processing_rules(32): privtypes__privileget__pos(privtypes__guard) may_be_replaced_by 1.
processing_rules(33): privtypes__privileget__val(1) may_be_replaced_by 
     privtypes__guard.
processing_rules(34): privtypes__privileget__pos(
     privtypes__auditmanager) may_be_replaced_by 2.
processing_rules(35): privtypes__privileget__val(2) may_be_replaced_by 
     privtypes__auditmanager.
processing_rules(36): privtypes__privileget__pos(
     privtypes__securityofficer) may_be_replaced_by 3.
processing_rules(37): privtypes__privileget__val(3) may_be_replaced_by 
     privtypes__securityofficer.
processing_rules(38): privtypes__privileget__pos(
     privtypes__privileget__last) may_be_replaced_by 3.
processing_rules(39): privtypes__privileget__pos(succ(X)) may_be_replaced_by 
     privtypes__privileget__pos(X) + 1
     if [X <=privtypes__securityofficer, X <> 
     privtypes__securityofficer].
processing_rules(40): privtypes__privileget__pos(pred(X)) may_be_replaced_by 
     privtypes__privileget__pos(X) - 1
     if [X >=privtypes__useronly, X <> privtypes__useronly].
processing_rules(41): privtypes__privileget__pos(X) >= 0 may_be_deduced_from
     [privtypes__useronly <= X, X <= privtypes__securityofficer].
processing_rules(42): privtypes__privileget__pos(X) <= 3 may_be_deduced_from
     [privtypes__useronly <= X, X <= privtypes__securityofficer].
processing_rules(43): privtypes__privileget__val(X) >= 
     privtypes__useronly may_be_deduced_from
     [0 <= X, X <= 3].
processing_rules(44): privtypes__privileget__val(X) <= 
     privtypes__securityofficer may_be_deduced_from
     [0 <= X, X <= 3].
processing_rules(45): succ(privtypes__privileget__val(X)) may_be_replaced_by 
     privtypes__privileget__val(X+1)
     if [0 <= X, X < 3].
processing_rules(46): pred(privtypes__privileget__val(X)) may_be_replaced_by 
     privtypes__privileget__val(X-1)
     if [0 < X, X <= 3].
processing_rules(47): privtypes__privileget__pos(
     privtypes__privileget__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 3].
processing_rules(48): privtypes__privileget__val(
     privtypes__privileget__pos(X)) may_be_replaced_by X
     if [privtypes__useronly <= X, X <= 
     privtypes__securityofficer].
processing_rules(49): privtypes__privileget__pos(X) <= 
     privtypes__privileget__pos(Y) & X <= Y are_interchangeable 
     if [privtypes__useronly <= X, X <= 
     privtypes__securityofficer, privtypes__useronly <= Y, Y <= 
     privtypes__securityofficer].
processing_rules(50): privtypes__privileget__val(X) <= 
     privtypes__privileget__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 3, 0 <= Y, Y <= 3].
processing_rules(51): door__t__size >= 0 may_be_deduced.
processing_rules(52): door__t__first may_be_replaced_by door__open.
processing_rules(53): door__t__last may_be_replaced_by door__closed.
processing_rules(54): door__t__base__first may_be_replaced_by door__open.
processing_rules(55): door__t__base__last may_be_replaced_by door__closed.
processing_rules(56): door__t__pos(door__t__first) may_be_replaced_by 0.
processing_rules(57): door__t__pos(door__open) may_be_replaced_by 0.
processing_rules(58): door__t__val(0) may_be_replaced_by 
     door__open.
processing_rules(59): door__t__pos(door__closed) may_be_replaced_by 1.
processing_rules(60): door__t__val(1) may_be_replaced_by 
     door__closed.
processing_rules(61): door__t__pos(door__t__last) may_be_replaced_by 1.
processing_rules(62): door__t__pos(succ(X)) may_be_replaced_by 
     door__t__pos(X) + 1
     if [X <=door__closed, X <> door__closed].
processing_rules(63): door__t__pos(pred(X)) may_be_replaced_by 
     door__t__pos(X) - 1
     if [X >=door__open, X <> door__open].
processing_rules(64): door__t__pos(X) >= 0 may_be_deduced_from
     [door__open <= X, X <= door__closed].
processing_rules(65): door__t__pos(X) <= 1 may_be_deduced_from
     [door__open <= X, X <= door__closed].
processing_rules(66): door__t__val(X) >= door__open may_be_deduced_from
     [0 <= X, X <= 1].
processing_rules(67): door__t__val(X) <= door__closed may_be_deduced_from
     [0 <= X, X <= 1].
processing_rules(68): succ(door__t__val(X)) may_be_replaced_by 
     door__t__val(X+1)
     if [0 <= X, X < 1].
processing_rules(69): pred(door__t__val(X)) may_be_replaced_by 
     door__t__val(X-1)
     if [0 < X, X <= 1].
processing_rules(70): door__t__pos(door__t__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 1].
processing_rules(71): door__t__val(door__t__pos(X)) may_be_replaced_by X
     if [door__open <= X, X <= door__closed].
processing_rules(72): door__t__pos(X) <= door__t__pos(Y) & X <= Y are_interchangeable 
     if [door__open <= X, X <= door__closed, door__open <= Y, Y <= 
     door__closed].
processing_rules(73): door__t__val(X) <= door__t__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 1, 0 <= Y, Y <= 1].
processing_rules(74): admin__opandnullt__size >= 0 may_be_deduced.
processing_rules(75): admin__opandnullt__first may_be_replaced_by admin__nullop.
processing_rules(76): admin__opandnullt__last may_be_replaced_by admin__shutdownop.
processing_rules(77): admin__opandnullt__base__first may_be_replaced_by admin__nullop.
processing_rules(78): admin__opandnullt__base__last may_be_replaced_by admin__shutdownop.
processing_rules(79): admin__opandnullt__pos(admin__opandnullt__first) may_be_replaced_by 0.
processing_rules(80): admin__opandnullt__pos(admin__nullop) may_be_replaced_by 0.
processing_rules(81): admin__opandnullt__val(0) may_be_replaced_by 
     admin__nullop.
processing_rules(82): admin__opandnullt__pos(admin__archivelog) may_be_replaced_by 1.
processing_rules(83): admin__opandnullt__val(1) may_be_replaced_by 
     admin__archivelog.
processing_rules(84): admin__opandnullt__pos(
     admin__updateconfigdata) may_be_replaced_by 2.
processing_rules(85): admin__opandnullt__val(2) may_be_replaced_by 
     admin__updateconfigdata.
processing_rules(86): admin__opandnullt__pos(admin__overridelock) may_be_replaced_by 3.
processing_rules(87): admin__opandnullt__val(3) may_be_replaced_by 
     admin__overridelock.
processing_rules(88): admin__opandnullt__pos(admin__shutdownop) may_be_replaced_by 4.
processing_rules(89): admin__opandnullt__val(4) may_be_replaced_by 
     admin__shutdownop.
processing_rules(90): admin__opandnullt__pos(admin__opandnullt__last) may_be_replaced_by 4.
processing_rules(91): admin__opandnullt__pos(succ(X)) may_be_replaced_by 
     admin__opandnullt__pos(X) + 1
     if [X <=admin__shutdownop, X <> admin__shutdownop].
processing_rules(92): admin__opandnullt__pos(pred(X)) may_be_replaced_by 
     admin__opandnullt__pos(X) - 1
     if [X >=admin__nullop, X <> admin__nullop].
processing_rules(93): admin__opandnullt__pos(X) >= 0 may_be_deduced_from
     [admin__nullop <= X, X <= admin__shutdownop].
processing_rules(94): admin__opandnullt__pos(X) <= 4 may_be_deduced_from
     [admin__nullop <= X, X <= admin__shutdownop].
processing_rules(95): admin__opandnullt__val(X) >= admin__nullop may_be_deduced_from
     [0 <= X, X <= 4].
processing_rules(96): admin__opandnullt__val(X) <= 
     admin__shutdownop may_be_deduced_from
     [0 <= X, X <= 4].
processing_rules(97): succ(admin__opandnullt__val(X)) may_be_replaced_by 
     admin__opandnullt__val(X+1)
     if [0 <= X, X < 4].
processing_rules(98): pred(admin__opandnullt__val(X)) may_be_replaced_by 
     admin__opandnullt__val(X-1)
     if [0 < X, X <= 4].
processing_rules(99): admin__opandnullt__pos(admin__opandnullt__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 4].
processing_rules(100): admin__opandnullt__val(admin__opandnullt__pos(X)) may_be_replaced_by X
     if [admin__nullop <= X, X <= admin__shutdownop].
processing_rules(101): admin__opandnullt__pos(X) <= 
     admin__opandnullt__pos(Y) & X <= Y are_interchangeable 
     if [admin__nullop <= X, X <= admin__shutdownop, 
     admin__nullop <= Y, Y <= admin__shutdownop].
processing_rules(102): admin__opandnullt__val(X) <= 
     admin__opandnullt__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 4, 0 <= Y, Y <= 4].
