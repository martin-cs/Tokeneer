*****************************************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
*****************************************************************************


CREATED 05-SEP-2011, 15:33:10  SIMPLIFIED 05-SEP-2011, 15:40:21

SPARK Simplifier GPL 2011
Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.

procedure Door.Poll




For path(s) from start to run-time check associated with statement of line 196:

procedure_poll_1.
*** true .          /* all conclusions proved */


For path(s) from start to run-time check associated with statement of line 202:

procedure_poll_2.
*** true .          /* all conclusions proved */


For path(s) from start to run-time check associated with statement of line 215:

procedure_poll_3.
*** true .          /* all conclusions proved */


For path(s) from start to run-time check associated with statement of line 217:

procedure_poll_4.
*** true .          /* all conclusions proved */


For path(s) from start to run-time check associated with statement of line 220:

procedure_poll_5.
*** true .          /* all conclusions proved */


procedure_poll_6.
*** true .          /* all conclusions proved */


For path(s) from start to run-time check associated with statement of line 227:

procedure_poll_7.
*** true .          /* all conclusions proved */


procedure_poll_8.
*** true .          /* all conclusions proved */


For path(s) from start to finish:

procedure_poll_9.
H1:    alarmtypes__alarming <= dooralarm .
H2:    dooralarm <= alarmtypes__silent .
H3:    open <= currentdoor .
H4:    currentdoor <= closed .
H5:    open <= newdoor__1 .
H6:    newdoor__1 <= closed .
H7:    latch__islocked(latch__state__4) <-> clock__greaterthanorequal(
          clock__thecurrenttime(clock__currenttime), latch__prf_latchtimeout(
          latch__state__4)) .
H8:    latch__prf_latchtimeout(latch__state__4) = latch__prf_latchtimeout(
          latch__state) .
H9:    currentdoor = open and (latch__islocked(latch__state__4) and 
          clock__greaterthanorequal(clock__thecurrenttime(clock__currenttime), 
          alarmtimeout)) <-> dooralarm__5 = alarmtypes__alarming .
H10:   alarmtypes__alarming <= dooralarm__5 .
H11:   dooralarm__5 <= alarmtypes__silent .
H12:   audittypes__elementt__size >= 0 .
H13:   audittypes__severityt__size >= 0 .
H14:   alarmtypes__statust__size >= 0 .
H15:   t__size >= 0 .
       ->
C1:    latch__islocked(latch__state) -> latch__state__4 = latch__state and 
          latch__islocked(latch__state__4) .


procedure_poll_10.
H1:    alarmtypes__alarming <= dooralarm .
H2:    dooralarm <= alarmtypes__silent .
H3:    open <= currentdoor .
H4:    currentdoor <= closed .
H5:    currentdoor <> closed .
H6:    latch__islocked(latch__state__4) <-> clock__greaterthanorequal(
          clock__thecurrenttime(clock__currenttime), latch__prf_latchtimeout(
          latch__state__4)) .
H7:    latch__prf_latchtimeout(latch__state__4) = latch__prf_latchtimeout(
          latch__state) .
H8:    dooralarm__5 <> alarmtypes__alarming .
H9:    alarmtypes__alarming <= dooralarm__5 .
H10:   dooralarm__5 <= alarmtypes__silent .
H11:   audittypes__elementt__size >= 0 .
H12:   audittypes__severityt__size >= 0 .
H13:   alarmtypes__statust__size >= 0 .
H14:   t__size >= 0 .
       ->
C1:    latch__islocked(latch__state) -> latch__state__4 = latch__state and 
          latch__islocked(latch__state__4) .


procedure_poll_11.
H1:    alarmtypes__alarming <= dooralarm .
H2:    dooralarm <= alarmtypes__silent .
H3:    open <= currentdoor .
H4:    currentdoor <= closed .
H5:    open <= newdoor__1 .
H6:    currentdoor <> newdoor__1 .
H7:    latch__islocked(latch__state__4) <-> clock__greaterthanorequal(
          clock__thecurrenttime(clock__currenttime), latch__prf_latchtimeout(
          latch__state__4)) .
H8:    latch__prf_latchtimeout(latch__state__4) = latch__prf_latchtimeout(
          latch__state) .
H9:    newdoor__1 = open and (latch__islocked(latch__state__4) and 
          clock__greaterthanorequal(clock__thecurrenttime(clock__currenttime), 
          alarmtimeout)) <-> dooralarm__5 = alarmtypes__alarming .
H10:   alarmtypes__alarming <= dooralarm__5 .
H11:   dooralarm__5 <= alarmtypes__silent .
H12:   newdoor__1 < closed .
H13:   audittypes__elementt__size >= 0 .
H14:   audittypes__severityt__size >= 0 .
H15:   alarmtypes__statust__size >= 0 .
H16:   t__size >= 0 .
       ->
C1:    latch__islocked(latch__state) -> latch__state__4 = latch__state and 
          latch__islocked(latch__state__4) .


procedure_poll_12.
H1:    alarmtypes__alarming <= dooralarm .
H2:    dooralarm <= alarmtypes__silent .
H3:    open <= newdoor__1 .
H4:    newdoor__1 <= closed .
H5:    open <= newdoor__1 .
H6:    newdoor__1 <= closed .
H7:    latch__islocked(latch__state__4) <-> clock__greaterthanorequal(
          clock__thecurrenttime(clock__currenttime), latch__prf_latchtimeout(
          latch__state__4)) .
H8:    latch__prf_latchtimeout(latch__state__4) = latch__prf_latchtimeout(
          latch__state) .
H9:    newdoor__1 = open and (latch__islocked(latch__state__4) and 
          clock__greaterthanorequal(clock__thecurrenttime(clock__currenttime), 
          alarmtimeout)) <-> dooralarm__5 = alarmtypes__alarming .
H10:   alarmtypes__alarming <= dooralarm__5 .
H11:   dooralarm__5 <= alarmtypes__silent .
H12:   audittypes__elementt__size >= 0 .
H13:   audittypes__severityt__size >= 0 .
H14:   alarmtypes__statust__size >= 0 .
H15:   t__size >= 0 .
       ->
C1:    latch__islocked(latch__state) -> latch__state__4 = latch__state and 
          latch__islocked(latch__state__4) .


For checks of refinement integrity: 

procedure_poll_13.
*** true .          /* all conclusions proved */


procedure_poll_14.
*** true .   /* proved using user-defined proof rules. */


