           *******************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 05-SEP-2011 15:33:16.37

                        function Admin.OpIsAvailable




For path(s) from start to assertion of line 106:

function_opisavailable_1.
H1:    ispresent(theadmin) .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
        ->
C1:    nullop = nullop .
C2:    fld_currentop(theadmin) >= opandnullt__first .
C3:    fld_currentop(theadmin) <= opandnullt__last .
C4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
C5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
C6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
C7:    fld_length(keyedop) >= keyboard__datalengtht__first .
C8:    fld_length(keyedop) <= keyboard__datalengtht__last .
C9:    ispresent(theadmin) .
C10:   opt__first >= opt__first .
C11:   opt__first <= opt__last .
C12:   opt__first >= opt__first .
C13:   opt__first <= opt__last .
 

For path(s) from assertion of line 106 to assertion of line 106:

function_opisavailable_2.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op])) .
H19:   fld_length(keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])) .
H20:   fld_length(keyedop) >= datai__first .
H21:   fld_length(keyedop) <= datai__last .
H22:   fld_length(keyedop) >= integer__first .
H23:   fld_length(keyedop) <= integer__last .
H24:   1 >= integer__first .
H25:   1 <= integer__last .
H26:   (1 <= fld_length(keyedop)) -> ((fld_length(keyedop) >= 
           datai__first) and (fld_length(keyedop) <= datai__last)) .
H27:   (1 <= fld_length(keyedop)) -> ((1 >= datai__first) and (1 <= 
           datai__last)) .
H28:   not (1 <= fld_length(keyedop)) .
H29:   true .
H30:   not true .
H31:   not (loop__1__op = opt__last) .
        ->
C1:    theop = nullop .
C2:    fld_currentop(theadmin) >= opandnullt__first .
C3:    fld_currentop(theadmin) <= opandnullt__last .
C4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
C5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
C6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
C7:    fld_length(keyedop) >= keyboard__datalengtht__first .
C8:    fld_length(keyedop) <= keyboard__datalengtht__last .
C9:    ispresent(theadmin) .
C10:   succ(loop__1__op) >= opt__first .
C11:   succ(loop__1__op) <= opt__last .
C12:   succ(loop__1__op) >= opt__first .
C13:   succ(loop__1__op) <= opt__last .
 

function_opisavailable_3.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   not ((fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op]))) and (fld_length(
           keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])))) .
H19:   true .
H20:   not false .
H21:   not (loop__1__op = opt__last) .
        ->
C1:    theop = nullop .
C2:    fld_currentop(theadmin) >= opandnullt__first .
C3:    fld_currentop(theadmin) <= opandnullt__last .
C4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
C5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
C6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
C7:    fld_length(keyedop) >= keyboard__datalengtht__first .
C8:    fld_length(keyedop) <= keyboard__datalengtht__last .
C9:    ispresent(theadmin) .
C10:   succ(loop__1__op) >= opt__first .
C11:   succ(loop__1__op) <= opt__last .
C12:   succ(loop__1__op) >= opt__first .
C13:   succ(loop__1__op) <= opt__last .
 

For path(s) from assertion of line 114 to assertion of line 106:

function_opisavailable_4.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i]) .
H28:   true .
H29:   not false .
H30:   not (loop__1__op = opt__last) .
        ->
C1:    theop = nullop .
C2:    fld_currentop(theadmin) >= opandnullt__first .
C3:    fld_currentop(theadmin) <= opandnullt__last .
C4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
C5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
C6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
C7:    fld_length(keyedop) >= keyboard__datalengtht__first .
C8:    fld_length(keyedop) <= keyboard__datalengtht__last .
C9:    ispresent(theadmin) .
C10:   succ(loop__1__op) >= opt__first .
C11:   succ(loop__1__op) <= opt__last .
C12:   succ(loop__1__op) >= opt__first .
C13:   succ(loop__1__op) <= opt__last .
 

function_opisavailable_5.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   not (element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i])) .
H28:   loop__2__i = fld_length(keyedop__entry__loop__2) .
H29:   true .
H30:   not matched .
H31:   not (loop__1__op = opt__last) .
        ->
C1:    theop = nullop .
C2:    fld_currentop(theadmin) >= opandnullt__first .
C3:    fld_currentop(theadmin) <= opandnullt__last .
C4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
C5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
C6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
C7:    fld_length(keyedop) >= keyboard__datalengtht__first .
C8:    fld_length(keyedop) <= keyboard__datalengtht__last .
C9:    ispresent(theadmin) .
C10:   succ(loop__1__op) >= opt__first .
C11:   succ(loop__1__op) <= opt__last .
C12:   succ(loop__1__op) >= opt__first .
C13:   succ(loop__1__op) <= opt__last .
 

For path(s) from assertion of line 106 to run-time check associated with statement of line 107:

function_opisavailable_6.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
        ->
C1:    loop__1__op >= opt__first .
C2:    loop__1__op <= opt__last .
C3:    loop__1__op >= opt__first .
C4:    loop__1__op <= opt__last .
 

For path(s) from assertion of line 106 to check associated with statement of line 109:

function_opisavailable_7.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op])) .
H19:   fld_length(keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])) .
        ->
C1:    fld_length(keyedop) >= datai__first .
C2:    fld_length(keyedop) <= datai__last .
 

For path(s) from assertion of line 106 to run-time check associated with statement of line 113:

function_opisavailable_8.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op])) .
H19:   fld_length(keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])) .
H20:   fld_length(keyedop) >= datai__first .
H21:   fld_length(keyedop) <= datai__last .
        ->
C1:    fld_length(keyedop) >= integer__first .
C2:    fld_length(keyedop) <= integer__last .
C3:    1 >= integer__first .
C4:    1 <= integer__last .
 

For path(s) from assertion of line 106 to run-time check associated with statement of line 113:

function_opisavailable_9.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op])) .
H19:   fld_length(keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])) .
H20:   fld_length(keyedop) >= datai__first .
H21:   fld_length(keyedop) <= datai__last .
H22:   fld_length(keyedop) >= integer__first .
H23:   fld_length(keyedop) <= integer__last .
H24:   1 >= integer__first .
H25:   1 <= integer__last .
        ->
C1:    (1 <= fld_length(keyedop)) -> ((fld_length(keyedop) >= 
           datai__first) and (fld_length(keyedop) <= datai__last)) .
C2:    (1 <= fld_length(keyedop)) -> ((1 >= datai__first) and (1 <= 
           datai__last)) .
 

For path(s) from assertion of line 106 to assertion of line 114:

function_opisavailable_10.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op])) .
H19:   fld_length(keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])) .
H20:   fld_length(keyedop) >= datai__first .
H21:   fld_length(keyedop) <= datai__last .
H22:   fld_length(keyedop) >= integer__first .
H23:   fld_length(keyedop) <= integer__last .
H24:   1 >= integer__first .
H25:   1 <= integer__last .
H26:   (1 <= fld_length(keyedop)) -> ((fld_length(keyedop) >= 
           datai__first) and (fld_length(keyedop) <= datai__last)) .
H27:   (1 <= fld_length(keyedop)) -> ((1 >= datai__first) and (1 <= 
           datai__last)) .
H28:   1 <= fld_length(keyedop) .
        ->
C1:    fld_length(keyedop) >= datai__first .
C2:    fld_length(keyedop) <= datai__last .
C3:    keyedop = keyedop .
C4:    theop = nullop .
C5:    fld_currentop(theadmin) >= opandnullt__first .
C6:    fld_currentop(theadmin) <= opandnullt__last .
C7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
C8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
C9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
C10:   fld_length(keyedop) >= keyboard__datalengtht__first .
C11:   fld_length(keyedop) <= keyboard__datalengtht__last .
C12:   ispresent(theadmin) .
C13:   1 >= datai__first .
C14:   1 <= datai__last .
C15:   1 >= 1 .
C16:   1 <= fld_length(keyedop) .
C17:   loop__1__op >= opt__first .
C18:   loop__1__op <= opt__last .
C19:   loop__1__op >= opt__first .
C20:   loop__1__op <= opt__last .
 

For path(s) from assertion of line 114 to assertion of line 114:

function_opisavailable_11.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   not (element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i])) .
H28:   not (loop__2__i = fld_length(keyedop__entry__loop__2)) .
        ->
C1:    fld_length(keyedop) >= datai__first .
C2:    fld_length(keyedop) <= datai__last .
C3:    keyedop = keyedop__entry__loop__2 .
C4:    theop = nullop .
C5:    fld_currentop(theadmin) >= opandnullt__first .
C6:    fld_currentop(theadmin) <= opandnullt__last .
C7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
C8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
C9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
C10:   fld_length(keyedop) >= keyboard__datalengtht__first .
C11:   fld_length(keyedop) <= keyboard__datalengtht__last .
C12:   ispresent(theadmin) .
C13:   loop__2__i + 1 >= datai__first .
C14:   loop__2__i + 1 <= datai__last .
C15:   loop__2__i + 1 >= 1 .
C16:   loop__2__i + 1 <= fld_length(keyedop__entry__loop__2) .
C17:   loop__1__op >= opt__first .
C18:   loop__1__op <= opt__last .
C19:   loop__1__op >= opt__first .
C20:   loop__1__op <= opt__last .
 

For path(s) from assertion of line 114 to run-time check associated with statement of line 117:

function_opisavailable_12.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
        ->
C1:    loop__2__i >= keyboard__datai__first .
C2:    loop__2__i <= keyboard__datai__last .
C3:    loop__2__i >= datai__first .
C4:    loop__2__i <= datai__last .
C5:    loop__1__op >= opt__first .
C6:    loop__1__op <= opt__last .
 

For path(s) from assertion of line 106 to check associated with statement of line 129:

function_opisavailable_13.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op])) .
H19:   fld_length(keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])) .
H20:   fld_length(keyedop) >= datai__first .
H21:   fld_length(keyedop) <= datai__last .
H22:   fld_length(keyedop) >= integer__first .
H23:   fld_length(keyedop) <= integer__last .
H24:   1 >= integer__first .
H25:   1 <= integer__last .
H26:   (1 <= fld_length(keyedop)) -> ((fld_length(keyedop) >= 
           datai__first) and (fld_length(keyedop) <= datai__last)) .
H27:   (1 <= fld_length(keyedop)) -> ((1 >= datai__first) and (1 <= 
           datai__last)) .
H28:   not (1 <= fld_length(keyedop)) .
H29:   true .
H30:   true .
        ->
C1:    fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
C2:    fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
C3:    element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
 

function_opisavailable_14.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   not ((fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op]))) and (fld_length(
           keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])))) .
H19:   true .
H20:   false .
        ->
C1:    fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
C2:    fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
C3:    element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
 

For path(s) from assertion of line 114 to check associated with statement of line 129:

function_opisavailable_15.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i]) .
H28:   true .
H29:   false .
        ->
C1:    fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
C2:    fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
C3:    element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
 

function_opisavailable_16.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   not (element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i])) .
H28:   loop__2__i = fld_length(keyedop__entry__loop__2) .
H29:   true .
H30:   matched .
        ->
C1:    fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
C2:    fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
C3:    element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
 

For path(s) from assertion of line 106 to run-time check associated with statement of line 132:

function_opisavailable_17.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op])) .
H19:   fld_length(keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])) .
H20:   fld_length(keyedop) >= datai__first .
H21:   fld_length(keyedop) <= datai__last .
H22:   fld_length(keyedop) >= integer__first .
H23:   fld_length(keyedop) <= integer__last .
H24:   1 >= integer__first .
H25:   1 <= integer__last .
H26:   (1 <= fld_length(keyedop)) -> ((fld_length(keyedop) >= 
           datai__first) and (fld_length(keyedop) <= datai__last)) .
H27:   (1 <= fld_length(keyedop)) -> ((1 >= datai__first) and (1 <= 
           datai__last)) .
H28:   not (1 <= fld_length(keyedop)) .
H29:   true .
H30:   true .
H31:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H32:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H33:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
        ->
C1:    loop__1__op >= opt__first .
C2:    loop__1__op <= opt__last .
C3:    fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
C4:    fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
 

function_opisavailable_18.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   not ((fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op]))) and (fld_length(
           keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])))) .
H19:   true .
H20:   false .
H21:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H22:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H23:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
        ->
C1:    loop__1__op >= opt__first .
C2:    loop__1__op <= opt__last .
C3:    fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
C4:    fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
 

For path(s) from assertion of line 114 to run-time check associated with statement of line 132:

function_opisavailable_19.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i]) .
H28:   true .
H29:   false .
H30:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H31:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H32:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
        ->
C1:    loop__1__op >= opt__first .
C2:    loop__1__op <= opt__last .
C3:    fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
C4:    fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
 

function_opisavailable_20.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   not (element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i])) .
H28:   loop__2__i = fld_length(keyedop__entry__loop__2) .
H29:   true .
H30:   matched .
H31:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H32:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H33:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
        ->
C1:    loop__1__op >= opt__first .
C2:    loop__1__op <= opt__last .
C3:    fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
C4:    fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
 

For path(s) from assertion of line 106 to check associated with statement of line 133:

function_opisavailable_21.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op])) .
H19:   fld_length(keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])) .
H20:   fld_length(keyedop) >= datai__first .
H21:   fld_length(keyedop) <= datai__last .
H22:   fld_length(keyedop) >= integer__first .
H23:   fld_length(keyedop) <= integer__last .
H24:   1 >= integer__first .
H25:   1 <= integer__last .
H26:   (1 <= fld_length(keyedop)) -> ((fld_length(keyedop) >= 
           datai__first) and (fld_length(keyedop) <= datai__last)) .
H27:   (1 <= fld_length(keyedop)) -> ((1 >= datai__first) and (1 <= 
           datai__last)) .
H28:   not (1 <= fld_length(keyedop)) .
H29:   true .
H30:   true .
H31:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H32:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H33:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H34:   loop__1__op >= opt__first .
H35:   loop__1__op <= opt__last .
H36:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H37:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H38:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) .
        ->
C1:    (loop__1__op = overridelock) <-> (prf_rolepresent(
           theadmin) = privtypes__guard) .
 

function_opisavailable_22.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   not ((fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op]))) and (fld_length(
           keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])))) .
H19:   true .
H20:   false .
H21:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H22:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H23:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H24:   loop__1__op >= opt__first .
H25:   loop__1__op <= opt__last .
H26:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H27:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H28:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) .
        ->
C1:    (loop__1__op = overridelock) <-> (prf_rolepresent(
           theadmin) = privtypes__guard) .
 

For path(s) from assertion of line 114 to check associated with statement of line 133:

function_opisavailable_23.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i]) .
H28:   true .
H29:   false .
H30:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H31:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H32:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H33:   loop__1__op >= opt__first .
H34:   loop__1__op <= opt__last .
H35:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H36:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H37:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) .
        ->
C1:    (loop__1__op = overridelock) <-> (prf_rolepresent(
           theadmin) = privtypes__guard) .
 

function_opisavailable_24.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   not (element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i])) .
H28:   loop__2__i = fld_length(keyedop__entry__loop__2) .
H29:   true .
H30:   matched .
H31:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H32:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H33:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H34:   loop__1__op >= opt__first .
H35:   loop__1__op <= opt__last .
H36:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H37:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H38:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) .
        ->
C1:    (loop__1__op = overridelock) <-> (prf_rolepresent(
           theadmin) = privtypes__guard) .
 

For path(s) from assertion of line 106 to run-time check associated with statement of line 134:

function_opisavailable_25.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op])) .
H19:   fld_length(keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])) .
H20:   fld_length(keyedop) >= datai__first .
H21:   fld_length(keyedop) <= datai__last .
H22:   fld_length(keyedop) >= integer__first .
H23:   fld_length(keyedop) <= integer__last .
H24:   1 >= integer__first .
H25:   1 <= integer__last .
H26:   (1 <= fld_length(keyedop)) -> ((fld_length(keyedop) >= 
           datai__first) and (fld_length(keyedop) <= datai__last)) .
H27:   (1 <= fld_length(keyedop)) -> ((1 >= datai__first) and (1 <= 
           datai__last)) .
H28:   not (1 <= fld_length(keyedop)) .
H29:   true .
H30:   true .
H31:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H32:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H33:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H34:   loop__1__op >= opt__first .
H35:   loop__1__op <= opt__last .
H36:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H37:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H38:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) .
H39:   (loop__1__op = overridelock) <-> (prf_rolepresent(
           theadmin) = privtypes__guard) .
        ->
C1:    loop__1__op >= opandnullt__first .
C2:    loop__1__op <= opandnullt__last .
 

function_opisavailable_26.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   not ((fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op]))) and (fld_length(
           keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])))) .
H19:   true .
H20:   false .
H21:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H22:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H23:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H24:   loop__1__op >= opt__first .
H25:   loop__1__op <= opt__last .
H26:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H27:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H28:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) .
H29:   (loop__1__op = overridelock) <-> (prf_rolepresent(
           theadmin) = privtypes__guard) .
        ->
C1:    loop__1__op >= opandnullt__first .
C2:    loop__1__op <= opandnullt__last .
 

For path(s) from assertion of line 114 to run-time check associated with statement of line 134:

function_opisavailable_27.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i]) .
H28:   true .
H29:   false .
H30:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H31:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H32:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H33:   loop__1__op >= opt__first .
H34:   loop__1__op <= opt__last .
H35:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H36:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H37:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) .
H38:   (loop__1__op = overridelock) <-> (prf_rolepresent(
           theadmin) = privtypes__guard) .
        ->
C1:    loop__1__op >= opandnullt__first .
C2:    loop__1__op <= opandnullt__last .
 

function_opisavailable_28.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   not (element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i])) .
H28:   loop__2__i = fld_length(keyedop__entry__loop__2) .
H29:   true .
H30:   matched .
H31:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H32:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H33:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H34:   loop__1__op >= opt__first .
H35:   loop__1__op <= opt__last .
H36:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H37:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H38:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) .
H39:   (loop__1__op = overridelock) <-> (prf_rolepresent(
           theadmin) = privtypes__guard) .
        ->
C1:    loop__1__op >= opandnullt__first .
C2:    loop__1__op <= opandnullt__last .
 

For path(s) from assertion of line 106 to finish:

function_opisavailable_29.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op])) .
H19:   fld_length(keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])) .
H20:   fld_length(keyedop) >= datai__first .
H21:   fld_length(keyedop) <= datai__last .
H22:   fld_length(keyedop) >= integer__first .
H23:   fld_length(keyedop) <= integer__last .
H24:   1 >= integer__first .
H25:   1 <= integer__last .
H26:   (1 <= fld_length(keyedop)) -> ((fld_length(keyedop) >= 
           datai__first) and (fld_length(keyedop) <= datai__last)) .
H27:   (1 <= fld_length(keyedop)) -> ((1 >= datai__first) and (1 <= 
           datai__last)) .
H28:   not (1 <= fld_length(keyedop)) .
H29:   true .
H30:   true .
H31:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H32:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H33:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H34:   loop__1__op >= opt__first .
H35:   loop__1__op <= opt__last .
H36:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H37:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H38:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) .
H39:   (loop__1__op = overridelock) <-> (prf_rolepresent(
           theadmin) = privtypes__guard) .
H40:   loop__1__op >= opandnullt__first .
H41:   loop__1__op <= opandnullt__last .
H42:   loop__1__op >= opandnullt__first .
H43:   loop__1__op <= opandnullt__last .
        ->
C1:    (loop__1__op <> nullop) -> ((loop__1__op = 
           overridelock) <-> (prf_rolepresent(theadmin) = 
           privtypes__guard)) .
C2:    loop__1__op >= opandnullt__first .
C3:    loop__1__op <= opandnullt__last .
 

function_opisavailable_30.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   not ((fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op]))) and (fld_length(
           keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])))) .
H19:   true .
H20:   false .
H21:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H22:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H23:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H24:   loop__1__op >= opt__first .
H25:   loop__1__op <= opt__last .
H26:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H27:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H28:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) .
H29:   (loop__1__op = overridelock) <-> (prf_rolepresent(
           theadmin) = privtypes__guard) .
H30:   loop__1__op >= opandnullt__first .
H31:   loop__1__op <= opandnullt__last .
H32:   loop__1__op >= opandnullt__first .
H33:   loop__1__op <= opandnullt__last .
        ->
C1:    (loop__1__op <> nullop) -> ((loop__1__op = 
           overridelock) <-> (prf_rolepresent(theadmin) = 
           privtypes__guard)) .
C2:    loop__1__op >= opandnullt__first .
C3:    loop__1__op <= opandnullt__last .
 

function_opisavailable_31.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op])) .
H19:   fld_length(keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])) .
H20:   fld_length(keyedop) >= datai__first .
H21:   fld_length(keyedop) <= datai__last .
H22:   fld_length(keyedop) >= integer__first .
H23:   fld_length(keyedop) <= integer__last .
H24:   1 >= integer__first .
H25:   1 <= integer__last .
H26:   (1 <= fld_length(keyedop)) -> ((fld_length(keyedop) >= 
           datai__first) and (fld_length(keyedop) <= datai__last)) .
H27:   (1 <= fld_length(keyedop)) -> ((1 >= datai__first) and (1 <= 
           datai__last)) .
H28:   not (1 <= fld_length(keyedop)) .
H29:   true .
H30:   true .
H31:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H32:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H33:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H34:   loop__1__op >= opt__first .
H35:   loop__1__op <= opt__last .
H36:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H37:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H38:   not (element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op])) .
H39:   theop >= opandnullt__first .
H40:   theop <= opandnullt__last .
        ->
C1:    (theop <> nullop) -> ((theop = overridelock) <-> (
           prf_rolepresent(theadmin) = privtypes__guard)) .
C2:    theop >= opandnullt__first .
C3:    theop <= opandnullt__last .
 

function_opisavailable_32.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   not ((fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op]))) and (fld_length(
           keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])))) .
H19:   true .
H20:   false .
H21:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H22:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H23:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H24:   loop__1__op >= opt__first .
H25:   loop__1__op <= opt__last .
H26:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H27:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H28:   not (element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op])) .
H29:   theop >= opandnullt__first .
H30:   theop <= opandnullt__last .
        ->
C1:    (theop <> nullop) -> ((theop = overridelock) <-> (
           prf_rolepresent(theadmin) = privtypes__guard)) .
C2:    theop >= opandnullt__first .
C3:    theop <= opandnullt__last .
 

function_opisavailable_33.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op])) .
H19:   fld_length(keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])) .
H20:   fld_length(keyedop) >= datai__first .
H21:   fld_length(keyedop) <= datai__last .
H22:   fld_length(keyedop) >= integer__first .
H23:   fld_length(keyedop) <= integer__last .
H24:   1 >= integer__first .
H25:   1 <= integer__last .
H26:   (1 <= fld_length(keyedop)) -> ((fld_length(keyedop) >= 
           datai__first) and (fld_length(keyedop) <= datai__last)) .
H27:   (1 <= fld_length(keyedop)) -> ((1 >= datai__first) and (1 <= 
           datai__last)) .
H28:   not (1 <= fld_length(keyedop)) .
H29:   true .
H30:   not true .
H31:   loop__1__op = opt__last .
H32:   theop >= opandnullt__first .
H33:   theop <= opandnullt__last .
        ->
C1:    (theop <> nullop) -> ((theop = overridelock) <-> (
           prf_rolepresent(theadmin) = privtypes__guard)) .
C2:    theop >= opandnullt__first .
C3:    theop <= opandnullt__last .
 

function_opisavailable_34.
H1:    theop = nullop .
H2:    fld_currentop(theadmin) >= opandnullt__first .
H3:    fld_currentop(theadmin) <= opandnullt__last .
H4:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H5:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H6:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H7:    fld_length(keyedop) >= keyboard__datalengtht__first .
H8:    fld_length(keyedop) <= keyboard__datalengtht__last .
H9:    ispresent(theadmin) .
H10:   loop__1__op >= opt__first .
H11:   loop__1__op <= opt__last .
H12:   loop__1__op >= opt__first .
H13:   loop__1__op <= opt__last .
H14:   loop__1__op >= opt__first .
H15:   loop__1__op <= opt__last .
H16:   loop__1__op >= opt__first .
H17:   loop__1__op <= opt__last .
H18:   not ((fld_length(keyedop) >= fld_minmatchlength(element(
           optokeyed, [loop__1__op]))) and (fld_length(
           keyedop) <= fld_length(element(optokeyed, [
           loop__1__op])))) .
H19:   true .
H20:   not false .
H21:   loop__1__op = opt__last .
H22:   theop >= opandnullt__first .
H23:   theop <= opandnullt__last .
        ->
C1:    (theop <> nullop) -> ((theop = overridelock) <-> (
           prf_rolepresent(theadmin) = privtypes__guard)) .
C2:    theop >= opandnullt__first .
C3:    theop <= opandnullt__last .
 

For path(s) from assertion of line 114 to finish:

function_opisavailable_35.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i]) .
H28:   true .
H29:   false .
H30:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H31:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H32:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H33:   loop__1__op >= opt__first .
H34:   loop__1__op <= opt__last .
H35:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H36:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H37:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) .
H38:   (loop__1__op = overridelock) <-> (prf_rolepresent(
           theadmin) = privtypes__guard) .
H39:   loop__1__op >= opandnullt__first .
H40:   loop__1__op <= opandnullt__last .
H41:   loop__1__op >= opandnullt__first .
H42:   loop__1__op <= opandnullt__last .
        ->
C1:    (loop__1__op <> nullop) -> ((loop__1__op = 
           overridelock) <-> (prf_rolepresent(theadmin) = 
           privtypes__guard)) .
C2:    loop__1__op >= opandnullt__first .
C3:    loop__1__op <= opandnullt__last .
 

function_opisavailable_36.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   not (element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i])) .
H28:   loop__2__i = fld_length(keyedop__entry__loop__2) .
H29:   true .
H30:   matched .
H31:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H32:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H33:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H34:   loop__1__op >= opt__first .
H35:   loop__1__op <= opt__last .
H36:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H37:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H38:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) .
H39:   (loop__1__op = overridelock) <-> (prf_rolepresent(
           theadmin) = privtypes__guard) .
H40:   loop__1__op >= opandnullt__first .
H41:   loop__1__op <= opandnullt__last .
H42:   loop__1__op >= opandnullt__first .
H43:   loop__1__op <= opandnullt__last .
        ->
C1:    (loop__1__op <> nullop) -> ((loop__1__op = 
           overridelock) <-> (prf_rolepresent(theadmin) = 
           privtypes__guard)) .
C2:    loop__1__op >= opandnullt__first .
C3:    loop__1__op <= opandnullt__last .
 

function_opisavailable_37.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i]) .
H28:   true .
H29:   false .
H30:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H31:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H32:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H33:   loop__1__op >= opt__first .
H34:   loop__1__op <= opt__last .
H35:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H36:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H37:   not (element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op])) .
H38:   theop >= opandnullt__first .
H39:   theop <= opandnullt__last .
        ->
C1:    (theop <> nullop) -> ((theop = overridelock) <-> (
           prf_rolepresent(theadmin) = privtypes__guard)) .
C2:    theop >= opandnullt__first .
C3:    theop <= opandnullt__last .
 

function_opisavailable_38.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   not (element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i])) .
H28:   loop__2__i = fld_length(keyedop__entry__loop__2) .
H29:   true .
H30:   matched .
H31:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H32:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H33:   element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op]) -> ((loop__1__op = 
           overridelock) <-> (fld_rolepresent(theadmin) = 
           privtypes__guard)) .
H34:   loop__1__op >= opt__first .
H35:   loop__1__op <= opt__last .
H36:   fld_rolepresent(theadmin) >= 
           privtypes__adminprivileget__first .
H37:   fld_rolepresent(theadmin) <= 
           privtypes__adminprivileget__last .
H38:   not (element(element(isavailable, [fld_rolepresent(
           theadmin)]), [loop__1__op])) .
H39:   theop >= opandnullt__first .
H40:   theop <= opandnullt__last .
        ->
C1:    (theop <> nullop) -> ((theop = overridelock) <-> (
           prf_rolepresent(theadmin) = privtypes__guard)) .
C2:    theop >= opandnullt__first .
C3:    theop <= opandnullt__last .
 

function_opisavailable_39.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i]) .
H28:   true .
H29:   not false .
H30:   loop__1__op = opt__last .
H31:   theop >= opandnullt__first .
H32:   theop <= opandnullt__last .
        ->
C1:    (theop <> nullop) -> ((theop = overridelock) <-> (
           prf_rolepresent(theadmin) = privtypes__guard)) .
C2:    theop >= opandnullt__first .
C3:    theop <= opandnullt__last .
 

function_opisavailable_40.
H1:    fld_length(keyedop) >= datai__first .
H2:    fld_length(keyedop) <= datai__last .
H3:    keyedop = keyedop__entry__loop__2 .
H4:    theop = nullop .
H5:    fld_currentop(theadmin) >= opandnullt__first .
H6:    fld_currentop(theadmin) <= opandnullt__last .
H7:    fld_rolepresent(theadmin) >= privtypes__privileget__first .
H8:    fld_rolepresent(theadmin) <= privtypes__privileget__last .
H9:    for_all(i___1: integer, ((i___1 >= keyboard__datai__first) and (
           i___1 <= keyboard__datai__last)) -> ((element(fld_text(
           keyedop), [i___1]) >= character__first) and (element(
           fld_text(keyedop), [i___1]) <= character__last))) .
H10:   fld_length(keyedop) >= keyboard__datalengtht__first .
H11:   fld_length(keyedop) <= keyboard__datalengtht__last .
H12:   ispresent(theadmin) .
H13:   loop__2__i >= datai__first .
H14:   loop__2__i <= datai__last .
H15:   loop__2__i >= 1 .
H16:   loop__2__i <= fld_length(keyedop__entry__loop__2) .
H17:   loop__1__op >= opt__first .
H18:   loop__1__op <= opt__last .
H19:   loop__1__op >= opt__first .
H20:   loop__1__op <= opt__last .
H21:   loop__2__i >= keyboard__datai__first .
H22:   loop__2__i <= keyboard__datai__last .
H23:   loop__2__i >= datai__first .
H24:   loop__2__i <= datai__last .
H25:   loop__1__op >= opt__first .
H26:   loop__1__op <= opt__last .
H27:   not (element(fld_text(element(optokeyed, [loop__1__op])), [
           loop__2__i]) <> element(fld_text(keyedop), [
           loop__2__i])) .
H28:   loop__2__i = fld_length(keyedop__entry__loop__2) .
H29:   true .
H30:   not matched .
H31:   loop__1__op = opt__last .
H32:   theop >= opandnullt__first .
H33:   theop <= opandnullt__last .
        ->
C1:    (theop <> nullop) -> ((theop = overridelock) <-> (
           prf_rolepresent(theadmin) = privtypes__guard)) .
C2:    theop >= opandnullt__first .
C3:    theop <= opandnullt__last .
 

