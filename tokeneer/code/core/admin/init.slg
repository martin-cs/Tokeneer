*****************************************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
*****************************************************************************


CREATED 05-SEP-2011, 15:33:16  SIMPLIFIED 05-SEP-2011, 15:38:25

SPARK Simplifier GPL 2011
Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.

procedure Admin.Init






RRS  The following user defined rule files have been read:
&&&  d:/sparkdev/tis2011/code/core/admin/admin.rlu
SEM  No semantic checks are performed on the rules.


@@@@@@@@@@  VC: procedure_init_1.  @@@@@@@@@@
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  opandnullt__first <= nullop
%%%  Simplified C3 on reading formula in, to give:
     %%%  C3:  privtypes__privileget__first <= privtypes__useronly
-S-  Applied substitution rule init_rules(29).
     This was achieved by replacing all occurrences of opandnullt__first by:
          nullop.
<S>  New C1:  true
-S-  Applied substitution rule init_rules(30).
     This was achieved by replacing all occurrences of opandnullt__last by:
          shutdownop.
<S>  New C2:  true
-S-  Applied substitution rule init_rules(2).
     This was achieved by replacing all occurrences of 
          privtypes__privileget__first by:
          privtypes__useronly.
<S>  New C3:  true
-S-  Applied substitution rule init_rules(3).
     This was achieved by replacing all occurrences of 
          privtypes__privileget__last by:
          privtypes__securityofficer.
<S>  New C4:  true
***  Proved C1:  true
***  Proved C2:  true
***  Proved C3:  true
***  Proved C4:  true
***  PROVED VC.


@@@@@@@@@@  VC: procedure_init_2.  @@@@@@@@@@
%%%  Simplified H2 on reading formula in, to give:
     %%%  H2:  opandnullt__first <= nullop
%%%  Simplified H4 on reading formula in, to give:
     %%%  H4:  privtypes__privileget__first <= privtypes__useronly
-S-  Applied substitution rule init_rules(2).
     This was achieved by replacing all occurrences of 
          privtypes__privileget__first by:
          privtypes__useronly.
<S>  New H4:  true
-S-  Applied substitution rule init_rules(3).
     This was achieved by replacing all occurrences of 
          privtypes__privileget__last by:
          privtypes__securityofficer.
<S>  New H5:  true
-S-  Applied substitution rule init_rules(29).
     This was achieved by replacing all occurrences of opandnullt__first by:
          nullop.
<S>  New H2:  true
-S-  Applied substitution rule init_rules(30).
     This was achieved by replacing all occurrences of opandnullt__last by:
          shutdownop.
<S>  New H3:  true
---  Eliminated hypothesis H1 (true-hypothesis).
---  Eliminated hypothesis H4 (true-hypothesis).
---  Eliminated hypothesis H5 (true-hypothesis).
---  Eliminated hypothesis H2 (true-hypothesis).
---  Eliminated hypothesis H3 (true-hypothesis).
     +++  New H6:  privtypes__privileget__size >= 0
     +++  New H7:  opandnullt__size >= 0
     +++  New H8:  t__size >= 0
***  Proved C1:  not ispresent(mk__t(rolepresent := privtypes__useronly, 
          currentop := nullop))
     This was achieved by applying the rewrite rule admin_user(5)
     [from rulefile admin.rlu] to rewrite this conclusion to:
<S>  C1:  not false
     This rule could be applied because its side-condition holds, as follows:
     <<<  By simple reasoning, proved: not false
***  Proved C2:  not isdoingop(mk__t(rolepresent := privtypes__useronly, 
          currentop := nullop))
     This was achieved by applying the rewrite rule admin_user(1)
     [from rulefile admin.rlu] to rewrite this conclusion to:
<S>  C2:  not fld_currentop(mk__t(rolepresent := privtypes__useronly, currentop 
          := nullop)) <> nullop
     This rule could be applied because its side-condition holds, as follows:
     <<<  By simple reasoning, proved: not fld_currentop(mk__t(rolepresent := 
          privtypes__useronly, currentop := nullop)) <> nullop
***  PROVED VC.

VCN  2: Summary of user rule application.
FIL  admin.rlu
RUL     admin_user(5)
CON        1
RUL     admin_user(1)
CON        2


OVR  Overall summary of VCs using user rules.
FIL  admin.rlu
RUL     admin_user(5)
VCS        2
RUL     admin_user(1)
VCS        2

