*****************************************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
*****************************************************************************


CREATED 05-SEP-2011, 15:33:16  SIMPLIFIED 05-SEP-2011, 15:38:29

SPARK Simplifier GPL 2011
Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.

procedure Admin.StartOp






RRS  The following user defined rule files have been read:
&&&  d:/sparkdev/tis2011/code/core/admin/admin.rlu
SEM  No semantic checks are performed on the rules.


@@@@@@@@@@  VC: procedure_startop_1.  @@@@@@@@@@
%%%  Simplified H2 on reading formula in, to give:
     %%%  H2:  opandnullt__first <= fld_currentop(theadmin)
%%%  Simplified H4 on reading formula in, to give:
     %%%  H4:  privtypes__privileget__first <= fld_rolepresent(theadmin)
%%%  Simplified H6 on reading formula in, to give:
     %%%  H6:  opt__first <= op
%%%  Simplified C1 on reading formula in, to give:
     %%%  C1:  opandnullt__first <= op
-S-  Applied substitution rule startop_rules(29).
     This was achieved by replacing all occurrences of opandnullt__first by:
          nullop.
<S>  New H2:  nullop <= fld_currentop(theadmin)
<S>  New C1:  nullop <= op
-S-  Applied substitution rule startop_rules(30).
     This was achieved by replacing all occurrences of opandnullt__last by:
          shutdownop.
<S>  New H3:  fld_currentop(theadmin) <= shutdownop
<S>  New C2:  op <= shutdownop
-S-  Applied substitution rule startop_rules(2).
     This was achieved by replacing all occurrences of 
          privtypes__privileget__first by:
          privtypes__useronly.
<S>  New H4:  privtypes__useronly <= fld_rolepresent(theadmin)
-S-  Applied substitution rule startop_rules(3).
     This was achieved by replacing all occurrences of 
          privtypes__privileget__last by:
          privtypes__securityofficer.
<S>  New H5:  fld_rolepresent(theadmin) <= privtypes__securityofficer
-S-  Applied substitution rule startop_rules(58).
     This was achieved by replacing all occurrences of opt__first by:
          archivelog.
<S>  New H6:  archivelog <= op
-S-  Applied substitution rule startop_rules(59).
     This was achieved by replacing all occurrences of opt__last by:
          shutdownop.
<S>  New H7:  op <= shutdownop
***  Proved C1:  nullop <= op
     using hypothesis H6.
***  Proved C2:  op <= shutdownop
     using hypothesis H7.
***  PROVED VC.


@@@@@@@@@@  VC: procedure_startop_2.  @@@@@@@@@@
%%%  Simplified H2 on reading formula in, to give:
     %%%  H2:  opandnullt__first <= fld_currentop(theadmin)
%%%  Simplified H4 on reading formula in, to give:
     %%%  H4:  privtypes__privileget__first <= fld_rolepresent(theadmin)
%%%  Simplified H6 on reading formula in, to give:
     %%%  H6:  opt__first <= op
%%%  Simplified H8 on reading formula in, to give:
     %%%  H8:  opandnullt__first <= op
-S-  Applied substitution rule startop_rules(2).
     This was achieved by replacing all occurrences of 
          privtypes__privileget__first by:
          privtypes__useronly.
<S>  New H4:  privtypes__useronly <= fld_rolepresent(theadmin)
-S-  Applied substitution rule startop_rules(3).
     This was achieved by replacing all occurrences of 
          privtypes__privileget__last by:
          privtypes__securityofficer.
<S>  New H5:  fld_rolepresent(theadmin) <= privtypes__securityofficer
-S-  Applied substitution rule startop_rules(29).
     This was achieved by replacing all occurrences of opandnullt__first by:
          nullop.
<S>  New H2:  nullop <= fld_currentop(theadmin)
<S>  New H8:  nullop <= op
-S-  Applied substitution rule startop_rules(30).
     This was achieved by replacing all occurrences of opandnullt__last by:
          shutdownop.
<S>  New H3:  fld_currentop(theadmin) <= shutdownop
<S>  New H9:  op <= shutdownop
-S-  Applied substitution rule startop_rules(58).
     This was achieved by replacing all occurrences of opt__first by:
          archivelog.
<S>  New H6:  archivelog <= op
-S-  Applied substitution rule startop_rules(59).
     This was achieved by replacing all occurrences of opt__last by:
          shutdownop.
<S>  New H7:  op <= shutdownop
---  Eliminated hypothesis H9 (duplicate of H7).
     +++  New H10:  privtypes__privileget__size >= 0
     +++  New H11:  opandnullt__size >= 0
     +++  New H12:  opt__size >= 0
     +++  New H13:  t__size >= 0
***  Proved C1:  op = overridelock <-> prf_rolepresent(theadmin) = 
          privtypes__guard -> (op = overridelock <-> prf_rolepresent(
          upf_currentop(theadmin, op)) = privtypes__guard)
     This was achieved by applying the rewrite rule admin_user(9)
     [from rulefile admin.rlu] to rewrite this conclusion to:
<S>  C1:  op = overridelock <-> prf_rolepresent(theadmin) = privtypes__guard -> 
          (op = overridelock <-> prf_rolepresent(theadmin) = privtypes__guard)
     This rule could be applied because its side-condition holds, as follows:
     <<<  By simple reasoning, proved: op = overridelock <-> prf_rolepresent(
          theadmin) = privtypes__guard -> (op = overridelock <-> 
          prf_rolepresent(theadmin) = privtypes__guard)
***  Proved C2:  thecurrentop(upf_currentop(theadmin, op)) = op
     This was achieved by applying the rewrite rule admin_user(3)
     [from rulefile admin.rlu] to rewrite this conclusion to:
<S>  C2:  op = op
     This rule could be applied because its side-condition holds, as follows:
     <<<  By simple reasoning, proved: op = op
***  Proved C3:  isdoingop(upf_currentop(theadmin, op))
     This was achieved by applying the rewrite rule admin_user(1)
     [from rulefile admin.rlu] to rewrite this conclusion to:
<S>  C3:  fld_currentop(upf_currentop(theadmin, op)) <> nullop
     This rule could be applied because its side-condition holds, as follows:
     <<<  From H6, proved: fld_currentop(upf_currentop(theadmin, op)) <> nullop
***  Proved C4:  prf_rolepresent(upf_currentop(theadmin, op)) = prf_rolepresent(
          theadmin)
     This was achieved by applying the rewrite rule admin_user(9)
     [from rulefile admin.rlu] to rewrite this conclusion to:
<S>  C4:  prf_rolepresent(theadmin) = prf_rolepresent(theadmin)
     This rule could be applied because its side-condition holds, as follows:
     <<<  By simple reasoning, proved: prf_rolepresent(theadmin) = 
          prf_rolepresent(theadmin)
***  Proved C5:  ispresent(upf_currentop(theadmin, op))
     This was achieved by applying the rewrite rule admin_user(6)
     [from rulefile admin.rlu] to rewrite this conclusion to:
<S>  C5:  ispresent(theadmin)
     This rule could be applied because its side-condition holds, as follows:
     <<<  From H1, proved: ispresent(theadmin)
***  PROVED VC.

VCN  2: Summary of user rule application.
FIL  admin.rlu
RUL     admin_user(9)
CON        1, 4
RUL     admin_user(3)
CON        2
RUL     admin_user(1)
CON        3
RUL     admin_user(6)
CON        5


OVR  Overall summary of VCs using user rules.
FIL  admin.rlu
RUL     admin_user(9)
VCS        2
RUL     admin_user(3)
VCS        2
RUL     admin_user(1)
VCS        2
RUL     admin_user(6)
VCS        2

